{"version":3,"sources":["server/controller.ts","lib/defaultAdaptor.ts","compiler/compilerheaders.ts","lib/helpers.ts","0","lib/config.ts","compiler/loader.ts","server/request.ts","server/valoryheaders.ts","server/valory.ts","server/apiError.ts","server/decorators.ts","main.ts"],"names":["module","exports","name","version","description","typings","main","scripts","pretest","test","build","release","commitmsg","lint","docgen","engines","node","author","license","files","devDependencies","@commitlint/cli","@commitlint/config-conventional","@types/bluebird-global","@types/chai","@types/inquirer","@types/lodash","@types/minimatch","@types/mocha","@types/node","@types/pino","@types/request","@types/request-promise","@types/semver","@types/steed","@types/swagger-parser","@types/yargs","babel-core","babel-plugin-loop-optimizer","babel-plugin-transform-async-to-bluebird","chai","cz-conventional-changelog","fast-async","husky","mocha","mocha-typescript","request","request-promise","semantic-release","typedoc","dependencies","ajv","bluebird","chalk","dot","fast.js","fastify","google-closure-compiler","hyperid","inquirer","js-beautify","json-schema-merge-allof","lodash","lodash-deep","map-keys-deep-lodash","minimatch","moment","pino","semver","steed","swagger-parser","thread-spin","tmp","ts-node","tstl","typescript","xxhashjs","yargs","bin","valory","repositoryUrl","branch","verifyConditions","publish","success","fail","config","commitizen","path","publishConfig","registry"],"mappings":"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","file":"main.map","sourceRoot":"../src","sourcesContent":["import {Logger} from \"pino\";\nimport {Valory} from \"../main\";\n\nexport class Controller {\n\tpublic logger: Logger;\n\tprivate statusCode: number = 200;\n\tprivate headers = {} as { [name: string]: string | undefined };\n\n\tpublic setStatus(statusCode: number) {\n\t\tthis.statusCode = statusCode;\n\t}\n\n\tpublic getStatus() {\n\t\treturn this.statusCode;\n\t}\n\n\tpublic setHeader(name: string, value?: string) {\n\t\tthis.headers[name] = value;\n\t}\n\n\tpublic getHeader(name: string) {\n\t\treturn this.headers[name];\n\t}\n\n\tpublic getHeaders() {\n\t\treturn this.headers;\n\t}\n\n\tpublic clearStatus() {\n\t\tthis.statusCode = 200;\n\t}\n\n\tpublic clearHeaders() {\n\t\tthis.headers = {};\n\t}\n\n\tpublic buildError(error: string, message?: string) {\n\t\tconst obj = Valory.getInstance().buildError(error, message);\n\t\tthis.setStatus(obj.statusCode);\n\t\treturn obj.body;\n\t}\n}\n","import {ApiExchange, ApiResponse, ApiServer, HttpMethod, ValoryMetadata, ApiRequest} from \"../main\";\nimport {FastifyInstance, HTTPMethod } from \"fastify\";\nimport {IncomingMessage, ServerResponse, Server} from \"http\";\nimport fastify = require(\"fastify\");\nimport {parse} from \"querystring\";\nconst intern = require(\"fast.js/string/intern\");\nconst pathReplacer = /{([\\S]*?)}/g;\n\nexport class DefaultAdaptor implements ApiServer {\n\tpublic readonly locallyRunnable: boolean = true;\n\tpublic readonly allowDocSite: boolean = true;\n\tprivate instance: FastifyInstance<Server, IncomingMessage, ServerResponse> = fastify({});\n\tconstructor() {\n\t\tthis.instance.addContentTypeParser(\"application/x-www-form-urlencoded\", {parseAs: \"string\"}, formParser as any);\n\t\tthis.instance.addContentTypeParser(\"application/json\", {parseAs: \"string\"}, jsonParser as any);\n\t}\n\tpublic register(path: string, method: HttpMethod,\n\t\t\t\t\thandler: (request: ApiRequest) => ApiResponse | Promise<ApiResponse>) {\n\t\tconst route = `${path}:${HttpMethod[method]}`;\n\t\tpath = intern(path.replace(pathReplacer, \":$1\"));\n\t\tthis.instance.route({\n\t\t\tmethod: HttpMethod[method] as HTTPMethod,\n\t\t\turl: path,\n\t\t\thandler: async (req, res) => {\n\t\t\t\t// FIXME: setting both formData and body is lazy, need a better solution\n\t\t\t\tconst transRequest = new ApiRequest({\n\t\t\t\t\theaders: req.req.headers as {[key: string]: any},\n\t\t\t\t\tbody: null,\n\t\t\t\t\trawBody: null,\n\t\t\t\t\tformData: req.body,\n\t\t\t\t\tquery: req.query,\n\t\t\t\t\tpath: req.params,\n\t\t\t\t\troute,\n\t\t\t\t});\n\t\t\t\tif (req.req.headers[\"content-type\"] === \"application/json\" && req.body != null) {\n\t\t\t\t\ttransRequest.body = req.body.parsed;\n\t\t\t\t\ttransRequest.rawBody = req.body.raw;\n\t\t\t\t} else {\n\t\t\t\t\ttransRequest.body = req.body;\n\t\t\t\t}\n\t\t\t\tconst response = await handler(transRequest);\n\t\t\t\tres.code(response.statusCode);\n\t\t\t\t(res as any).headers(response.headers);\n\t\t\t\tres.send(response.body);\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic getExport(metadata: ValoryMetadata, options: any): {valory: ValoryMetadata} {\n\t\tthis.instance.listen(options.port || process.env.PORT, options.host || process.env.HOST);\n\t\treturn {valory: metadata};\n\t}\n\n\tpublic shutdown() {\n\t\tthis.instance.server.close();\n\t}\n}\n\nfunction jsonParser(req: IncomingMessage, body: string, done: (err?: Error, body?: any) => void) {\n\tlet json = null;\n\ttry {\n\t\tjson = JSON.parse(body);\n\t} catch (err) {\n\t\terr.statusCode = 400;\n\t\treturn done(err, undefined);\n\t}\n\tdone(null, {parsed: json, raw: body});\n}\n\nfunction formParser(req: IncomingMessage, body: string, done: (err?: Error, body?: any) => void) {\n\tdone(null, parse(body));\n}\n","import {Swagger} from \"../server/swagger\";\n\nexport const HASH_SEED = 3141997;\n\nexport interface ExtendedSchema extends Swagger.Schema {\n\tconst?: any;\n\toneOf?: ExtendedSchema[];\n\tanyOf?: ExtendedSchema[];\n}\n\nexport interface RequestFieldMap {\n\theader: string;\n\tbody: string;\n\tformData: string;\n\tquery: string;\n\tpath: string;\n\n\t[key: string]: string;\n}\n\nexport interface ValidatorModule {\n\tdefHash: string;\n\tglobalConsume: string[];\n\tswaggerBlob: string;\n\tgetValidator: (path: string, method: string) => (data: any) => string | string[] | boolean;\n}\n\nexport type ValidatorModuleContent = string;\n\nexport interface MangledKey {\n\toriginal: string;\n\tmangled: string;\n}\n\nexport interface DiscriminatorMap {\n\t[propName: string]: {\n\t\tparent: string;\n\t\tchildren: string[];\n\t};\n}\n\nexport interface CompilerOutput {\n\tmodule: ValidatorModuleContent;\n\tdebugArtifacts?: {\n\t\thashes: string[];\n\t\tpreSwagger: { swagger: Swagger.Spec, discriminators: DiscriminatorMap };\n\t\tderefSwagger: Swagger.Spec;\n\t\tinitialSchema: ExtendedSchema[];\n\t\tprocessedSchema: ExtendedSchema[];\n\t\tinitialCompiles: any[];\n\t\tmangledSchema: Array<{ schema: ExtendedSchema, mangledKeys: MangledKey[] }>;\n\t\tintermediateFunctions: string[];\n\t\tintermediateModule: ValidatorModuleContent;\n\t\tpostCompileModule: ValidatorModuleContent;\n\t\tclosureOutput: { stdout: string, stderr: string, exitCode: number };\n\t};\n}\n\nexport enum CompilationLevel {\n\t\"ADVANCED\",\n\t\"WHITESPACE_ONLY\",\n\t\"SIMPLE\",\n}\n\nexport interface ICompilerOptions {\n\tdebug?: boolean;\n\trequestFieldMapping?: RequestFieldMap;\n\tcompilationLevel?: CompilationLevel;\n\tsingleError?: boolean;\n\tdiscrimFastFail?: boolean;\n}\n\nexport const FUNCTION_PREFIX = \"f\";\n","import {ThreadSpinner} from \"thread-spin\";\nimport chalk from \"chalk\";\nimport {Config} from \"./config\";\n\nconst MS_PER_SEC = 1000;\nconst NS_PER_MS = 1e6;\n\nexport function fastConcat<T>(...arrays: T[][]): T[] {\n\tconst length = arguments.length;\n\tconst arr = [];\n\tlet i;\n\tlet item;\n\tlet childLength;\n\tlet j;\n\n\tfor (i = 0; i < length; i++) {\n\t\titem = arguments[i];\n\t\tif (Array.isArray(item)) {\n\t\t\tchildLength = item.length;\n\t\t\tfor (j = 0; j < childLength; j++) {\n\t\t\t\tarr.push(item[j]);\n\t\t\t}\n\t\t} else {\n\t\t\tarr.push(item);\n\t\t}\n\t}\n\treturn arr;\n}\n\nexport function fastForEach<T>(subject: T[], fn: (item: T, index: number, subject: T[]) => void, thisContext: any) {\n\tconst length = subject.length;\n\tconst iterator = thisContext !== undefined ? bindInternal3(fn, thisContext) : fn;\n\tlet i;\n\tfor (i = 0; i < length; i++) {\n\t\titerator(subject[i], i, subject);\n\t}\n}\n\nexport function bindInternal3<A, B, C>(func: (a: A, b: B, c: C) => any, thisContext: any) {\n\treturn (a: A, b: B, c: C) => {\n\t\treturn func.call(thisContext, a, b, c);\n\t};\n}\n\nexport function convertTime(time: [number, number]): number {\n\treturn time[0] * MS_PER_SEC + time[1] / NS_PER_MS;\n}\n\nexport async function spinnerFail(message: string, e: any) {\n\tawait Config.Spinner.fail(chalk.red.bold(message + \"\\n\"));\n\tThreadSpinner.shutdown();\n\tconsole.error(e);\n\tprocess.exit(1);\n}\n",null,"import * as path from \"path\";\nimport {readFileSync} from \"fs\";\nimport {ThreadSpinner} from \"thread-spin\";\nimport {IPackageJSON} from \"./package\";\nimport {gt, coerce} from \"semver\";\nimport {execSync, spawnSync} from \"child_process\";\nimport chalk from \"chalk\";\nimport {spinnerFail} from \"./helpers\";\n\nexport const CLI_MODE_FLAG = \"VALORY_CLI\";\nexport const VALORY_ROOT = \"VALORY_ROOT\";\n\nexport interface ValoryConfig {\n\tentrypoint: string;\n\tsourceEntrypoint?: string;\n\tbasePath?: string;\n\tsingleError?: boolean;\n}\n\nexport namespace Config {\n\texport const CONFIG_FILE = \"valory.json\";\n\texport const SWAGGER_FILE = \"swagger.json\";\n\texport const COMPILED_SWAGGER_FILE = \".compswag.js\";\n\texport const GENERATED_ROUTES_FILE = \"generatedRoutes.ts\";\n\texport const COMPILED_ROUTES_FILE = \"generatedRoutes.js\";\n\texport let RootPath = \"\";\n\texport let CompilerMode = false;\n\texport let Spinner: ThreadSpinner;\n\texport let Loaded = false;\n\texport let ConfigPath = \"\";\n\texport let SwaggerPath = \"\";\n\texport let CompSwagPath = \"\";\n\texport let ConfigData: ValoryConfig;\n\texport let PackageJSON: IPackageJSON = null;\n\texport let ValoryVersion = \"\";\n\texport let GeneratedRoutePath = \"\";\n\texport let SourceRoutePath = \"\";\n\texport let PackageJSONPath = \"\";\n\n\texport function load(loadConfig: boolean = true, root?: string) {\n\t\tif (Loaded) {\n\t\t\treturn;\n\t\t}\n\t\tCompilerMode = process.env.VALORYCOMPILER === \"TRUE\";\n\t\tLoaded = true;\n\t\tconst rootVar = process.env[VALORY_ROOT];\n\t\troot = (rootVar != null) ? rootVar : root || resolveRootPath();\n\t\tRootPath = root;\n\t\tprocess.env[VALORY_ROOT] = RootPath;\n\t\tConfigPath = `${RootPath}/${CONFIG_FILE}`;\n\t\tSwaggerPath = `${RootPath}/${SWAGGER_FILE}`;\n\t\tCompSwagPath = `${RootPath}/${COMPILED_SWAGGER_FILE}`;\n\t\tPackageJSONPath = `${RootPath}/package.json`;\n\t\tif (CompilerMode) {\n\t\t\tSpinner = new ThreadSpinner(undefined, process.env.NODE_ENV === \"test\");\n\t\t\tValoryVersion = require(\"../../package.json\").version;\n\t\t\tPackageJSON = require(PackageJSONPath);\n\t\t}\n\t\tif (loadConfig) {\n\t\t\ttry {\n\t\t\t\tConfigData = JSON.parse(readFileSync(ConfigPath, {encoding: \"utf8\"}));\n\t\t\t} catch (err) {\n\t\t\t\t// return;\n\t\t\t\tthrow Error(\"Valory config is missing from: \" + ConfigPath);\n\t\t\t}\n\t\t\tConfigData.entrypoint = path.resolve(path.join(RootPath), ConfigData.entrypoint);\n\t\t\tGeneratedRoutePath = `${path.resolve(path.dirname(ConfigData.entrypoint))}/${COMPILED_ROUTES_FILE}`;\n\t\t\tif (ConfigData.sourceEntrypoint) {\n\t\t\t\tConfigData.sourceEntrypoint = path.resolve(path.join(RootPath), ConfigData.sourceEntrypoint);\n\t\t\t\tSourceRoutePath = `${path.resolve(path.dirname(ConfigData.sourceEntrypoint))}/${GENERATED_ROUTES_FILE}`;\n\t\t\t}\n\t\t}\n\t\t// console.log(Config);\n\t}\n\n\texport async function checkRequirements() {\n\t\tconst versionRegex = /version \\\"([A-Za-z0-9\\_\\.]*?)\\\"/g;\n\t\tconsole.log(chalk.bold(\"Requirements\"));\n\t\tawait Spinner.start(\"Node 8+\");\n\t\tif (!gt(coerce(process.version), \"8.0.0\")) {\n\t\t\tawait spinnerFail(\"Node version too low\", null);\n\t\t}\n\t\tawait Spinner.succeed(chalk.green(`Node ${process.version}`));\n\t\tawait Spinner.start(\"Java 1.7+\");\n\t\ttry {\n\t\t\tconst javaOutput = spawnSync(\"java\", [\"-version\"]).stderr;\n\t\t\t// console.log(javaOutput);\n\t\t\t// console.log( versionRegex.exec(javaOutput.toString()));\n\t\t\tconst javaVersion = versionRegex.exec(javaOutput.toString())[1];\n\t\t\tif (!gt(coerce(javaVersion), coerce(\"1.7\"))) {\n\t\t\t\tawait spinnerFail(\"Java version too low\", null);\n\t\t\t}\n\t\t\tawait Spinner.succeed(chalk.green(`Java ${javaVersion}`));\n\t\t} catch (e) {\n\t\t\tawait spinnerFail(\"Java installation missing or broken\", e);\n\t\t}\n\t\tconsole.log(\"\");\n\t}\n\n\tfunction resolveRootPath(): string {\n\t\treturn __dirname.split(\"node_modules\")[0];\n\t}\n}\n","import {Swagger} from \"../server/swagger\";\nimport {HASH_SEED, ValidatorModule} from \"./compilerheaders\";\nimport {Config} from \"../lib/config\";\n\nconst XXH = require(\"xxhashjs\");\n\nexport function loadModule(definitions: {[x: string]: Swagger.Schema}): ValidatorModule {\n\tconst module: ValidatorModule = require(Config.CompSwagPath);\n\tif (XXH.h32(JSON.stringify(definitions), HASH_SEED).toString() !== module.defHash) {\n\t\tthrow Error(\"Compiled swagger is out of date. Please run valory CLI.\");\n\t}\n\treturn module;\n}\n","import {ApiExchange} from \"./valoryheaders\";\nconst uuid = require(\"hyperid\")();\n\nexport interface AttachmentKey<T> {\n\treadonly id: string;\n\t/** @hidden */ readonly marker: T;\n}\n\nexport interface ApiRequestOptions {\n    headers: { [key: string]: any; };\n    body: any;\n    rawBody: any;\n    formData: { [key: string]: any; };\n    query: { [key: string]: any; };\n    path: { [key: string]: any; };\n    route: string;\n}\n\nexport class ApiRequest implements ApiExchange {\n\tpublic static createKey<T>(): AttachmentKey<T> {\n\t\treturn {\n\t\t\tid: uuid(),\n\t\t\tmarker: 0 as any,\n\t\t};\n\t}\n    public headers: { [key: string]: any; };\n    public body: any;\n    public rawBody: any;\n    public formData: { [key: string]: any; };\n    public query: { [key: string]: any; };\n    public path: { [key: string]: any; };\n    public route: string;\n\tprivate attachments: {[key: string]: any} = {};\n    // public attachments: AttachmentDict;\n\n    constructor(options: ApiRequestOptions) {\n        this.headers = options.headers;\n        this.body = options.body;\n        this.rawBody = options.rawBody;\n        this.formData = options.formData;\n        this.query = options.query;\n        this.route = options.route;\n        this.path = options.path;\n    }\n\n\tpublic putAttachment<T>(key: AttachmentKey<T>, value: T): void {\n\t\tif (this.attachments[key.id] != null) {\n\t\t\tthrow Error(\"Refusing to clobber existing attachment\");\n\t\t}\n\t\tthis.attachments[key.id] = value;\n\t}\n\n\tpublic getAttachment<T>(key: AttachmentKey<T>): T | null {\n\t\treturn this.attachments[key.id] as (T | null);\n\t}\n}\n","import {ApiRequest} from \"./request\";\nimport {Swagger} from \"./swagger\";\nimport {Logger} from \"pino\";\n\n/** @hidden */ export const VALORYLOGGERVAR = \"LOGLEVEL\";\n/** @hidden */ export const VALORYPRETTYLOGGERVAR = \"PRETTYLOG\";\n/** @hidden */ export const VALORYMETAVAR = \"VALORY_METATDATA\";\nexport type ErrorFormatter = (error: ErrorDef, message?: string | string[]) => ApiResponse;\n\nexport interface ApiExchange {\n\theaders: { [key: string]: any };\n\tbody: any;\n}\n\nexport interface ApiResponse extends ApiExchange {\n\tstatusCode: number;\n}\n\nexport type ApiMiddlewareHandler = (req: ApiRequest, logger: Logger,\n\t\t\t\t\t\t\t\t\tdone: (error?: ApiResponse) => void) => void;\n\nexport interface ApiMiddleware {\n\ttag?: Array<Swagger.Tag | string> | Swagger.Tag | string;\n\tname: string;\n\thandler: ApiMiddlewareHandler;\n}\n\nexport interface ErrorDef {\n\tstatusCode: number;\n\terrorCode: number;\n\tdefaultMessage: string;\n}\n\nexport interface RequestContext {\n\trequestId: string;\n}\n\nexport type ApiHandler = (request: ApiRequest, logger: Logger, requestContext: RequestContext)\n\t=> Promise<ApiResponse> | ApiResponse;\n\nexport enum HttpMethod {\n\tPOST,\n\tPUT,\n\tGET,\n\tDELETE,\n\tHEAD,\n\tPATCH,\n}\n\nexport interface ApiServer {\n\tlocallyRunnable: boolean;\n\tregister: (path: string, method: HttpMethod, handler: (request: ApiRequest) =>\n\t\tApiResponse | Promise<ApiResponse>) => void;\n\tallowDocSite: boolean;\n\tgetExport: (metadata: ValoryMetadata, options: any) => { valory: ValoryMetadata };\n\tshutdown: () => void;\n}\n\nexport interface ValoryMetadata {\n\tundocumentedEndpoints: string[];\n\tvaloryPath: string;\n\tcompiledSwaggerPath: string;\n\tswagger: Swagger.Spec;\n}\n","global.Promise = require(\"bluebird\");\nimport {ValidatorModule} from \"../compiler/compilerheaders\";\nimport {Swagger} from \"./swagger\";\nimport {forIn, isNil, omitBy, set, uniq} from \"lodash\";\nimport {loadModule} from \"../compiler/loader\";\nimport {readFileSync} from \"fs\";\nimport {Steed} from \"steed\";\nimport {Logger} from \"pino\";\nimport {ApiRequest, AttachmentKey} from \"./request\";\nimport {Config} from \"../lib/config\";\nimport {DefaultAdaptor} from \"../lib/defaultAdaptor\";\nimport {\n\tApiExchange,\n\tApiHandler,\n\tApiMiddleware,\n\tApiResponse,\n\tApiServer,\n\tErrorDef,\n\tErrorFormatter,\n\tHttpMethod,\n\tVALORYLOGGERVAR,\n\tValoryMetadata,\n\tVALORYMETAVAR,\n\tVALORYPRETTYLOGGERVAR,\n} from \"./valoryheaders\";\n\nimport P = require(\"pino\");\nimport pathMod = require(\"path\");\n\nconst steed: Steed = require(\"steed\")();\nconst uuid = require(\"hyperid\")();\n\nconst ERRORTABLEHEADER = \"|Status Code|Name|Description|\\n|-|-|--|\\n\";\nconst REDOCPATH = \"../../html/index.html\";\n\nconst DefaultErrorFormatter: ErrorFormatter = (error, message): ApiResponse => {\n\treturn {\n\t\tstatusCode: error.statusCode,\n\t\tbody: {\n\t\t\tcode: error.errorCode,\n\t\t\tmessage: (message != null) ? message : error.defaultMessage,\n\t\t},\n\t\theaders: {\"Content-Type\": \"application/json\"},\n\t};\n};\n\nexport interface ValoryOptions {\n\tinfo: Swagger.Info;\n\tserver: ApiServer;\n\terrors?: { [x: string]: ErrorDef };\n\tconsumes?: string[];\n\tproduces?: string[];\n\tparameters?: { [name: string]: Swagger.Parameter };\n\tresponses?: { [name: string]: Swagger.Response };\n\tdefinitions?: { [x: string]: Swagger.Schema };\n\ttags?: Swagger.Tag[];\n\tbasePath?: string;\n}\n\nconst DefaultErrors: { [x: string]: ErrorDef } = {\n\tValidationError: {\n\t\tstatusCode: 200,\n\t\terrorCode: 1001,\n\t\tdefaultMessage: \"Invalid Parameters\",\n\t},\n\tTokenMalformed: {\n\t\tstatusCode: 200,\n\t\terrorCode: 1002,\n\t\tdefaultMessage: \"Authorization Failure\",\n\t},\n\tInternalError: {\n\t\tstatusCode: 200,\n\t\terrorCode: 1003,\n\t\tdefaultMessage: \"An internal error occured\",\n\t},\n};\n\nexport class Valory {\n\tpublic static ValidationResultKey: AttachmentKey<true | string[] | string>\n\t\t= ApiRequest.createKey<true | string[] | string>();\n\tpublic static RequestIDKey: AttachmentKey<string> = ApiRequest.createKey<string>();\n\tpublic static ResponseKey: AttachmentKey<ApiResponse> = ApiRequest.createKey<ApiResponse>();\n\n\t/**\n\t * Create the Valory instance\n\t */\n\tpublic static createInstance(options: ValoryOptions): Valory {\n\t\tValory.directInstantiation = false;\n\t\treturn new Valory(options.info, options.errors || {}, options.consumes, options.produces, options.definitions || {},\n\t\t\toptions.tags || [], options.server, options.basePath, options.parameters, options.responses);\n\t}\n\n\t/**\n\t * Get the valory instance\n\t */\n\tpublic static getInstance(): Valory {\n\t\tif (Valory.instance == null) {\n\t\t\tthrow Error(\"Valory instance has not yet been created\");\n\t\t}\n\t\treturn Valory.instance;\n\t}\n\n\tprivate static instance: Valory;\n\tprivate static directInstantiation = true;\n\tpublic Logger = P({\n\t\tlevel: process.env[VALORYLOGGERVAR] || \"info\",\n\t\tprettyPrint: process.env[VALORYPRETTYLOGGERVAR] === \"true\",\n\t});\n\tprivate COMPILERMODE = process.env.VALORYCOMPILER === \"TRUE\";\n\tprivate TESTMODE: boolean = (process.env.TEST_MODE === \"TRUE\");\n\tprivate errorFormatter: ErrorFormatter = DefaultErrorFormatter;\n\tprivate globalMiddleware: ApiMiddleware[] = [];\n\tprivate globalPostMiddleware: ApiMiddleware[] = [];\n\tprivate apiDef: Swagger.Spec;\n\tprivate validatorModule: ValidatorModule;\n\tprivate errors = DefaultErrors;\n\tprivate registerGeneratedRoutes: (app: Valory) => void;\n\tprivate metadata: ValoryMetadata = {\n\t\tundocumentedEndpoints: [],\n\t\tvaloryPath: __dirname,\n\t\tcompiledSwaggerPath: Config.CompSwagPath,\n\t\tswagger: null,\n\t};\n\n\t/**\n\t * @deprecated use [[Valory.createInstance]] instead\n\t */\n\tconstructor(info: Swagger.Info, errors: { [x: string]: ErrorDef }, consumes: string[] = [], produces: string[] = [],\n\t\t\t\tdefinitions: { [x: string]: Swagger.Schema }, tags: Swagger.Tag[], public server: ApiServer, basePath?: string,\n\t\t\t\tparameters: { [name: string]: Swagger.Parameter } = {},\n\t\t\t\tresponses: { [name: string]: Swagger.Response } = {}) {\n\t\tConfig.load();\n\t\tif (Valory.instance != null) {\n\t\t\tthrow Error(\"Only a single valory instance is allowed\");\n\t\t}\n\t\tif (Valory.directInstantiation) {\n\t\t\tthrow Error(\"Direct instantiation of valory is not allowed\");\n\t\t}\n\t\tValory.instance = this;\n\t\tthis.apiDef = {\n\t\t\tswagger: \"2.0\",\n\t\t\tinfo,\n\t\t\tpaths: {},\n\t\t\tdefinitions,\n\t\t\ttags,\n\t\t\tconsumes,\n\t\t\tproduces,\n\t\t\tparameters,\n\t\t\tresponses,\n\t\t};\n\n\t\tif (basePath != null) {\n\t\t\tthis.Logger.debug(\"Path prefix set:\", basePath);\n\t\t\tthis.apiDef.basePath = basePath;\n\t\t}\n\n\t\tObject.assign(this.errors, errors);\n\t\tif (!this.COMPILERMODE) {\n\t\t\tthis.Logger.info(\"Starting valory\");\n\n\t\t\tif (this.TESTMODE) {\n\t\t\t\tthis.server = new DefaultAdaptor();\n\t\t\t}\n\t\t\tif (Config.SourceRoutePath !== \"\") {\n\t\t\t\tconst genRoutes = require(Config.GeneratedRoutePath);\n\t\t\t\tObject.assign(this.apiDef.definitions, genRoutes.definitions);\n\t\t\t\tthis.registerGeneratedRoutes = genRoutes.register;\n\t\t\t}\n\t\t\tthis.validatorModule = loadModule(definitions);\n\t\t\tif (this.server.allowDocSite) {\n\t\t\t\tthis.registerDocSite();\n\t\t\t}\n\t\t} else {\n\t\t\tthis.Logger.debug(\"Starting in compiler mode\");\n\t\t\tthis.apiDef.tags.push(generateErrorTable(this.errors));\n\t\t\t// console.log(Config);\n\t\t\tif (Config.SourceRoutePath !== \"\") {\n\t\t\t\tconst genRoutes = require(Config.SourceRoutePath);\n\t\t\t\tObject.assign(this.apiDef.definitions, genRoutes.definitions);\n\t\t\t\tthis.registerGeneratedRoutes = genRoutes.register;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Register an endpoint with a given method\n\t */\n\tpublic endpoint(path: string, method: HttpMethod, swaggerDef: Swagger.Operation, handler: ApiHandler,\n\t\t\t\t\tmiddleware: ApiMiddleware[] = [], documented: boolean = true, postMiddleware: ApiMiddleware[] = []) {\n\t\tconst stringMethod = HttpMethod[method].toLowerCase();\n\t\tthis.Logger.debug(`Registering endpoint ${this.apiDef.basePath || \"\"}${path}:${stringMethod}`);\n\t\tif (this.COMPILERMODE) {\n\t\t\tthis.endpointCompile(path, method, swaggerDef, handler, stringMethod, middleware, documented, postMiddleware);\n\t\t} else {\n\t\t\tthis.endpointRun(path, method, swaggerDef, handler, stringMethod, middleware, documented, postMiddleware);\n\t\t}\n\t}\n\n\t/**\n\t * Override the default error formatter\n\t */\n\tpublic setErrorFormatter(formatter: ErrorFormatter) {\n\t\tthis.errorFormatter = formatter;\n\t}\n\n\t/**\n\t * Build an ApiExchange from either an error name or an ErrorDef\n\t */\n\tpublic buildError(error: string | ErrorDef, message?: string | string[]): ApiResponse {\n\t\tconst errorDef: ErrorDef = (typeof error === \"string\") ? this.errors[error] : error;\n\t\tif (errorDef == null) {\n\t\t\tthrow Error(`Error definition \"${error}\" does not exist`);\n\t\t}\n\t\treturn this.errorFormatter(errorDef, message);\n\t}\n\n\t/**\n\t * Convenience method to build a return exchange when only body and/or header customization is required\n\t */\n\tpublic buildSuccess(body: any, headers: { [key: string]: any } = {}): ApiResponse {\n\t\tif (headers[\"Content-Type\"] == null) {\n\t\t\tif (typeof body === \"object\") {\n\t\t\t\theaders[\"Content-Type\"] = \"application/json\";\n\t\t\t} else if (typeof body === \"string\") {\n\t\t\t\theaders[\"Content-Type\"] = \"text/plain\";\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tbody,\n\t\t\theaders,\n\t\t\tstatusCode: 200,\n\t\t};\n\t}\n\n\t/**\n\t * Register GET endpoint\n\t */\n\tpublic get(path: string, swaggerDef: Swagger.Operation, handler: ApiHandler, middleware: ApiMiddleware[] = [],\n\t\t\t   documented: boolean = true, postMiddleware: ApiMiddleware[] = []) {\n\t\tthis.endpoint(path, HttpMethod.GET, swaggerDef, handler, middleware, documented, postMiddleware);\n\t}\n\n\t/**\n\t * Register POST endpoint\n\t */\n\tpublic post(path: string, swaggerDef: Swagger.Operation, handler: ApiHandler, middleware: ApiMiddleware[] = [],\n\t\t\t\tdocumented: boolean = true, postMiddleware: ApiMiddleware[] = []) {\n\t\tthis.endpoint(path, HttpMethod.POST, swaggerDef, handler, middleware, documented, postMiddleware);\n\t}\n\n\t/**\n\t * Register DELETE endpoint\n\t */\n\tpublic delete(path: string, swaggerDef: Swagger.Operation, handler: ApiHandler, middleware: ApiMiddleware[] = [],\n\t\t\t\t  documented: boolean = true, postMiddleware: ApiMiddleware[] = []) {\n\t\tthis.endpoint(path, HttpMethod.DELETE, swaggerDef, handler, middleware, documented, postMiddleware);\n\t}\n\n\t/**\n\t * Register HEAD endpoint\n\t */\n\tpublic head(path: string, swaggerDef: Swagger.Operation, handler: ApiHandler, middleware: ApiMiddleware[] = [],\n\t\t\t\tdocumented: boolean = true, postMiddleware: ApiMiddleware[] = []) {\n\t\tthis.endpoint(path, HttpMethod.HEAD, swaggerDef, handler, middleware, documented, postMiddleware);\n\t}\n\n\t/**\n\t * Register PATCH endpoint\n\t */\n\tpublic patch(path: string, swaggerDef: Swagger.Operation, handler: ApiHandler, middleware: ApiMiddleware[] = [],\n\t\t\t\t documented: boolean = true, postMiddleware: ApiMiddleware[] = []) {\n\t\tthis.endpoint(path, HttpMethod.PATCH, swaggerDef, handler, middleware, documented, postMiddleware);\n\t}\n\n\t/**\n\t * Register PUT endpoint\n\t */\n\tpublic put(path: string, swaggerDef: Swagger.Operation, handler: ApiHandler, middleware: ApiMiddleware[] = [],\n\t\t\t   documented: boolean = true, postMiddleware: ApiMiddleware[] = []) {\n\t\tthis.endpoint(path, HttpMethod.PUT, swaggerDef, handler, middleware, documented, postMiddleware);\n\t}\n\n\t/**\n\t * Register a global middleware run before every endpoint\n\t */\n\tpublic addGlobalMiddleware(middleware: ApiMiddleware) {\n\t\tthis.Logger.debug(\"Adding global middleware:\", middleware.name);\n\t\tthis.globalMiddleware.push(middleware);\n\t}\n\n\t/**\n\t * Register a global post middleware run after every endpoint\n\t */\n\tpublic addGlobalPostMiddleware(middleware: ApiMiddleware) {\n\t\tthis.Logger.debug(\"Adding global post middleware:\", middleware.name);\n\t\tthis.globalPostMiddleware.push(middleware);\n\t}\n\n\t/**\n\t * Start server. Call once all endpoints are registered.\n\t */\n\tpublic start(options: any): any {\n\t\tif (this.registerGeneratedRoutes != null) {\n\t\t\tthis.registerGeneratedRoutes(this);\n\t\t}\n\t\tthis.metadata.swagger = this.apiDef;\n\t\tconst data = this.server.getExport(this.metadata, options);\n\t\tif (this.COMPILERMODE) {\n\t\t\tprocess.env[VALORYMETAVAR] = JSON.stringify(data);\n\t\t}\n\t\tif (!this.COMPILERMODE) {\n\t\t\tthis.Logger.info(\"Valory startup complete\");\n\t\t}\n\t\treturn data;\n\t}\n\n\t/**\n\t * Shuts down the server core\n\t */\n\tpublic shutdown() {\n\t\tthis.server.shutdown();\n\t}\n\n\tprivate endpointCompile(path: string, method: HttpMethod, swaggerDef: Swagger.Operation, handler: ApiHandler,\n\t\t\t\t\t\t\tstringMethod: string, middleware: ApiMiddleware[] = [], documented: boolean = true,\n\t\t\t\t\t\t\tpostMiddleware: ApiMiddleware[] = []) {\n\t\tif (!documented) {\n\t\t\tthis.metadata.undocumentedEndpoints.push(path);\n\t\t}\n\t\tconst middlewares: ApiMiddleware[] = this.globalMiddleware.concat(middleware,\n\t\t\tthis.globalPostMiddleware, postMiddleware);\n\t\tfor (const item of middlewares) {\n\t\t\tif (item.tag != null) {\n\t\t\t\tif (!(item.tag instanceof Array)) {\n\t\t\t\t\titem.tag = [item.tag];\n\t\t\t\t}\n\t\t\t\tfor (const def of (item.tag as Array<string | Swagger.Tag>)) {\n\t\t\t\t\tlet tag = \"\";\n\t\t\t\t\tif (typeof def === \"string\") {\n\t\t\t\t\t\ttag = def;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.apiDef.tags.push(def);\n\t\t\t\t\t\ttag = def.name;\n\t\t\t\t\t}\n\t\t\t\t\t(swaggerDef.tags == null) ? swaggerDef.tags = [tag] : swaggerDef.tags.push(tag);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tswaggerDef.tags = uniq(swaggerDef.tags);\n\t\tthis.apiDef.tags = uniq(this.apiDef.tags);\n\t\tset(this.apiDef.paths, `${path}.${stringMethod}`, swaggerDef);\n\t}\n\n\tprivate endpointRun(path: string, method: HttpMethod, swaggerDef: Swagger.Operation,\n\t\t\t\t\t\thandler: ApiHandler, stringMethod: string, middleware: ApiMiddleware[] = [],\n\t\t\t\t\t\tdocumented: boolean = true, postMiddleware: ApiMiddleware[] = []) {\n\t\tconst validator = this.validatorModule.getValidator(path, stringMethod);\n\t\tif (this.apiDef.basePath != null) {\n\t\t\tpath = this.apiDef.basePath + path;\n\t\t}\n\t\tif (validator == null) {\n\t\t\tthrow Error(\"Compiled swagger is out of date. Please run valory cli\");\n\t\t}\n\t\tconst route = `${path}:${stringMethod}`;\n\t\tconst childLogger = this.Logger.child({endpoint: route});\n\t\tconst middlewares: ApiMiddleware[] = this.globalMiddleware.concat(middleware);\n\t\tconst postMiddlewares = this.globalPostMiddleware.concat(postMiddleware);\n\t\tconst chindings: string = (childLogger as any).chindings;\n\t\tconst wrapper = async (req: ApiRequest): Promise<ApiResponse> => {\n\t\t\tconst requestId = uuid();\n\t\t\treq.putAttachment(Valory.RequestIDKey, requestId);\n\t\t\t(childLogger as any).chindings = `${chindings},\"requestId\":\"${requestId}\"`;\n\t\t\tchildLogger.debug(req, \"Received request\");\n\t\t\ttry {\n\t\t\t\tconst middlewareResp: void | ApiResponse = await processMiddleware(middlewares, req, childLogger);\n\t\t\t\tif (middlewareResp != null) {\n\t\t\t\t\treturn (middlewareResp as ApiResponse);\n\t\t\t\t}\n\t\t\t\tconst result = validator(req);\n\t\t\t\tlet response: ApiResponse;\n\t\t\t\tif (result !== true) {\n\t\t\t\t\tresponse = this.buildError(\"ValidationError\", result as string[]);\n\t\t\t\t} else {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tresponse = await handler(req, childLogger, {requestId});\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (error.name === \"ValoryEndpointError\") {\n\t\t\t\t\t\t\tresponse = this.buildError(error.valoryErrorCode, error.message || undefined);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tchildLogger.error(\"Internal exception occurred while processing request\");\n\t\t\t\t\t\t\tchildLogger.error(error);\n\t\t\t\t\t\t\tresponse = this.buildError(\"InternalError\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treq.putAttachment(Valory.ValidationResultKey, result);\n\t\t\t\treq.putAttachment(Valory.ResponseKey, response);\n\t\t\t\tconst postMiddlewareResp: void | ApiResponse = await processMiddleware(postMiddlewares, req, childLogger);\n\t\t\t\tif (postMiddlewareResp != null) {\n\t\t\t\t\treturn (postMiddlewareResp as ApiResponse);\n\t\t\t\t}\n\t\t\t\treturn response;\n\t\t\t} catch (error) {\n\t\t\t\tif (error.name === \"ValoryEndpointError\") {\n\t\t\t\t\treturn this.buildError(error.valoryErrorCode, error.message || undefined);\n\t\t\t\t}\n\t\t\t\tchildLogger.error(\"Internal exception occurred while processing request\");\n\t\t\t\tchildLogger.error(error);\n\t\t\t\treturn this.buildError(\"InternalError\");\n\t\t\t}\n\t\t};\n\t\tthis.server.register(path, method, wrapper);\n\t}\n\n\tprivate registerDocSite() {\n\t\tconst prefix = this.apiDef.basePath || \"\";\n\t\tlet redoc: string;\n\t\tconst swaggerBlob = this.validatorModule.swaggerBlob;\n\t\tthis.server.register(prefix + \"/swagger.json\", HttpMethod.GET, (req) => {\n\t\t\treturn {\n\t\t\t\tbody: swaggerBlob,\n\t\t\t\theaders: {\"Content-Type\": \"text/plain\"},\n\t\t\t\tquery: null,\n\t\t\t\tpath: null,\n\t\t\t\tstatusCode: 200,\n\t\t\t\tformData: null,\n\t\t\t};\n\t\t});\n\t\tthis.server.register((prefix !== \"\") ? prefix : \"/\", HttpMethod.GET, (req) => {\n\t\t\tif (!redoc) {\n\t\t\t\tredoc = readFileSync(pathMod.join(__dirname, REDOCPATH), {encoding: \"utf8\"});\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tbody: redoc,\n\t\t\t\theaders: {\"Content-Type\": \"text/html\"},\n\t\t\t\tquery: null,\n\t\t\t\tpath: null,\n\t\t\t\tstatusCode: 200,\n\t\t\t\tformData: null,\n\t\t\t};\n\t\t});\n\t}\n}\n\nfunction processMiddleware(middlewares: ApiMiddleware[],\n\t\t\t\t\t\t   req: ApiRequest, logger: Logger): Promise<void | ApiResponse> {\n\treturn new Promise<void | ApiResponse>((resolve) => {\n\t\tlet err: ApiExchange = null;\n\t\tsteed.eachSeries(middlewares, (handler: ApiMiddleware, done) => {\n\t\t\tconst childLog = logger.child({middleware: handler.name});\n\t\t\tchildLog.debug(\"Running Middleware\");\n\t\t\thandler.handler(req, childLog, (error) => {\n\t\t\t\tif (error != null) {\n\t\t\t\t\terr = error;\n\t\t\t\t\tdone(error);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tdone();\n\t\t\t});\n\t\t}, (error) => {\n\t\t\tresolve(err as ApiResponse);\n\t\t});\n\t});\n}\n\nfunction generateErrorTable(errors: { [x: string]: ErrorDef }): Swagger.Tag {\n\tconst tagDef: Swagger.Tag = {name: \"Errors\", description: \"\", externalDocs: null};\n\tlet table = ERRORTABLEHEADER;\n\tconst keys = Object.keys(errors);\n\tkeys.sort((a, b) => {\n\t\tconst aCode = errors[a].errorCode;\n\t\tconst bCode = errors[b].errorCode;\n\n\t\tif (aCode < bCode) {\n\t\t\treturn -1;\n\t\t}\n\t\tif (aCode === bCode) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (aCode > bCode) {\n\t\t\treturn 1;\n\t\t}\n\t});\n\tfor (const name of keys) {\n\t\tconst error = errors[name];\n\t\ttable += \"|\" + error.errorCode + \"|\" + name + \"|\" + error.defaultMessage + \"|\\n\";\n\t}\n\ttagDef.description = table;\n\treturn omitBy(tagDef, isNil) as Swagger.Tag;\n}\n","interface ApiError extends Error {\n\tvaloryErrorCode: string;\n\tname: \"ValoryEndpointError\";\n}\n\nconst ApiErrorBuilder = (errorCode: string, message?: string): ApiError => {\n\treturn {\n\t\tvaloryErrorCode: errorCode,\n\t\tmessage,\n\t\tname: \"ValoryEndpointError\",\n\t};\n};\n\nexport const ApiError = ApiErrorBuilder;\n","import {ApiMiddleware} from \"./valoryheaders\";\nimport {Controller} from \"./controller\";\nimport {Swagger} from \"./swagger\";\n\n// export function Example<T>(exampleModel: T): any {\n// \treturn () => {\n// \t\treturn;\n// \t};\n// }\n\n/**\n * Register GET endpoint\n * @param {string} name local route for endpoint\n */\nexport function Get(name?: string): any {\n\treturn () => {\n\t\treturn;\n\t};\n}\n\n/**\n * Register POST endpoint\n * @param {string} name local route for endpoint\n */\nexport function Post(name?: string): any {\n\treturn () => {\n\t\treturn;\n\t};\n}\n\n/**\n * Register PUT endpoint\n * @param {string} name local route for endpoint\n * @constructor\n */\nexport function Put(name?: string): any {\n\treturn () => {\n\t\treturn;\n\t};\n}\n\n/**\n * Register PATCH endpoint\n * @param {string} name local route for endpoint\n */\nexport function Patch(name?: string): any {\n\treturn () => {\n\t\treturn;\n\t};\n}\n\n/**\n * Register DELETE endpoint\n * @param {string} name local route for endpoint\n */\nexport function Delete(name?: string): any {\n\treturn () => {\n\t\treturn;\n\t};\n}\n\n/**\n * Add a middleware to a controller or route\n * @param {ApiMiddleware} middleware\n */\nexport function Middleware(middleware: ApiMiddleware): any {\n\treturn (target: any, propertyKey?: string) => {\n\t\tif (propertyKey != null) {\n\t\t\ttarget = target[propertyKey];\n\t\t} else {\n\t\t\ttarget = target.prototype;\n\t\t}\n\t\tif (target.middleware == null) {\n\t\t\ttarget.middleware = [];\n\t\t}\n\t\ttarget.middleware.push(middleware);\n\t};\n}\n\n/**\n * Add a post middleware to a controller or route\n * @param {ApiMiddleware} middleware\n */\nexport function PostMiddleware(middleware: ApiMiddleware): any {\n\treturn (target: any, propertyKey?: string) => {\n\t\tif (propertyKey != null) {\n\t\t\ttarget = target[propertyKey];\n\t\t} else {\n\t\t\ttarget = target.prototype;\n\t\t}\n\t\tif (target.postMiddleware == null) {\n\t\t\ttarget.postMiddleware = [];\n\t\t}\n\t\ttarget.postMiddleware.push(middleware);\n\t};\n}\n\n/**\n * Inject http Body\n *  @param {string} [name] properties name in body object\n */\nexport function Body(): any {\n\treturn () => {\n\t\treturn;\n\t};\n}\n\n/**\n * Inject value from body\n *\n * @param {string} [name] The name of the body parameter\n */\nexport function BodyProp(name?: string): any {\n\treturn () => {\n\t\treturn;\n\t};\n}\n\n/**\n * Inject http request\n */\nexport function Request(): any {\n\treturn () => {\n\t\treturn;\n\t};\n}\n\n/**\n * Inject value from Path\n *\n * @param {string} [name] The name of the path parameter\n */\nexport function Path(name?: string): any {\n\treturn () => {\n\t\treturn;\n\t};\n}\n\n/**\n * Inject value from query string\n *\n * @param {string} [name] The name of the query parameter\n */\nexport function Query(name?: string): any {\n\treturn () => {\n\t\treturn;\n\t};\n}\n\n/**\n * Inject value from Http header\n *\n * @param {string} [name] The name of the header parameter\n */\nexport function Header(name?: string): any {\n\treturn () => {\n\t\treturn;\n\t};\n}\n\n// export function ReferenceParameters(parameters: Swagger.RefParameter[]): any {\n// \treturn () => { return; };\n// }\n\n/**\n * Inject request logger instance\n */\nexport function Logger(): any {\n\treturn () => {\n\t\treturn;\n\t};\n}\n\nexport function SuccessResponse(name: string | number, description?: string): any {\n\treturn () => {\n\t\treturn;\n\t};\n}\n\nexport function Response<T>(name: string | number, description?: string, example?: T): any {\n\treturn () => {\n\t\treturn;\n\t};\n}\n\nexport function Route(name?: string): any {\n\t// console.log(\"route tag factory\");\n\treturn (target: Controller) => {\n\t\t// console.log(\"route tag evaluated\");\n\t\t// console.log(target);\n\t\t// (target as any).prototype.middleware = [];\n\t\t// (target as any).prototype.postMiddleware = [];\n\t\treturn;\n\t};\n}\n\n/**\n * can be used to entirely hide an method from documentation\n */\nexport function Hidden(): any {\n\treturn () => {\n\t\treturn;\n\t};\n}\n\nexport function Tags(...values: string[]): any {\n\treturn () => {\n\t\treturn;\n\t};\n}\n","export {\n\tController,\n} from \"./server/controller\";\nexport {\n\tDefaultAdaptor,\n} from \"./lib/defaultAdaptor\";\nexport {\n\tValory,\n\tValoryOptions,\n\t} from \"./server/valory\";\nexport {\n\tApiRequest,\n\tAttachmentKey,\n\tApiRequestOptions,\n} from \"./server/request\";\nexport {\n\tSwagger,\n} from \"./server/swagger\";\nexport {\n\tApiError,\n} from \"./server/apiError\";\nexport {\n\tLogger,\n\tPostMiddleware,\n\tMiddleware,\n\tBody,\n\tBodyProp,\n\tDelete,\n\t// Example,\n\tGet,\n\tHeader,\n\tHidden,\n\tPatch,\n\tPath,\n\tPost,\n\tPut,\n\tQuery,\n\tRequest,\n\tResponse,\n\tRoute,\n\tSuccessResponse,\n\tTags,\n} from \"./server/decorators\";\nexport {\n\tHttpMethod,\n\tApiResponse,\n\tValoryMetadata,\n\tRequestContext,\n\tErrorFormatter,\n\tApiServer,\n\tApiMiddlewareHandler,\n\tApiHandler,\n\tApiExchange,\n\tErrorDef,\n\tApiMiddleware,\n\tVALORYLOGGERVAR,\n\tVALORYMETAVAR,\n\tVALORYPRETTYLOGGERVAR,\n} from \"./server/valoryheaders\";\n"]}