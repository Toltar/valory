{"version":3,"sources":["lib/helpers.ts","0","lib/config.ts","server/controller.ts","lib/defaultAdaptor.ts","compiler/compilerheaders.ts","compiler/loader.ts","server/request.ts","server/valoryheaders.ts","server/valory.ts","server/apiError.ts","server/decorators.ts","main.ts","compiler/preprocessor.ts","compiler/method.ts","compiler/compiler.ts","compiler/compileRunner.ts","tsoa/utils/jsDocUtils.ts","tsoa/metadataGeneration/exceptions.ts","tsoa/utils/validatorUtils.ts","tsoa/metadataGeneration/resolveType.ts","tsoa/utils/decoratorUtils.ts","tsoa/metadataGeneration/parameterGenerator.ts","tsoa/metadataGeneration/methodGenerator.ts","tsoa/metadataGeneration/controllerGenerator.ts","tsoa/metadataGeneration/metadataGenerator.ts","tsoa/utils/pathUtils.ts","tsoa/specGenerator.ts","tsoa/tsoaRunner.ts","lib/cli.ts"],"names":["module","exports","name","version","description","typings","main","scripts","pretest","test","build","release","commitmsg","lint","docgen","engines","node","author","license","files","devDependencies","@commitlint/cli","@commitlint/config-conventional","@types/bluebird-global","@types/chai","@types/inquirer","@types/lodash","@types/minimatch","@types/mocha","@types/node","@types/pino","@types/request","@types/request-promise","@types/semver","@types/steed","@types/swagger-parser","@types/yargs","babel-core","babel-plugin-loop-optimizer","babel-plugin-transform-async-to-bluebird","chai","cz-conventional-changelog","fast-async","husky","mocha","mocha-typescript","request","request-promise","semantic-release","typedoc","dependencies","ajv","bluebird","chalk","dot","fast.js","fastify","google-closure-compiler","hyperid","inquirer","js-beautify","json-schema-merge-allof","lodash","lodash-deep","map-keys-deep-lodash","minimatch","moment","pino","semver","steed","swagger-parser","thread-spin","tmp","ts-node","tstl","typescript","xxhashjs","yargs","bin","valory","repositoryUrl","branch","verifyConditions","publish","success","fail","config","commitizen","path","publishConfig","registry"],"mappings":"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B,EAAK,GAEd,EHzBgrB,CAAEC,GGyBlrB,EAAe,IAAI,EAAA,OHzBkrB,IGyBvqB,CAC1B,IH1B2sBC,IG0B3sB,EAAI,IAAI,QACX,KAAA,KACG,MH5B8uB,EG4B9uB,KACC,EH7BuvBC,OG6BvvB,EAAI,KACP,MAAA,EAAI,GH9BgxB,GG+BrxB,KAAA,CH/B+xBC,CG+B3xB,OACV,MHhCozB,AGgCpzB,IAEuC,KHlCuxBC,gBGkC3zB,EHlC80B,AGkC10B,IAAI,MHlCi1BC,EGkCz0B,cHlC01B,GGkCpyB,MAAZ,EAAI,CHlCyzBC,KGmC72B,EAAA,KAAO,EAAI,KHnCs3B,AGmCj3B,OAChB,EHpC24BC,AGoC34B,QAAU,EAAI,KHpC64B,AGoCx4B,KAEnB,EAAA,EHtCq6BC,GGsC95B,EAAI,KAEnB,IHxC47B,EGwC57B,QHxCu8BC,AGwCt7B,EAAA,EAAA,SAAA,CHxCq8B,CGwC77B,IAC3B,EAAA,EHzCk+BC,GGyC79B,EAAS,YHzCs+B,AG0C3+B,EAAA,QH1Cs/BC,AG0C9+B,EAAS,SAC1B,EAAA,KAAK,EAAS,KH3C2gC,GGuB9hC,OHvByiCC,EGuBziC,EAAA,GAAA,OAAA,EHvB0jC,AGuB1jC,MAAA,GHvBokCC,EGuBpkC,aHvBolC,EGgDrkC,OHhD+kCC,GGgD/kC,EAA0B,GAEnC,OADF,KAAA,IHjDmnC,KGiD1mC,IHjDonCC,GGiD7mC,EAAQ,MAAQ,IHjD6mC,IGiDrmC,IAAI,EHjD4mCC,GGiDtmC,EAAQ,MAAQ,EHjDomC,MGiD5lC,IHjDumCC,AGiDnmC,MAC5E,CAAC,OAAQ,GAGF,WACT,EHtDgtC,GGsDhtC,MHtD0tCC,GGsDjtC,OAAO,SAIvB,SAAA,EAAoB,EAAsB,EAAc,GACnD,IAAA,EH3DwwC,AG2DjwC,KACP,IH5DkxCC,AG6D9wC,EAAA,GH7DoxC,EG6D/wC,MAAM,CH7DmxCC,EG8DpyC,MAAO,GAED,OADH,EAAA,QH/D8zC,GG+DjzC,IACV,EHhEq0CC,AGgEh0C,OAAK,GAEb,EAAA,CHlEs1C,IGkEh1C,CAAC,IHlEy1CC,GGkEj1C,EAAM,CHlEk1C,GGkE70C,IAGh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","file":"cli.map","sourceRoot":"../src","sourcesContent":["import {ThreadSpinner} from \"thread-spin\";\nimport chalk from \"chalk\";\nimport {Config} from \"./config\";\n\nconst MS_PER_SEC = 1000;\nconst NS_PER_MS = 1e6;\n\nexport function fastConcat<T>(...arrays: T[][]): T[] {\n\tconst length = arguments.length;\n\tconst arr = [];\n\tlet i;\n\tlet item;\n\tlet childLength;\n\tlet j;\n\n\tfor (i = 0; i < length; i++) {\n\t\titem = arguments[i];\n\t\tif (Array.isArray(item)) {\n\t\t\tchildLength = item.length;\n\t\t\tfor (j = 0; j < childLength; j++) {\n\t\t\t\tarr.push(item[j]);\n\t\t\t}\n\t\t} else {\n\t\t\tarr.push(item);\n\t\t}\n\t}\n\treturn arr;\n}\n\nexport function fastForEach<T>(subject: T[], fn: (item: T, index: number, subject: T[]) => void, thisContext: any) {\n\tconst length = subject.length;\n\tconst iterator = thisContext !== undefined ? bindInternal3(fn, thisContext) : fn;\n\tlet i;\n\tfor (i = 0; i < length; i++) {\n\t\titerator(subject[i], i, subject);\n\t}\n}\n\nexport function bindInternal3<A, B, C>(func: (a: A, b: B, c: C) => any, thisContext: any) {\n\treturn (a: A, b: B, c: C) => {\n\t\treturn func.call(thisContext, a, b, c);\n\t};\n}\n\nexport function convertTime(time: [number, number]): number {\n\treturn time[0] * MS_PER_SEC + time[1] / NS_PER_MS;\n}\n\nexport async function spinnerFail(message: string, e: any) {\n\tawait Config.Spinner.fail(chalk.red.bold(message + \"\\n\"));\n\tThreadSpinner.shutdown();\n\tconsole.error(e);\n\tprocess.exit(1);\n}\n",null,"import * as path from \"path\";\nimport {readFileSync} from \"fs\";\nimport {ThreadSpinner} from \"thread-spin\";\nimport {IPackageJSON} from \"./package\";\nimport {gt, coerce} from \"semver\";\nimport {execSync, spawnSync} from \"child_process\";\nimport chalk from \"chalk\";\nimport {spinnerFail} from \"./helpers\";\n\nexport const CLI_MODE_FLAG = \"VALORY_CLI\";\nexport const VALORY_ROOT = \"VALORY_ROOT\";\n\nexport interface ValoryConfig {\n\tentrypoint: string;\n\tsourceEntrypoint?: string;\n\tbasePath?: string;\n\tsingleError?: boolean;\n}\n\nexport namespace Config {\n\texport const CONFIG_FILE = \"valory.json\";\n\texport const SWAGGER_FILE = \"swagger.json\";\n\texport const COMPILED_SWAGGER_FILE = \".compswag.js\";\n\texport const GENERATED_ROUTES_FILE = \"generatedRoutes.ts\";\n\texport const COMPILED_ROUTES_FILE = \"generatedRoutes.js\";\n\texport let RootPath = \"\";\n\texport let CompilerMode = false;\n\texport let Spinner: ThreadSpinner;\n\texport let Loaded = false;\n\texport let ConfigPath = \"\";\n\texport let SwaggerPath = \"\";\n\texport let CompSwagPath = \"\";\n\texport let ConfigData: ValoryConfig;\n\texport let PackageJSON: IPackageJSON = null;\n\texport let ValoryVersion = \"\";\n\texport let GeneratedRoutePath = \"\";\n\texport let SourceRoutePath = \"\";\n\texport let PackageJSONPath = \"\";\n\n\texport function load(loadConfig: boolean = true, root?: string) {\n\t\tif (Loaded) {\n\t\t\treturn;\n\t\t}\n\t\tCompilerMode = process.env.VALORYCOMPILER === \"TRUE\";\n\t\tLoaded = true;\n\t\tconst rootVar = process.env[VALORY_ROOT];\n\t\troot = (rootVar != null) ? rootVar : root || resolveRootPath();\n\t\tRootPath = root;\n\t\tprocess.env[VALORY_ROOT] = RootPath;\n\t\tConfigPath = `${RootPath}/${CONFIG_FILE}`;\n\t\tSwaggerPath = `${RootPath}/${SWAGGER_FILE}`;\n\t\tCompSwagPath = `${RootPath}/${COMPILED_SWAGGER_FILE}`;\n\t\tPackageJSONPath = `${RootPath}/package.json`;\n\t\tif (CompilerMode) {\n\t\t\tSpinner = new ThreadSpinner(undefined, process.env.NODE_ENV === \"test\");\n\t\t\tValoryVersion = require(\"../../package.json\").version;\n\t\t\tPackageJSON = require(PackageJSONPath);\n\t\t}\n\t\tif (loadConfig) {\n\t\t\ttry {\n\t\t\t\tConfigData = JSON.parse(readFileSync(ConfigPath, {encoding: \"utf8\"}));\n\t\t\t} catch (err) {\n\t\t\t\t// return;\n\t\t\t\tthrow Error(\"Valory config is missing from: \" + ConfigPath);\n\t\t\t}\n\t\t\tConfigData.entrypoint = path.resolve(path.join(RootPath), ConfigData.entrypoint);\n\t\t\tGeneratedRoutePath = `${path.resolve(path.dirname(ConfigData.entrypoint))}/${COMPILED_ROUTES_FILE}`;\n\t\t\tif (ConfigData.sourceEntrypoint) {\n\t\t\t\tConfigData.sourceEntrypoint = path.resolve(path.join(RootPath), ConfigData.sourceEntrypoint);\n\t\t\t\tSourceRoutePath = `${path.resolve(path.dirname(ConfigData.sourceEntrypoint))}/${GENERATED_ROUTES_FILE}`;\n\t\t\t}\n\t\t}\n\t\t// console.log(Config);\n\t}\n\n\texport async function checkRequirements() {\n\t\tconst versionRegex = /version \\\"([A-Za-z0-9\\_\\.]*?)\\\"/g;\n\t\tconsole.log(chalk.bold(\"Requirements\"));\n\t\tawait Spinner.start(\"Node 8+\");\n\t\tif (!gt(coerce(process.version), \"8.0.0\")) {\n\t\t\tawait spinnerFail(\"Node version too low\", null);\n\t\t}\n\t\tawait Spinner.succeed(chalk.green(`Node ${process.version}`));\n\t\tawait Spinner.start(\"Java 1.7+\");\n\t\ttry {\n\t\t\tconst javaOutput = spawnSync(\"java\", [\"-version\"]).stderr;\n\t\t\t// console.log(javaOutput);\n\t\t\t// console.log( versionRegex.exec(javaOutput.toString()));\n\t\t\tconst javaVersion = versionRegex.exec(javaOutput.toString())[1];\n\t\t\tif (!gt(coerce(javaVersion), coerce(\"1.7\"))) {\n\t\t\t\tawait spinnerFail(\"Java version too low\", null);\n\t\t\t}\n\t\t\tawait Spinner.succeed(chalk.green(`Java ${javaVersion}`));\n\t\t} catch (e) {\n\t\t\tawait spinnerFail(\"Java installation missing or broken\", e);\n\t\t}\n\t\tconsole.log(\"\");\n\t}\n\n\tfunction resolveRootPath(): string {\n\t\treturn __dirname.split(\"node_modules\")[0];\n\t}\n}\n","import {Logger} from \"pino\";\nimport {Valory} from \"../main\";\n\nexport class Controller {\n\tpublic logger: Logger;\n\tprivate statusCode: number = 200;\n\tprivate headers = {} as { [name: string]: string | undefined };\n\n\tpublic setStatus(statusCode: number) {\n\t\tthis.statusCode = statusCode;\n\t}\n\n\tpublic getStatus() {\n\t\treturn this.statusCode;\n\t}\n\n\tpublic setHeader(name: string, value?: string) {\n\t\tthis.headers[name] = value;\n\t}\n\n\tpublic getHeader(name: string) {\n\t\treturn this.headers[name];\n\t}\n\n\tpublic getHeaders() {\n\t\treturn this.headers;\n\t}\n\n\tpublic clearStatus() {\n\t\tthis.statusCode = 200;\n\t}\n\n\tpublic clearHeaders() {\n\t\tthis.headers = {};\n\t}\n\n\tpublic buildError(error: string, message?: string) {\n\t\tconst obj = Valory.getInstance().buildError(error, message);\n\t\tthis.setStatus(obj.statusCode);\n\t\treturn obj.body;\n\t}\n}\n","import {ApiExchange, ApiResponse, ApiServer, HttpMethod, ValoryMetadata, ApiRequest} from \"../main\";\nimport {FastifyInstance, HTTPMethod } from \"fastify\";\nimport {IncomingMessage, ServerResponse, Server} from \"http\";\nimport fastify = require(\"fastify\");\nimport {parse} from \"querystring\";\nconst intern = require(\"fast.js/string/intern\");\nconst pathReplacer = /{([\\S]*?)}/g;\n\nexport class DefaultAdaptor implements ApiServer {\n\tpublic readonly locallyRunnable: boolean = true;\n\tpublic readonly allowDocSite: boolean = true;\n\tprivate instance: FastifyInstance<Server, IncomingMessage, ServerResponse> = fastify({});\n\tconstructor() {\n\t\tthis.instance.addContentTypeParser(\"application/x-www-form-urlencoded\", {parseAs: \"string\"}, formParser as any);\n\t\tthis.instance.addContentTypeParser(\"application/json\", {parseAs: \"string\"}, jsonParser as any);\n\t}\n\tpublic register(path: string, method: HttpMethod,\n\t\t\t\t\thandler: (request: ApiRequest) => ApiResponse | Promise<ApiResponse>) {\n\t\tconst route = `${path}:${HttpMethod[method]}`;\n\t\tpath = intern(path.replace(pathReplacer, \":$1\"));\n\t\tthis.instance.route({\n\t\t\tmethod: HttpMethod[method] as HTTPMethod,\n\t\t\turl: path,\n\t\t\thandler: async (req, res) => {\n\t\t\t\t// FIXME: setting both formData and body is lazy, need a better solution\n\t\t\t\tconst transRequest = new ApiRequest({\n\t\t\t\t\theaders: req.req.headers as {[key: string]: any},\n\t\t\t\t\tbody: null,\n\t\t\t\t\trawBody: null,\n\t\t\t\t\tformData: req.body,\n\t\t\t\t\tquery: req.query,\n\t\t\t\t\tpath: req.params,\n\t\t\t\t\troute,\n\t\t\t\t});\n\t\t\t\tif (req.req.headers[\"content-type\"] === \"application/json\" && req.body != null) {\n\t\t\t\t\ttransRequest.body = req.body.parsed;\n\t\t\t\t\ttransRequest.rawBody = req.body.raw;\n\t\t\t\t} else {\n\t\t\t\t\ttransRequest.body = req.body;\n\t\t\t\t}\n\t\t\t\tconst response = await handler(transRequest);\n\t\t\t\tres.code(response.statusCode);\n\t\t\t\t(res as any).headers(response.headers);\n\t\t\t\tres.send(response.body);\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic getExport(metadata: ValoryMetadata, options: any): {valory: ValoryMetadata} {\n\t\tthis.instance.listen(options.port || process.env.PORT, options.host || process.env.HOST);\n\t\treturn {valory: metadata};\n\t}\n\n\tpublic shutdown() {\n\t\tthis.instance.server.close();\n\t}\n}\n\nfunction jsonParser(req: IncomingMessage, body: string, done: (err?: Error, body?: any) => void) {\n\tlet json = null;\n\ttry {\n\t\tjson = JSON.parse(body);\n\t} catch (err) {\n\t\terr.statusCode = 400;\n\t\treturn done(err, undefined);\n\t}\n\tdone(null, {parsed: json, raw: body});\n}\n\nfunction formParser(req: IncomingMessage, body: string, done: (err?: Error, body?: any) => void) {\n\tdone(null, parse(body));\n}\n","import {Swagger} from \"../server/swagger\";\n\nexport const HASH_SEED = 3141997;\n\nexport interface ExtendedSchema extends Swagger.Schema {\n\tconst?: any;\n\toneOf?: ExtendedSchema[];\n\tanyOf?: ExtendedSchema[];\n}\n\nexport interface RequestFieldMap {\n\theader: string;\n\tbody: string;\n\tformData: string;\n\tquery: string;\n\tpath: string;\n\n\t[key: string]: string;\n}\n\nexport interface ValidatorModule {\n\tdefHash: string;\n\tglobalConsume: string[];\n\tswaggerBlob: string;\n\tgetValidator: (path: string, method: string) => (data: any) => string | string[] | boolean;\n}\n\nexport type ValidatorModuleContent = string;\n\nexport interface MangledKey {\n\toriginal: string;\n\tmangled: string;\n}\n\nexport interface DiscriminatorMap {\n\t[propName: string]: {\n\t\tparent: string;\n\t\tchildren: string[];\n\t};\n}\n\nexport interface CompilerOutput {\n\tmodule: ValidatorModuleContent;\n\tdebugArtifacts?: {\n\t\thashes: string[];\n\t\tpreSwagger: { swagger: Swagger.Spec, discriminators: DiscriminatorMap };\n\t\tderefSwagger: Swagger.Spec;\n\t\tinitialSchema: ExtendedSchema[];\n\t\tprocessedSchema: ExtendedSchema[];\n\t\tinitialCompiles: any[];\n\t\tmangledSchema: Array<{ schema: ExtendedSchema, mangledKeys: MangledKey[] }>;\n\t\tintermediateFunctions: string[];\n\t\tintermediateModule: ValidatorModuleContent;\n\t\tpostCompileModule: ValidatorModuleContent;\n\t\tclosureOutput: { stdout: string, stderr: string, exitCode: number };\n\t};\n}\n\nexport enum CompilationLevel {\n\t\"ADVANCED\",\n\t\"WHITESPACE_ONLY\",\n\t\"SIMPLE\",\n}\n\nexport interface ICompilerOptions {\n\tdebug?: boolean;\n\trequestFieldMapping?: RequestFieldMap;\n\tcompilationLevel?: CompilationLevel;\n\tsingleError?: boolean;\n\tdiscrimFastFail?: boolean;\n}\n\nexport const FUNCTION_PREFIX = \"f\";\n","import {Swagger} from \"../server/swagger\";\nimport {HASH_SEED, ValidatorModule} from \"./compilerheaders\";\nimport {Config} from \"../lib/config\";\n\nconst XXH = require(\"xxhashjs\");\n\nexport function loadModule(definitions: {[x: string]: Swagger.Schema}): ValidatorModule {\n\tconst module: ValidatorModule = require(Config.CompSwagPath);\n\tif (XXH.h32(JSON.stringify(definitions), HASH_SEED).toString() !== module.defHash) {\n\t\tthrow Error(\"Compiled swagger is out of date. Please run valory CLI.\");\n\t}\n\treturn module;\n}\n","import {ApiExchange} from \"./valoryheaders\";\nconst uuid = require(\"hyperid\")();\n\nexport interface AttachmentKey<T> {\n\treadonly id: string;\n\t/** @hidden */ readonly marker: T;\n}\n\nexport interface ApiRequestOptions {\n    headers: { [key: string]: any; };\n    body: any;\n    rawBody: any;\n    formData: { [key: string]: any; };\n    query: { [key: string]: any; };\n    path: { [key: string]: any; };\n    route: string;\n}\n\nexport class ApiRequest implements ApiExchange {\n\tpublic static createKey<T>(): AttachmentKey<T> {\n\t\treturn {\n\t\t\tid: uuid(),\n\t\t\tmarker: 0 as any,\n\t\t};\n\t}\n    public headers: { [key: string]: any; };\n    public body: any;\n    public rawBody: any;\n    public formData: { [key: string]: any; };\n    public query: { [key: string]: any; };\n    public path: { [key: string]: any; };\n    public route: string;\n\tprivate attachments: {[key: string]: any} = {};\n    // public attachments: AttachmentDict;\n\n    constructor(options: ApiRequestOptions) {\n        this.headers = options.headers;\n        this.body = options.body;\n        this.rawBody = options.rawBody;\n        this.formData = options.formData;\n        this.query = options.query;\n        this.route = options.route;\n        this.path = options.path;\n    }\n\n\tpublic putAttachment<T>(key: AttachmentKey<T>, value: T): void {\n\t\tif (this.attachments[key.id] != null) {\n\t\t\tthrow Error(\"Refusing to clobber existing attachment\");\n\t\t}\n\t\tthis.attachments[key.id] = value;\n\t}\n\n\tpublic getAttachment<T>(key: AttachmentKey<T>): T | null {\n\t\treturn this.attachments[key.id] as (T | null);\n\t}\n}\n","import {ApiRequest} from \"./request\";\nimport {Swagger} from \"./swagger\";\nimport {Logger} from \"pino\";\n\n/** @hidden */ export const VALORYLOGGERVAR = \"LOGLEVEL\";\n/** @hidden */ export const VALORYPRETTYLOGGERVAR = \"PRETTYLOG\";\n/** @hidden */ export const VALORYMETAVAR = \"VALORY_METATDATA\";\nexport type ErrorFormatter = (error: ErrorDef, message?: string | string[]) => ApiResponse;\n\nexport interface ApiExchange {\n\theaders: { [key: string]: any };\n\tbody: any;\n}\n\nexport interface ApiResponse extends ApiExchange {\n\tstatusCode: number;\n}\n\nexport type ApiMiddlewareHandler = (req: ApiRequest, logger: Logger,\n\t\t\t\t\t\t\t\t\tdone: (error?: ApiResponse) => void) => void;\n\nexport interface ApiMiddleware {\n\ttag?: Array<Swagger.Tag | string> | Swagger.Tag | string;\n\tname: string;\n\thandler: ApiMiddlewareHandler;\n}\n\nexport interface ErrorDef {\n\tstatusCode: number;\n\terrorCode: number;\n\tdefaultMessage: string;\n}\n\nexport interface RequestContext {\n\trequestId: string;\n}\n\nexport type ApiHandler = (request: ApiRequest, logger: Logger, requestContext: RequestContext)\n\t=> Promise<ApiResponse> | ApiResponse;\n\nexport enum HttpMethod {\n\tPOST,\n\tPUT,\n\tGET,\n\tDELETE,\n\tHEAD,\n\tPATCH,\n}\n\nexport interface ApiServer {\n\tlocallyRunnable: boolean;\n\tregister: (path: string, method: HttpMethod, handler: (request: ApiRequest) =>\n\t\tApiResponse | Promise<ApiResponse>) => void;\n\tallowDocSite: boolean;\n\tgetExport: (metadata: ValoryMetadata, options: any) => { valory: ValoryMetadata };\n\tshutdown: () => void;\n}\n\nexport interface ValoryMetadata {\n\tundocumentedEndpoints: string[];\n\tvaloryPath: string;\n\tcompiledSwaggerPath: string;\n\tswagger: Swagger.Spec;\n}\n","global.Promise = require(\"bluebird\");\nimport {ValidatorModule} from \"../compiler/compilerheaders\";\nimport {Swagger} from \"./swagger\";\nimport {forIn, isNil, omitBy, set, uniq} from \"lodash\";\nimport {loadModule} from \"../compiler/loader\";\nimport {readFileSync} from \"fs\";\nimport {Steed} from \"steed\";\nimport {Logger} from \"pino\";\nimport {ApiRequest, AttachmentKey} from \"./request\";\nimport {Config} from \"../lib/config\";\nimport {DefaultAdaptor} from \"../lib/defaultAdaptor\";\nimport {\n\tApiExchange,\n\tApiHandler,\n\tApiMiddleware,\n\tApiResponse,\n\tApiServer,\n\tErrorDef,\n\tErrorFormatter,\n\tHttpMethod,\n\tVALORYLOGGERVAR,\n\tValoryMetadata,\n\tVALORYMETAVAR,\n\tVALORYPRETTYLOGGERVAR,\n} from \"./valoryheaders\";\n\nimport P = require(\"pino\");\nimport pathMod = require(\"path\");\n\nconst steed: Steed = require(\"steed\")();\nconst uuid = require(\"hyperid\")();\n\nconst ERRORTABLEHEADER = \"|Status Code|Name|Description|\\n|-|-|--|\\n\";\nconst REDOCPATH = \"../../html/index.html\";\n\nconst DefaultErrorFormatter: ErrorFormatter = (error, message): ApiResponse => {\n\treturn {\n\t\tstatusCode: error.statusCode,\n\t\tbody: {\n\t\t\tcode: error.errorCode,\n\t\t\tmessage: (message != null) ? message : error.defaultMessage,\n\t\t},\n\t\theaders: {\"Content-Type\": \"application/json\"},\n\t};\n};\n\nexport interface ValoryOptions {\n\tinfo: Swagger.Info;\n\tserver: ApiServer;\n\terrors?: { [x: string]: ErrorDef };\n\tconsumes?: string[];\n\tproduces?: string[];\n\tparameters?: { [name: string]: Swagger.Parameter };\n\tresponses?: { [name: string]: Swagger.Response };\n\tdefinitions?: { [x: string]: Swagger.Schema };\n\ttags?: Swagger.Tag[];\n\tbasePath?: string;\n}\n\nconst DefaultErrors: { [x: string]: ErrorDef } = {\n\tValidationError: {\n\t\tstatusCode: 200,\n\t\terrorCode: 1001,\n\t\tdefaultMessage: \"Invalid Parameters\",\n\t},\n\tTokenMalformed: {\n\t\tstatusCode: 200,\n\t\terrorCode: 1002,\n\t\tdefaultMessage: \"Authorization Failure\",\n\t},\n\tInternalError: {\n\t\tstatusCode: 200,\n\t\terrorCode: 1003,\n\t\tdefaultMessage: \"An internal error occured\",\n\t},\n};\n\nexport class Valory {\n\tpublic static ValidationResultKey: AttachmentKey<true | string[] | string>\n\t\t= ApiRequest.createKey<true | string[] | string>();\n\tpublic static RequestIDKey: AttachmentKey<string> = ApiRequest.createKey<string>();\n\tpublic static ResponseKey: AttachmentKey<ApiResponse> = ApiRequest.createKey<ApiResponse>();\n\n\t/**\n\t * Create the Valory instance\n\t */\n\tpublic static createInstance(options: ValoryOptions): Valory {\n\t\tValory.directInstantiation = false;\n\t\treturn new Valory(options.info, options.errors || {}, options.consumes, options.produces, options.definitions || {},\n\t\t\toptions.tags || [], options.server, options.basePath, options.parameters, options.responses);\n\t}\n\n\t/**\n\t * Get the valory instance\n\t */\n\tpublic static getInstance(): Valory {\n\t\tif (Valory.instance == null) {\n\t\t\tthrow Error(\"Valory instance has not yet been created\");\n\t\t}\n\t\treturn Valory.instance;\n\t}\n\n\tprivate static instance: Valory;\n\tprivate static directInstantiation = true;\n\tpublic Logger = P({\n\t\tlevel: process.env[VALORYLOGGERVAR] || \"info\",\n\t\tprettyPrint: process.env[VALORYPRETTYLOGGERVAR] === \"true\",\n\t});\n\tprivate COMPILERMODE = process.env.VALORYCOMPILER === \"TRUE\";\n\tprivate TESTMODE: boolean = (process.env.TEST_MODE === \"TRUE\");\n\tprivate errorFormatter: ErrorFormatter = DefaultErrorFormatter;\n\tprivate globalMiddleware: ApiMiddleware[] = [];\n\tprivate globalPostMiddleware: ApiMiddleware[] = [];\n\tprivate apiDef: Swagger.Spec;\n\tprivate validatorModule: ValidatorModule;\n\tprivate errors = DefaultErrors;\n\tprivate registerGeneratedRoutes: (app: Valory) => void;\n\tprivate metadata: ValoryMetadata = {\n\t\tundocumentedEndpoints: [],\n\t\tvaloryPath: __dirname,\n\t\tcompiledSwaggerPath: Config.CompSwagPath,\n\t\tswagger: null,\n\t};\n\n\t/**\n\t * @deprecated use [[Valory.createInstance]] instead\n\t */\n\tconstructor(info: Swagger.Info, errors: { [x: string]: ErrorDef }, consumes: string[] = [], produces: string[] = [],\n\t\t\t\tdefinitions: { [x: string]: Swagger.Schema }, tags: Swagger.Tag[], public server: ApiServer, basePath?: string,\n\t\t\t\tparameters: { [name: string]: Swagger.Parameter } = {},\n\t\t\t\tresponses: { [name: string]: Swagger.Response } = {}) {\n\t\tConfig.load();\n\t\tif (Valory.instance != null) {\n\t\t\tthrow Error(\"Only a single valory instance is allowed\");\n\t\t}\n\t\tif (Valory.directInstantiation) {\n\t\t\tthrow Error(\"Direct instantiation of valory is not allowed\");\n\t\t}\n\t\tValory.instance = this;\n\t\tthis.apiDef = {\n\t\t\tswagger: \"2.0\",\n\t\t\tinfo,\n\t\t\tpaths: {},\n\t\t\tdefinitions,\n\t\t\ttags,\n\t\t\tconsumes,\n\t\t\tproduces,\n\t\t\tparameters,\n\t\t\tresponses,\n\t\t};\n\n\t\tif (basePath != null) {\n\t\t\tthis.Logger.debug(\"Path prefix set:\", basePath);\n\t\t\tthis.apiDef.basePath = basePath;\n\t\t}\n\n\t\tObject.assign(this.errors, errors);\n\t\tif (!this.COMPILERMODE) {\n\t\t\tthis.Logger.info(\"Starting valory\");\n\n\t\t\tif (this.TESTMODE) {\n\t\t\t\tthis.server = new DefaultAdaptor();\n\t\t\t}\n\t\t\tif (Config.SourceRoutePath !== \"\") {\n\t\t\t\tconst genRoutes = require(Config.GeneratedRoutePath);\n\t\t\t\tObject.assign(this.apiDef.definitions, genRoutes.definitions);\n\t\t\t\tthis.registerGeneratedRoutes = genRoutes.register;\n\t\t\t}\n\t\t\tthis.validatorModule = loadModule(definitions);\n\t\t\tif (this.server.allowDocSite) {\n\t\t\t\tthis.registerDocSite();\n\t\t\t}\n\t\t} else {\n\t\t\tthis.Logger.debug(\"Starting in compiler mode\");\n\t\t\tthis.apiDef.tags.push(generateErrorTable(this.errors));\n\t\t\t// console.log(Config);\n\t\t\tif (Config.SourceRoutePath !== \"\") {\n\t\t\t\tconst genRoutes = require(Config.SourceRoutePath);\n\t\t\t\tObject.assign(this.apiDef.definitions, genRoutes.definitions);\n\t\t\t\tthis.registerGeneratedRoutes = genRoutes.register;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Register an endpoint with a given method\n\t */\n\tpublic endpoint(path: string, method: HttpMethod, swaggerDef: Swagger.Operation, handler: ApiHandler,\n\t\t\t\t\tmiddleware: ApiMiddleware[] = [], documented: boolean = true, postMiddleware: ApiMiddleware[] = []) {\n\t\tconst stringMethod = HttpMethod[method].toLowerCase();\n\t\tthis.Logger.debug(`Registering endpoint ${this.apiDef.basePath || \"\"}${path}:${stringMethod}`);\n\t\tif (this.COMPILERMODE) {\n\t\t\tthis.endpointCompile(path, method, swaggerDef, handler, stringMethod, middleware, documented, postMiddleware);\n\t\t} else {\n\t\t\tthis.endpointRun(path, method, swaggerDef, handler, stringMethod, middleware, documented, postMiddleware);\n\t\t}\n\t}\n\n\t/**\n\t * Override the default error formatter\n\t */\n\tpublic setErrorFormatter(formatter: ErrorFormatter) {\n\t\tthis.errorFormatter = formatter;\n\t}\n\n\t/**\n\t * Build an ApiExchange from either an error name or an ErrorDef\n\t */\n\tpublic buildError(error: string | ErrorDef, message?: string | string[]): ApiResponse {\n\t\tconst errorDef: ErrorDef = (typeof error === \"string\") ? this.errors[error] : error;\n\t\tif (errorDef == null) {\n\t\t\tthrow Error(`Error definition \"${error}\" does not exist`);\n\t\t}\n\t\treturn this.errorFormatter(errorDef, message);\n\t}\n\n\t/**\n\t * Convenience method to build a return exchange when only body and/or header customization is required\n\t */\n\tpublic buildSuccess(body: any, headers: { [key: string]: any } = {}): ApiResponse {\n\t\tif (headers[\"Content-Type\"] == null) {\n\t\t\tif (typeof body === \"object\") {\n\t\t\t\theaders[\"Content-Type\"] = \"application/json\";\n\t\t\t} else if (typeof body === \"string\") {\n\t\t\t\theaders[\"Content-Type\"] = \"text/plain\";\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tbody,\n\t\t\theaders,\n\t\t\tstatusCode: 200,\n\t\t};\n\t}\n\n\t/**\n\t * Register GET endpoint\n\t */\n\tpublic get(path: string, swaggerDef: Swagger.Operation, handler: ApiHandler, middleware: ApiMiddleware[] = [],\n\t\t\t   documented: boolean = true, postMiddleware: ApiMiddleware[] = []) {\n\t\tthis.endpoint(path, HttpMethod.GET, swaggerDef, handler, middleware, documented, postMiddleware);\n\t}\n\n\t/**\n\t * Register POST endpoint\n\t */\n\tpublic post(path: string, swaggerDef: Swagger.Operation, handler: ApiHandler, middleware: ApiMiddleware[] = [],\n\t\t\t\tdocumented: boolean = true, postMiddleware: ApiMiddleware[] = []) {\n\t\tthis.endpoint(path, HttpMethod.POST, swaggerDef, handler, middleware, documented, postMiddleware);\n\t}\n\n\t/**\n\t * Register DELETE endpoint\n\t */\n\tpublic delete(path: string, swaggerDef: Swagger.Operation, handler: ApiHandler, middleware: ApiMiddleware[] = [],\n\t\t\t\t  documented: boolean = true, postMiddleware: ApiMiddleware[] = []) {\n\t\tthis.endpoint(path, HttpMethod.DELETE, swaggerDef, handler, middleware, documented, postMiddleware);\n\t}\n\n\t/**\n\t * Register HEAD endpoint\n\t */\n\tpublic head(path: string, swaggerDef: Swagger.Operation, handler: ApiHandler, middleware: ApiMiddleware[] = [],\n\t\t\t\tdocumented: boolean = true, postMiddleware: ApiMiddleware[] = []) {\n\t\tthis.endpoint(path, HttpMethod.HEAD, swaggerDef, handler, middleware, documented, postMiddleware);\n\t}\n\n\t/**\n\t * Register PATCH endpoint\n\t */\n\tpublic patch(path: string, swaggerDef: Swagger.Operation, handler: ApiHandler, middleware: ApiMiddleware[] = [],\n\t\t\t\t documented: boolean = true, postMiddleware: ApiMiddleware[] = []) {\n\t\tthis.endpoint(path, HttpMethod.PATCH, swaggerDef, handler, middleware, documented, postMiddleware);\n\t}\n\n\t/**\n\t * Register PUT endpoint\n\t */\n\tpublic put(path: string, swaggerDef: Swagger.Operation, handler: ApiHandler, middleware: ApiMiddleware[] = [],\n\t\t\t   documented: boolean = true, postMiddleware: ApiMiddleware[] = []) {\n\t\tthis.endpoint(path, HttpMethod.PUT, swaggerDef, handler, middleware, documented, postMiddleware);\n\t}\n\n\t/**\n\t * Register a global middleware run before every endpoint\n\t */\n\tpublic addGlobalMiddleware(middleware: ApiMiddleware) {\n\t\tthis.Logger.debug(\"Adding global middleware:\", middleware.name);\n\t\tthis.globalMiddleware.push(middleware);\n\t}\n\n\t/**\n\t * Register a global post middleware run after every endpoint\n\t */\n\tpublic addGlobalPostMiddleware(middleware: ApiMiddleware) {\n\t\tthis.Logger.debug(\"Adding global post middleware:\", middleware.name);\n\t\tthis.globalPostMiddleware.push(middleware);\n\t}\n\n\t/**\n\t * Start server. Call once all endpoints are registered.\n\t */\n\tpublic start(options: any): any {\n\t\tif (this.registerGeneratedRoutes != null) {\n\t\t\tthis.registerGeneratedRoutes(this);\n\t\t}\n\t\tthis.metadata.swagger = this.apiDef;\n\t\tconst data = this.server.getExport(this.metadata, options);\n\t\tif (this.COMPILERMODE) {\n\t\t\tprocess.env[VALORYMETAVAR] = JSON.stringify(data);\n\t\t}\n\t\tif (!this.COMPILERMODE) {\n\t\t\tthis.Logger.info(\"Valory startup complete\");\n\t\t}\n\t\treturn data;\n\t}\n\n\t/**\n\t * Shuts down the server core\n\t */\n\tpublic shutdown() {\n\t\tthis.server.shutdown();\n\t}\n\n\tprivate endpointCompile(path: string, method: HttpMethod, swaggerDef: Swagger.Operation, handler: ApiHandler,\n\t\t\t\t\t\t\tstringMethod: string, middleware: ApiMiddleware[] = [], documented: boolean = true,\n\t\t\t\t\t\t\tpostMiddleware: ApiMiddleware[] = []) {\n\t\tif (!documented) {\n\t\t\tthis.metadata.undocumentedEndpoints.push(path);\n\t\t}\n\t\tconst middlewares: ApiMiddleware[] = this.globalMiddleware.concat(middleware,\n\t\t\tthis.globalPostMiddleware, postMiddleware);\n\t\tfor (const item of middlewares) {\n\t\t\tif (item.tag != null) {\n\t\t\t\tif (!(item.tag instanceof Array)) {\n\t\t\t\t\titem.tag = [item.tag];\n\t\t\t\t}\n\t\t\t\tfor (const def of (item.tag as Array<string | Swagger.Tag>)) {\n\t\t\t\t\tlet tag = \"\";\n\t\t\t\t\tif (typeof def === \"string\") {\n\t\t\t\t\t\ttag = def;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.apiDef.tags.push(def);\n\t\t\t\t\t\ttag = def.name;\n\t\t\t\t\t}\n\t\t\t\t\t(swaggerDef.tags == null) ? swaggerDef.tags = [tag] : swaggerDef.tags.push(tag);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tswaggerDef.tags = uniq(swaggerDef.tags);\n\t\tthis.apiDef.tags = uniq(this.apiDef.tags);\n\t\tset(this.apiDef.paths, `${path}.${stringMethod}`, swaggerDef);\n\t}\n\n\tprivate endpointRun(path: string, method: HttpMethod, swaggerDef: Swagger.Operation,\n\t\t\t\t\t\thandler: ApiHandler, stringMethod: string, middleware: ApiMiddleware[] = [],\n\t\t\t\t\t\tdocumented: boolean = true, postMiddleware: ApiMiddleware[] = []) {\n\t\tconst validator = this.validatorModule.getValidator(path, stringMethod);\n\t\tif (this.apiDef.basePath != null) {\n\t\t\tpath = this.apiDef.basePath + path;\n\t\t}\n\t\tif (validator == null) {\n\t\t\tthrow Error(\"Compiled swagger is out of date. Please run valory cli\");\n\t\t}\n\t\tconst route = `${path}:${stringMethod}`;\n\t\tconst childLogger = this.Logger.child({endpoint: route});\n\t\tconst middlewares: ApiMiddleware[] = this.globalMiddleware.concat(middleware);\n\t\tconst postMiddlewares = this.globalPostMiddleware.concat(postMiddleware);\n\t\tconst chindings: string = (childLogger as any).chindings;\n\t\tconst wrapper = async (req: ApiRequest): Promise<ApiResponse> => {\n\t\t\tconst requestId = uuid();\n\t\t\treq.putAttachment(Valory.RequestIDKey, requestId);\n\t\t\t(childLogger as any).chindings = `${chindings},\"requestId\":\"${requestId}\"`;\n\t\t\tchildLogger.debug(req, \"Received request\");\n\t\t\ttry {\n\t\t\t\tconst middlewareResp: void | ApiResponse = await processMiddleware(middlewares, req, childLogger);\n\t\t\t\tif (middlewareResp != null) {\n\t\t\t\t\treturn (middlewareResp as ApiResponse);\n\t\t\t\t}\n\t\t\t\tconst result = validator(req);\n\t\t\t\tlet response: ApiResponse;\n\t\t\t\tif (result !== true) {\n\t\t\t\t\tresponse = this.buildError(\"ValidationError\", result as string[]);\n\t\t\t\t} else {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tresponse = await handler(req, childLogger, {requestId});\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tif (error.name === \"ValoryEndpointError\") {\n\t\t\t\t\t\t\tresponse = this.buildError(error.valoryErrorCode, error.message || undefined);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tchildLogger.error(\"Internal exception occurred while processing request\");\n\t\t\t\t\t\t\tchildLogger.error(error);\n\t\t\t\t\t\t\tresponse = this.buildError(\"InternalError\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treq.putAttachment(Valory.ValidationResultKey, result);\n\t\t\t\treq.putAttachment(Valory.ResponseKey, response);\n\t\t\t\tconst postMiddlewareResp: void | ApiResponse = await processMiddleware(postMiddlewares, req, childLogger);\n\t\t\t\tif (postMiddlewareResp != null) {\n\t\t\t\t\treturn (postMiddlewareResp as ApiResponse);\n\t\t\t\t}\n\t\t\t\treturn response;\n\t\t\t} catch (error) {\n\t\t\t\tif (error.name === \"ValoryEndpointError\") {\n\t\t\t\t\treturn this.buildError(error.valoryErrorCode, error.message || undefined);\n\t\t\t\t}\n\t\t\t\tchildLogger.error(\"Internal exception occurred while processing request\");\n\t\t\t\tchildLogger.error(error);\n\t\t\t\treturn this.buildError(\"InternalError\");\n\t\t\t}\n\t\t};\n\t\tthis.server.register(path, method, wrapper);\n\t}\n\n\tprivate registerDocSite() {\n\t\tconst prefix = this.apiDef.basePath || \"\";\n\t\tlet redoc: string;\n\t\tconst swaggerBlob = this.validatorModule.swaggerBlob;\n\t\tthis.server.register(prefix + \"/swagger.json\", HttpMethod.GET, (req) => {\n\t\t\treturn {\n\t\t\t\tbody: swaggerBlob,\n\t\t\t\theaders: {\"Content-Type\": \"text/plain\"},\n\t\t\t\tquery: null,\n\t\t\t\tpath: null,\n\t\t\t\tstatusCode: 200,\n\t\t\t\tformData: null,\n\t\t\t};\n\t\t});\n\t\tthis.server.register((prefix !== \"\") ? prefix : \"/\", HttpMethod.GET, (req) => {\n\t\t\tif (!redoc) {\n\t\t\t\tredoc = readFileSync(pathMod.join(__dirname, REDOCPATH), {encoding: \"utf8\"});\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tbody: redoc,\n\t\t\t\theaders: {\"Content-Type\": \"text/html\"},\n\t\t\t\tquery: null,\n\t\t\t\tpath: null,\n\t\t\t\tstatusCode: 200,\n\t\t\t\tformData: null,\n\t\t\t};\n\t\t});\n\t}\n}\n\nfunction processMiddleware(middlewares: ApiMiddleware[],\n\t\t\t\t\t\t   req: ApiRequest, logger: Logger): Promise<void | ApiResponse> {\n\treturn new Promise<void | ApiResponse>((resolve) => {\n\t\tlet err: ApiExchange = null;\n\t\tsteed.eachSeries(middlewares, (handler: ApiMiddleware, done) => {\n\t\t\tconst childLog = logger.child({middleware: handler.name});\n\t\t\tchildLog.debug(\"Running Middleware\");\n\t\t\thandler.handler(req, childLog, (error) => {\n\t\t\t\tif (error != null) {\n\t\t\t\t\terr = error;\n\t\t\t\t\tdone(error);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tdone();\n\t\t\t});\n\t\t}, (error) => {\n\t\t\tresolve(err as ApiResponse);\n\t\t});\n\t});\n}\n\nfunction generateErrorTable(errors: { [x: string]: ErrorDef }): Swagger.Tag {\n\tconst tagDef: Swagger.Tag = {name: \"Errors\", description: \"\", externalDocs: null};\n\tlet table = ERRORTABLEHEADER;\n\tconst keys = Object.keys(errors);\n\tkeys.sort((a, b) => {\n\t\tconst aCode = errors[a].errorCode;\n\t\tconst bCode = errors[b].errorCode;\n\n\t\tif (aCode < bCode) {\n\t\t\treturn -1;\n\t\t}\n\t\tif (aCode === bCode) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (aCode > bCode) {\n\t\t\treturn 1;\n\t\t}\n\t});\n\tfor (const name of keys) {\n\t\tconst error = errors[name];\n\t\ttable += \"|\" + error.errorCode + \"|\" + name + \"|\" + error.defaultMessage + \"|\\n\";\n\t}\n\ttagDef.description = table;\n\treturn omitBy(tagDef, isNil) as Swagger.Tag;\n}\n","interface ApiError extends Error {\n\tvaloryErrorCode: string;\n\tname: \"ValoryEndpointError\";\n}\n\nconst ApiErrorBuilder = (errorCode: string, message?: string): ApiError => {\n\treturn {\n\t\tvaloryErrorCode: errorCode,\n\t\tmessage,\n\t\tname: \"ValoryEndpointError\",\n\t};\n};\n\nexport const ApiError = ApiErrorBuilder;\n","import {ApiMiddleware} from \"./valoryheaders\";\nimport {Controller} from \"./controller\";\nimport {Swagger} from \"./swagger\";\n\n// export function Example<T>(exampleModel: T): any {\n// \treturn () => {\n// \t\treturn;\n// \t};\n// }\n\n/**\n * Register GET endpoint\n * @param {string} name local route for endpoint\n */\nexport function Get(name?: string): any {\n\treturn () => {\n\t\treturn;\n\t};\n}\n\n/**\n * Register POST endpoint\n * @param {string} name local route for endpoint\n */\nexport function Post(name?: string): any {\n\treturn () => {\n\t\treturn;\n\t};\n}\n\n/**\n * Register PUT endpoint\n * @param {string} name local route for endpoint\n * @constructor\n */\nexport function Put(name?: string): any {\n\treturn () => {\n\t\treturn;\n\t};\n}\n\n/**\n * Register PATCH endpoint\n * @param {string} name local route for endpoint\n */\nexport function Patch(name?: string): any {\n\treturn () => {\n\t\treturn;\n\t};\n}\n\n/**\n * Register DELETE endpoint\n * @param {string} name local route for endpoint\n */\nexport function Delete(name?: string): any {\n\treturn () => {\n\t\treturn;\n\t};\n}\n\n/**\n * Add a middleware to a controller or route\n * @param {ApiMiddleware} middleware\n */\nexport function Middleware(middleware: ApiMiddleware): any {\n\treturn (target: any, propertyKey?: string) => {\n\t\tif (propertyKey != null) {\n\t\t\ttarget = target[propertyKey];\n\t\t} else {\n\t\t\ttarget = target.prototype;\n\t\t}\n\t\tif (target.middleware == null) {\n\t\t\ttarget.middleware = [];\n\t\t}\n\t\ttarget.middleware.push(middleware);\n\t};\n}\n\n/**\n * Add a post middleware to a controller or route\n * @param {ApiMiddleware} middleware\n */\nexport function PostMiddleware(middleware: ApiMiddleware): any {\n\treturn (target: any, propertyKey?: string) => {\n\t\tif (propertyKey != null) {\n\t\t\ttarget = target[propertyKey];\n\t\t} else {\n\t\t\ttarget = target.prototype;\n\t\t}\n\t\tif (target.postMiddleware == null) {\n\t\t\ttarget.postMiddleware = [];\n\t\t}\n\t\ttarget.postMiddleware.push(middleware);\n\t};\n}\n\n/**\n * Inject http Body\n *  @param {string} [name] properties name in body object\n */\nexport function Body(): any {\n\treturn () => {\n\t\treturn;\n\t};\n}\n\n/**\n * Inject value from body\n *\n * @param {string} [name] The name of the body parameter\n */\nexport function BodyProp(name?: string): any {\n\treturn () => {\n\t\treturn;\n\t};\n}\n\n/**\n * Inject http request\n */\nexport function Request(): any {\n\treturn () => {\n\t\treturn;\n\t};\n}\n\n/**\n * Inject value from Path\n *\n * @param {string} [name] The name of the path parameter\n */\nexport function Path(name?: string): any {\n\treturn () => {\n\t\treturn;\n\t};\n}\n\n/**\n * Inject value from query string\n *\n * @param {string} [name] The name of the query parameter\n */\nexport function Query(name?: string): any {\n\treturn () => {\n\t\treturn;\n\t};\n}\n\n/**\n * Inject value from Http header\n *\n * @param {string} [name] The name of the header parameter\n */\nexport function Header(name?: string): any {\n\treturn () => {\n\t\treturn;\n\t};\n}\n\n// export function ReferenceParameters(parameters: Swagger.RefParameter[]): any {\n// \treturn () => { return; };\n// }\n\n/**\n * Inject request logger instance\n */\nexport function Logger(): any {\n\treturn () => {\n\t\treturn;\n\t};\n}\n\nexport function SuccessResponse(name: string | number, description?: string): any {\n\treturn () => {\n\t\treturn;\n\t};\n}\n\nexport function Response<T>(name: string | number, description?: string, example?: T): any {\n\treturn () => {\n\t\treturn;\n\t};\n}\n\nexport function Route(name?: string): any {\n\t// console.log(\"route tag factory\");\n\treturn (target: Controller) => {\n\t\t// console.log(\"route tag evaluated\");\n\t\t// console.log(target);\n\t\t// (target as any).prototype.middleware = [];\n\t\t// (target as any).prototype.postMiddleware = [];\n\t\treturn;\n\t};\n}\n\n/**\n * can be used to entirely hide an method from documentation\n */\nexport function Hidden(): any {\n\treturn () => {\n\t\treturn;\n\t};\n}\n\nexport function Tags(...values: string[]): any {\n\treturn () => {\n\t\treturn;\n\t};\n}\n","export {\n\tController,\n} from \"./server/controller\";\nexport {\n\tDefaultAdaptor,\n} from \"./lib/defaultAdaptor\";\nexport {\n\tValory,\n\tValoryOptions,\n\t} from \"./server/valory\";\nexport {\n\tApiRequest,\n\tAttachmentKey,\n\tApiRequestOptions,\n} from \"./server/request\";\nexport {\n\tSwagger,\n} from \"./server/swagger\";\nexport {\n\tApiError,\n} from \"./server/apiError\";\nexport {\n\tLogger,\n\tPostMiddleware,\n\tMiddleware,\n\tBody,\n\tBodyProp,\n\tDelete,\n\t// Example,\n\tGet,\n\tHeader,\n\tHidden,\n\tPatch,\n\tPath,\n\tPost,\n\tPut,\n\tQuery,\n\tRequest,\n\tResponse,\n\tRoute,\n\tSuccessResponse,\n\tTags,\n} from \"./server/decorators\";\nexport {\n\tHttpMethod,\n\tApiResponse,\n\tValoryMetadata,\n\tRequestContext,\n\tErrorFormatter,\n\tApiServer,\n\tApiMiddlewareHandler,\n\tApiHandler,\n\tApiExchange,\n\tErrorDef,\n\tApiMiddleware,\n\tVALORYLOGGERVAR,\n\tVALORYMETAVAR,\n\tVALORYPRETTYLOGGERVAR,\n} from \"./server/valoryheaders\";\n","import {cloneDeep, forEach, get, map, set, unset, isArray} from \"lodash\";\nimport {CompileLog, DisallowedFormats} from \"./compiler\";\nimport {DiscriminatorMap, ExtendedSchema, HASH_SEED, MangledKey} from \"./compilerheaders\";\nimport {PriorityQueue} from \"tstl\";\nimport {Swagger} from \"../server/swagger\";\n\nconst mergeAllOf = require(\"json-schema-merge-allof\");\nconst mapKeysDeep: <T>(obj: T, callback: (value: any, key: string) => string) => T = require(\"map-keys-deep-lodash\");\n\nconst deep: Deep = require(\"lodash-deep\");\nconst XXH = require(\"xxhashjs\");\n\nconst MANGLED_PREFIX = \"p\";\nconst periodRegex = /[.]+?/g;\nconst allOfRefRegex = /.allOf.[\\d]+?.\\$ref/g;\nconst variantTestRegex = /definitions.([^.]*).allOf.[\\d]+?.\\$ref/g;\nconst getAllOfRefIndexRegex = /allOf.([^.]*).\\$ref/g;\nconst safeKey = /^(?:[A-Za-z_$])(?:[0-9a-zA-Z_$]*)$/;\n\ninterface Deep {\n\tdeepMapValues<T>(obj: T, callback: (value: any, path: string) => any): T;\n}\n\nexport interface OneOfMarker {\n\tdepth: number;\n\tschema: ExtendedSchema;\n}\n\nexport function swaggerPreproccess(swagger: Swagger.Spec): {swagger: Swagger.Spec, discriminators: DiscriminatorMap} {\n\tconst pathMap: {[key: string]: {propName: string, anyOfPath: string}} = {};\n\tconst removePaths: string[] = [];\n\tconst discrimMap: DiscriminatorMap = {};\n\t// DISCRIMINATOR PROCESSING\n\n\t// Find parents\n\tdeep.deepMapValues(swagger, (value, path) => {\n\t\tif (path.indexOf(\"discriminator\") > -1) {\n\t\t\t// console.log(path, \"is\", value);\n\t\t\tremovePaths.push(path);\n\t\t\tconst disPath = path.replace(\".discriminator\", \"\");\n\t\t\tconst anyOfPath = disPath + \".anyOf\";\n\t\t\tconst pathRef = \"#/\" + disPath.replace(periodRegex, \"/\");\n\t\t\tdiscrimMap[value] = {\n\t\t\t\tparent: disPath.replace(\"definitions.\", \"\"),\n\t\t\t\tchildren: [],\n\t\t\t};\n\t\t\tset(swagger, anyOfPath, []);\n\t\t\tpathMap[pathRef] = {propName: value, anyOfPath};\n\t\t}\n\t});\n\n\t// Find Children\n\tdeep.deepMapValues(swagger, (value, path) => {\n\t\tif (pathMap[value] != null && variantTestRegex.test(path)) {\n\t\t\tconst objPath = path.replace(allOfRefRegex, \"\");\n\t\t\tconst defPath = \"#/\" + objPath.replace(periodRegex, \"/\");\n\t\t\tvariantTestRegex.lastIndex = 0;\n\t\t\tconst modelName = variantTestRegex.exec(path)[1];\n\t\t\tvariantTestRegex.lastIndex = 0;\n\t\t\t// removePaths.push(path.replace(\".$ref\", \"\"));\n\t\t\tconst schemaExtention: any = {properties: {}};\n\t\t\tschemaExtention.properties[pathMap[value].propName] = {const: modelName};\n\t\t\tdiscrimMap[pathMap[value].propName].children.push(modelName);\n\t\t\tset(swagger, path.replace(\".$ref\", \"\"), schemaExtention);\n\t\t\tget(swagger, `${pathMap[value].anyOfPath}`).push({$ref: defPath});\n\t\t}\n\t});\n\tremovePaths.forEach((path) => {\n\t\tunset(swagger, path);\n\t});\n\treturn {swagger, discriminators: discrimMap};\n}\n\nfunction objectify(anyOf: any[]): {[x: string]: any} {\n\tconst convertedObj: {[x: string]: any} = {};\n\tforEach(anyOf, (item, ind) => {\n\t\tconvertedObj[\"t\" + ind] = item;\n\t});\n\treturn convertedObj;\n}\n\nexport function schemaPreprocess(schema: ExtendedSchema):\n{schema: ExtendedSchema, resQueue: PriorityQueue<OneOfMarker>} {\n\tconst schemaClone = cloneDeep(schema);\n\tconst anyOfQueue = new PriorityQueue<OneOfMarker>((a, b): boolean => (a.depth > b.depth));\n\n\tconst deepScan = (scanSchema: ExtendedSchema, depth: number = 0) => {\n\t\tif (scanSchema.properties) {\n\t\t\tforEach(scanSchema.properties, (schemaChild) => {deepScan(schemaChild, depth + 1); });\n\t\t}\n\n\t\tif (scanSchema.anyOf) {\n\t\t\t// if (scanSchema.anyOf.length === 1) {\n\t\t\t// \tscanSchema.allOf = scanSchema.anyOf;\n\t\t\t// \tdelete scanSchema.anyOf;\n\t\t\t// } else {\n\t\t\t// \tanyOfQueue.push({depth, schema: scanSchema});\n\t\t\t// }\n\t\t\tanyOfQueue.push({depth, schema: scanSchema});\n\t\t\tforEach(scanSchema.anyOf, (schemaChild) => {deepScan(schemaChild, depth + 1); });\n\t\t}\n\n\t\tif (scanSchema.allOf) {\n\t\t\tforEach(scanSchema.allOf, (schemaChild) => {deepScan(schemaChild, depth + 1); });\n\t\t}\n\n\t\tif (scanSchema.items) {\n\t\t\tif (isArray(scanSchema.items)) {\n\t\t\t\tforEach(scanSchema.items, (schemaChild) => {deepScan(schemaChild, depth + 1); });\n\t\t\t} else {\n\t\t\t\tdeepScan(scanSchema.items as any, depth + 1);\n\t\t\t}\n\t\t}\n\n\t\tif (scanSchema.additionalProperties) {\n\t\t\tdeepScan(scanSchema.additionalProperties as any, depth + 1);\n\t\t}\n\n\t\tif (scanSchema.enum && scanSchema.enum.length === 1) {\n\t\t\tscanSchema.const = scanSchema.enum[0];\n\t\t\tdelete scanSchema.enum;\n\t\t}\n\n\t\tif (scanSchema.type as any === \"file\") {\n\t\t\tCompileLog.debug(`\"file\" type is implementation specific and therefore cannot be validated`);\n\t\t\tdelete scanSchema.type;\n\t\t}\n\n\t\tif (DisallowedFormats.indexOf(scanSchema.format) > -1) {\n\t\t\tCompileLog.debug(\"removing invalid format:\", scanSchema.format);\n\t\t\tdelete scanSchema.format;\n\t\t}\n\t};\n\tconst merged = mergeAllOf(schemaClone);\n\n\tdeepScan(merged);\n\treturn {schema: merged, resQueue: anyOfQueue};\n}\n\nexport function resolve(resolveQueue: PriorityQueue<OneOfMarker>) {\n\twhile (!resolveQueue.empty()) {\n\t\tconst item = resolveQueue.top();\n\t\titem.schema.anyOf = (objectify(item.schema.anyOf) as any[]);\n\t\tresolveQueue.pop();\n\t}\n}\n\nexport function mangleKeys(schema: ExtendedSchema): {schema: ExtendedSchema, mangledKeys: MangledKey[]} {\n\tconst mangledKeys: MangledKey[] = [];\n\tconst mangledSchema = mapKeysDeep(schema, (value, key) => {\n\t\tif (key === \"enum\") {\n\t\t\treturn \"api_enum\";\n\t\t}\n\t\tif (!safeKey.test(key)) {\n\t\t\tconst mangled = MANGLED_PREFIX + XXH.h32(key, HASH_SEED).toString();\n\t\t\tmangledKeys.push({original: key, mangled});\n\t\t\treturn mangled;\n\t\t}\n\t\treturn key;\n\t});\n\n\treturn {schema: mangledSchema, mangledKeys};\n}\n","import {each} from \"lodash\";\nimport {ExtendedSchema, RequestFieldMap} from \"./compilerheaders\";\nimport {Swagger} from \"../server/swagger\";\n\nconst stringify = require(\"fast-json-stable-stringify\");\n\nexport interface MethodOutput {\n\tschema: Swagger.Schema;\n\thash: string;\n}\n\nexport function compileMethodSchema(operation: Swagger.Operation, method: string, pathName: string,\n\t\t\t\t\t\t\t\t\trequestObjectMap: RequestFieldMap): Swagger.Schema {\n\tconst schema: ExtendedSchema = {\n\t\tproperties: {},\n\t\trequired: [],\n\t\ttype: \"object\",\n\t};\n\tconst addProperty = (param: Swagger.Parameter) => {\n\t\tconst requestField = requestObjectMap[param.in];\n\t\tlet requestFieldObj = schema.properties[requestField];\n\t\tconst prop: any = {};\n\t\tif (!requestFieldObj) {\n\t\t\trequestFieldObj = schema.properties[requestField] = {\n\t\t\t\tproperties: {},\n\t\t\t\trequired: undefined,\n\t\t\t\ttype: \"object\",\n\t\t\t};\n\t\t}\n\t\trequestFieldObj.properties[param.name] = prop;\n\t\tfor (const key of Object.keys(param)) {\n\t\t\tswitch (key) {\n\t\t\t\tcase \"description\":\n\t\t\t\tcase \"in\":\n\t\t\t\tcase \"name\":\n\t\t\t\tcase \"required\":\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tprop[key] = (param as any)[key];\n\t\t\t}\n\t\t}\n\t\tif (param.required) {\n\t\t\tif (requestFieldObj.required == null) {\n\t\t\t\trequestFieldObj.required = [];\n\t\t\t}\n\t\t\tif (requestFieldObj.required.indexOf(param.name)) {\n\t\t\t\trequestFieldObj.required.push(param.name);\n\t\t\t}\n\t\t\tif (schema.required == null) {\n\t\t\t\tschema.required = [];\n\t\t\t}\n\t\t\tif (schema.required.indexOf(requestField) < 0) {\n\t\t\t\tschema.required.push(requestField);\n\t\t\t}\n\t\t}\n\t};\n\n\teach(operation.parameters, (parameter) => {\n\t\tswitch ((parameter as Swagger.BaseParameter).in) {\n\t\t\tcase \"body\":\n\t\t\t\tschema.properties.body = (parameter as Swagger.BodyParameter).schema;\n\t\t\t\tif (!schema.required) {\n\t\t\t\t\tschema.required = [];\n\t\t\t\t}\n\t\t\t\tschema.required.push(\"body\");\n\t\t\t\tbreak;\n\t\t\tcase \"header\":\n\t\t\t\t(parameter as Swagger.BaseParameter).name = (parameter as Swagger.BaseParameter).name.toLowerCase();\n\t\t\tcase \"formData\":\n\t\t\tcase \"query\":\n\t\t\tcase \"path\":\n\t\t\t\taddProperty((parameter as any));\n\t\t}\n\t});\n\n\treturn schema;\n}\n","import {cloneDeep, merge} from \"lodash\";\nimport {dereference, validate} from \"swagger-parser\";\nimport {mangleKeys, resolve, schemaPreprocess, swaggerPreproccess} from \"./preprocessor\";\nimport {compileMethodSchema} from \"./method\";\nconst Ajv = require(\"ajv\");\nimport * as fs from \"fs\";\nimport {\n\tCompilationLevel,\n\tCompilerOutput,\n\tFUNCTION_PREFIX,\n\tHASH_SEED,\n\tICompilerOptions,\n\tValidatorModuleContent,\n} from \"./compilerheaders\";\nimport {join} from \"path\";\nimport {VALORYPRETTYLOGGERVAR} from \"../server/valoryheaders\";\nimport Pino = require(\"pino\");\nimport {convertTime, spinnerFail} from \"../lib/helpers\";\nimport {Swagger} from \"../server/swagger\";\nimport {Config} from \"../lib/config\";\nimport chalk from \"chalk\";\n\nexport const CompileLog = Pino({prettyPrint: process.env[VALORYPRETTYLOGGERVAR] === \"true\"});\nconst ClosureCompiler = require(\"google-closure-compiler\").compiler;\nconst tmp = require(\"tmp\");\nconst dotJs = require(\"dot\");\ndotJs.log = false;\nconst templates = dotJs.process({path: join(__dirname, \"../../templates\")});\nconst errorSup = \"undefinedVars\";\nconst XXH = require(\"xxhashjs\");\n\nexport const DisallowedFormats = [\"float\", \"double\", \"int32\", \"int64\", \"byte\", \"binary\"];\n\n// TODO: Fix discriminator errors\nexport async function compile(spec: Swagger.Spec, options?: ICompilerOptions) {\n\t\n\tconst output: CompilerOutput = {\n\t\tmodule: null,\n\t\tdebugArtifacts: {\n\t\t\thashes: [],\n\t\t\tpreSwagger: null,\n\t\t\tderefSwagger: null,\n\t\t\tinitialSchema: [],\n\t\t\tprocessedSchema: [],\n\t\t\tinitialCompiles: [],\n\t\t\tmangledSchema: [],\n\t\t\tintermediateFunctions: [],\n\t\t\tintermediateModule: null,\n\t\t\tpostCompileModule: null,\n\t\t\tclosureOutput: {\n\t\t\t\texitCode: null,\n\t\t\t\tstderr: null,\n\t\t\t\tstdout: null,\n\t\t\t},\n\t\t},\n\t};\n\n\tconst defaultCompilerOptions: ICompilerOptions = {\n\t\trequestFieldMapping: {\n\t\t\tbody: \"body\",\n\t\t\tformData: \"formData\",\n\t\t\theader: \"headers\",\n\t\t\tpath: \"path\",\n\t\t\tquery: \"query\",\n\t\t},\n\t\tdebug: false,\n\t\tsingleError: true,\n\t\tcompilationLevel: CompilationLevel.ADVANCED,\n\t\tdiscrimFastFail: false,\n\t};\n\n\tmerge(defaultCompilerOptions, options);\n\toptions = defaultCompilerOptions;\n\tconst ajv = new Ajv({\n\t\tcoerceTypes: true,\n\t\tuseDefaults: \"shared\",\n\t\tsourceCode: true,\n\t\terrorDataPath: \"property\",\n\t\tunicode: false,\n\t\tallErrors: !options.singleError,\n\t});\n\tif (options.discrimFastFail) {\n\t\tCompileLog.warn(\"discriminator fast fail is enabled EXPERIMENTAL\");\n\t}\n\tconst spinner = Config.Spinner;\n\t// const start = process.hrtime();\n\tconsole.log(chalk.bold(\"Prepare Swagger\"));\n\t// CompileLog.info(\"Validating swagger\");\n\tawait spinner.start(\"Validating Swagger\");\n\ttry {\n\t\tawait validate(cloneDeep(spec as any));\n\t} catch (e) {\n\t\tawait spinnerFail(\"Swagger Validation Failure\", e);\n\t}\n\tawait spinner.succeed();\n\t// CompileLog.info(\"Preprocessing swagger\");\n\tspinner.start(\"Preprocessing Swagger\");\n\ttry {\n\t\toutput.debugArtifacts.preSwagger = swaggerPreproccess(cloneDeep(spec as any));\n\t} catch (e) {\n\t\tawait spinnerFail(\"Swagger Preprocessor Failure\", e);\n\t}\n\tawait spinner.succeed();\n\tspinner.start(\"Dereferencing Swagger\");\n\ttry {\n\t\toutput.debugArtifacts.derefSwagger = await dereference(output.debugArtifacts.preSwagger.swagger as any);\n\t} catch (e) {\n\t\tawait spinnerFail(\"Swagger Dereference Failure\", e);\n\t}\n\tawait spinner.succeed();\n\tconsole.log(chalk.bold(\"Build Endpoints\"));\n\tfor (const path of Object.keys(output.debugArtifacts.derefSwagger.paths)) {\n\t\tfor (const method of Object.keys(output.debugArtifacts.derefSwagger.paths[path])) {\n\t\t\tawait spinner.start(\"Building method schema\");\n\t\t\tconst hash = FUNCTION_PREFIX + XXH.h32(`${path}:${method}`, HASH_SEED).toString();\n\t\t\tconst endpointLogger = CompileLog.child({endpoint: `${path}:${method}`, hash});\n\t\t\t// endpointLogger.info(\"Building method schema\");\n\t\t\tconst schema = compileMethodSchema((output.debugArtifacts.derefSwagger.paths[path] as any)[method], method, path,\n\t\t\t\toptions.requestFieldMapping);\n\t\t\tspinner.text = \"Preprocessing schema\";\n\t\t\tconst schemaProcessed = schemaPreprocess(schema);\n\t\t\tspinner.text = \"Compiling schema validator\";\n\t\t\tconst initialCompile = ajv.compile(schemaProcessed.schema);\n\t\t\tspinner.text = \"Objectifying anyOf's\";\n\t\t\tresolve(schemaProcessed.resQueue);\n\t\t\tspinner.text = \"Mangling keys\";\n\t\t\tconst mangled = mangleKeys(schemaProcessed.schema);\n\t\t\tspinner.text = \"Compiling intermediate validator function\";\n\t\t\tconst templated = templates.validatorTemplate({\n\t\t\t\tvalidate: initialCompile,\n\t\t\t\tfuncName: path,\n\t\t\t\tlocalConsumes: (output.debugArtifacts.derefSwagger.paths[path] as any)[method].consumes,\n\t\t\t\thash,\n\t\t\t\tformat: (ajv as any)._opts.format,\n\t\t\t\tmangledKeys: mangled.mangledKeys,\n\t\t\t\tschema: mangled.schema,\n\t\t\t\tsingleError: options.singleError,\n\t\t\t\tdiscriminators: output.debugArtifacts.preSwagger.discriminators,\n\t\t\t\tdiscrimFastFail: options.discrimFastFail,\n\t\t\t});\n\t\t\toutput.debugArtifacts.hashes.push(hash);\n\t\t\toutput.debugArtifacts.initialSchema.push(schema);\n\t\t\toutput.debugArtifacts.intermediateFunctions.push(templated);\n\t\t\toutput.debugArtifacts.processedSchema.push(schemaProcessed.schema);\n\t\t\toutput.debugArtifacts.initialCompiles.push(initialCompile);\n\t\t\toutput.debugArtifacts.mangledSchema.push(mangled);\n\t\t\tawait spinner.succeed(`${path}:${method}`);\n\t\t}\n\t}\n\tconsole.log(chalk.bold(\"Compile\"));\n\tawait spinner.start(\"Building intermediate module\");\n\toutput.debugArtifacts.intermediateModule = templates.moduleTemplate({\n\t\tvalidatorLib: output.debugArtifacts.intermediateFunctions,\n\t\tdefHash: XXH.h32(JSON.stringify(spec.definitions), HASH_SEED).toString(),\n\t\texportHashes: output.debugArtifacts.hashes,\n\t\tswagger: spec,\n\t});\n\n\tconst intermediateTemp = tmp.fileSync({prefix: \"valCI\"});\n\tfs.writeSync(intermediateTemp.fd, output.debugArtifacts.intermediateModule);\n\tconst outputTemp = tmp.fileSync({prefix: \"valC\"});\n\n\tconst compilerFlags = {\n\t\tjs: intermediateTemp.name,\n\t\trewrite_polyfills: false,\n\t\tcompilation_level: CompilationLevel[options.compilationLevel],\n\t\tuse_types_for_optimization: true,\n\t\tpreserve_type_annotations: true,\n\t\tjs_output_file: outputTemp.name,\n\t\tlanguage_out: \"ES5_STRICT\",\n\t\tdebug: options.debug,\n\t\tjscomp_off: errorSup,\n\t};\n\tawait spinner.succeed();\n\tawait spinner.start(\"Running Closure Compiler: \" + CompilationLevel[options.compilationLevel]);\n\ttry {\n\t\tawait new Promise((resol, reject) => {\n\t\t\tnew ClosureCompiler(compilerFlags).run((exitCode: number, stdout: string, stderr: string) => {\n\t\t\t\toutput.debugArtifacts.closureOutput.stderr = stderr;\n\t\t\t\toutput.debugArtifacts.closureOutput.stdout = stdout;\n\t\t\t\toutput.debugArtifacts.closureOutput.exitCode = exitCode;\n\n\t\t\t\tif (!exitCode) {\n\t\t\t\t\toutput.debugArtifacts.postCompileModule =\n\t\t\t\t\t\tfs.readFileSync(outputTemp.name, {encoding: \"utf8\"}) as ValidatorModuleContent;\n\t\t\t\t\tresol();\n\t\t\t\t} else {\n\t\t\t\t\treject(stderr);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t} catch (e) {\n\t\tawait spinnerFail(\"Closure Compiler Failure\", e);\n    }\n\tawait spinner.succeed();\n\tawait spinner.start(\"Final post process\");\n\toutput.module = finalProcess(output.debugArtifacts.postCompileModule);\n\tawait spinner.succeed();\n\t// console.log(\"\\nDone\", (convertTime(process.hrtime(start)) / 1000).toFixed(3) + \"s\");\n\treturn output;\n}\n\nfunction finalProcess(content: ValidatorModuleContent): ValidatorModuleContent {\n\t\"use strict\";\n\tconst trueReg = /!0/g;\n\tconst falseReg = /!1/g;\n\tconst nullReg = /void 0/g;\n\tconst arrayify = /([a-zA-Z]*?)=[\\S\\n\\r]*?\\\"([a-zA-Z ]+?)\\\".split\\(\\\" \\\"\\)/gm;\n\t// const arrayCheckReg = /Array.isArray\\(([a-zA-Z]*?)\\)/g;\n\n\tlet ret = content.replace(trueReg, \" true\");\n\tret = ret.replace(falseReg, \" false\");\n\tret = ret.replace(nullReg, \"undefined\");\n\tret = ret.replace(arrayify, (match, varName, value) => {\n\t\treturn `${varName}=${JSON.stringify(value.split(\" \"))}`;\n\t});\n\t// ret = ret.replace(arrayCheckReg,\"($1 instanceof Array)\");\n\n\treturn ret;\n}\n","import P = require(\"pino\");\nimport {Swagger} from \"../server/swagger\";\nimport {ICompilerOptions} from \"./compilerheaders\";\nimport {VALORYLOGGERVAR, VALORYPRETTYLOGGERVAR} from \"../server/valoryheaders\";\nimport {existsSync, mkdirSync, writeFileSync} from \"fs\";\nimport {cloneDeep, omit} from \"lodash\";\nimport * as path from \"path\";\nimport {Config} from \"../lib/config\";\n\nconst hyperid = require(\"hyperid\");\n\nexport async function compileAndSave(swagger: Swagger.Spec, compilePath: string, additionalPath: string\n    , undocumentedPaths: string[], compilerOptions: ICompilerOptions, debugPath?: string) {\n    const compiled = await require(\"./compiler\").compile(swagger, compilerOptions);\n    const Logger = P({\n        level: process.env[VALORYLOGGERVAR] || \"info\",\n        prettyPrint: process.env[VALORYPRETTYLOGGERVAR] === \"true\",\n    });\n    Logger.debug(\"Saving compiled swagger to: \" + compilePath);\n    writeFileSync(compilePath, compiled.module);\n    const trimmedSpec = cloneDeep(swagger);\n    trimmedSpec.paths = omit(trimmedSpec.paths, undocumentedPaths);\n    if (debugPath != null) {\n        if (!existsSync(debugPath)) {\n            mkdirSync(debugPath);\n        }\n        const id = Buffer.from(hyperid()()).toString(\"base64\");\n        mkdirSync(path.join(debugPath, id));\n        Logger.info(\"Placing additional debug artifacts in:\", path.join(debugPath, id));\n        for (const name of Object.keys(compiled.debugArtifacts)) {\n            const item = compiled.debugArtifacts[name];\n            if (typeof item === \"string\") {\n                writeFileSync(path.join(debugPath, id, name + \".js\"), item);\n            }\n        }\n    }\n    writeFileSync(Config.SwaggerPath, JSON.stringify(trimmedSpec));\n    writeFileSync(path.join(additionalPath, Config.SWAGGER_FILE), JSON.stringify(trimmedSpec));\n}\n","import * as ts from \"typescript\";\n\nexport function getJSDocDescription(node: ts.Node) {\n\tconst jsDocs = (node as any).jsDoc as ts.JSDoc[];\n\tif (!jsDocs || !jsDocs.length) {\n\t\treturn undefined;\n\t}\n\n\treturn jsDocs[0].comment || undefined;\n}\n\nexport function getJSDocComment(node: ts.Node, tagName: string) {\n\tconst tags = getJSDocTags(node, (tag) => tag.tagName.text === tagName);\n\tif (tags.length === 0) {\n\t\treturn;\n\t}\n\treturn tags[0].comment;\n}\n\nexport function getJSDocTagNames(node: ts.Node) {\n\tlet tags: ts.JSDocTag[];\n\tif (node.kind === ts.SyntaxKind.Parameter) {\n\t\tconst parameterName = ((node as any).name as ts.Identifier).text;\n\t\ttags = getJSDocTags(node.parent as any, (tag) => {\n\t\t\treturn tag.comment !== undefined && tag.comment.startsWith(parameterName);\n\t\t});\n\t} else {\n\t\ttags = getJSDocTags(node as any, (tag) => {\n\t\t\treturn tag.comment !== undefined;\n\t\t});\n\t}\n\treturn tags.map((tag) => {\n\t\treturn tag.tagName.text;\n\t});\n}\n\nexport function getJSDocTags(node: ts.Node, isMatching: (tag: ts.JSDocTag) => boolean) {\n\tconst jsDocs = (node as any).jsDoc as ts.JSDoc[];\n\tif (!jsDocs || jsDocs.length === 0) {\n\t\treturn [];\n\t}\n\n\tconst jsDoc = jsDocs[0];\n\tif (!jsDoc.tags) {\n\t\treturn [];\n\t}\n\n\treturn jsDoc.tags.filter(isMatching);\n}\n\nexport function isExistJSDocTag(node: ts.Node, isMatching: (tag: ts.JSDocTag) => boolean) {\n\tconst tags = getJSDocTags(node, isMatching);\n\tif (tags.length === 0) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n","import * as ts from \"typescript\";\n\nexport class GenerateMetadataError extends Error {\n  constructor(message?: string, node?: ts.Node) {\n    super(message);\n    if (node) {\n      this.message = `${message}\\n in: ${getSourceFile(node)}`;\n    }\n  }\n}\n\nfunction getSourceFile(node: ts.Node): string {\n  if (node.kind === ts.SyntaxKind.SourceFile) {\n    return (node as ts.SourceFile).fileName;\n  } else {\n    if (node.parent) {\n      return getSourceFile(node.parent);\n    } else {\n      return \"\";\n    }\n  }\n}\n","import * as moment from \"moment\";\nimport * as ts from \"typescript\";\nimport { GenerateMetadataError } from \"../metadataGeneration/exceptions\";\nimport { Tsoa } from \"../metadataGeneration/tsoa\";\nimport { getJSDocTags } from \"./jsDocUtils\";\n\nexport function getParameterValidators(parameter: ts.ParameterDeclaration, parameterName: string): Tsoa.Validators {\n    if (!parameter.parent) { return {}; }\n\n    const tags = getJSDocTags(parameter.parent, (tag) => {\n        return getParameterTagSupport().some((value) => {\n            if (!tag.comment) { return false; }\n            return value === tag.tagName.text && tag.comment.startsWith(parameterName);\n        });\n    });\n\n    function getValue(comment?: string) {\n        if (!comment) { return; }\n        return comment.split(\" \")[0];\n    }\n    function getErrorMsg(comment?: string, isValue = true) {\n        if (!comment) { return; }\n        if (isValue) {\n            const indexOf = comment.indexOf(\" \");\n            if (indexOf > 0) {\n                return comment.substr(indexOf + 1);\n            } else {\n                return undefined;\n            }\n        } else {\n            return comment;\n        }\n    }\n\n    return tags.reduce((validateObj, tag) => {\n        if (!tag.comment) { return validateObj; }\n\n        const name = tag.tagName.text;\n        const comment = tag.comment.substr(tag.comment.indexOf(\" \") + 1).trim();\n        const value = getValue(comment);\n\n        switch (name) {\n            case \"uniqueItems\":\n                validateObj[name] = {\n                    errorMsg: getErrorMsg(comment, false),\n                    value: undefined,\n                };\n                break;\n            case \"minimum\":\n            case \"maximum\":\n            case \"minItems\":\n            case \"maxItems\":\n            case \"minLength\":\n            case \"maxLength\":\n                if (isNaN(value as any)) {\n                    throw new GenerateMetadataError(`${name} parameter use number.`);\n                }\n                validateObj[name] = {\n                    errorMsg: getErrorMsg(comment),\n                    value: Number(value),\n                };\n                break;\n            case \"minDate\":\n            case \"maxDate\":\n                if (!moment(value, moment.ISO_8601, true).isValid()) {\n                    throw new GenerateMetadataError(\n                        `${name} parameter use date format ISO 8601 ex. 2017-05-14, 2017-05-14T05:18Z`);\n                }\n                validateObj[name] = {\n                    errorMsg: getErrorMsg(comment),\n                    value,\n                };\n                break;\n            case \"pattern\":\n                if (typeof value !== \"string\") {\n                    throw new GenerateMetadataError(`${name} patameter use string.`);\n                }\n                validateObj[name] = {\n                    errorMsg: getErrorMsg(comment),\n                    value,\n                };\n                break;\n            default:\n                if (name.startsWith(\"is\")) {\n                    const errorMsg = getErrorMsg(comment, false);\n                    if (errorMsg) {\n                        validateObj[name] = {\n                            errorMsg,\n                            value: undefined,\n                        };\n                    }\n                }\n                break;\n        }\n        return validateObj;\n    }, {} as Tsoa.Validators);\n}\n\nexport function getPropertyValidators(property: ts.PropertyDeclaration): Tsoa.Validators | undefined {\n    const tags = getJSDocTags(property, (tag) => {\n        return getParameterTagSupport().some((value) => value === tag.tagName.text);\n    });\n    function getValue(comment?: string) {\n        if (!comment) { return; }\n        return comment.split(\" \")[0];\n    }\n    function getErrorMsg(comment?: string, isValue = true) {\n        if (!comment) { return; }\n        if (isValue) {\n            const indexOf = comment.indexOf(\" \");\n            if (indexOf > 0) {\n                return comment.substr(indexOf + 1);\n            } else {\n                return undefined;\n            }\n        } else {\n            return comment;\n        }\n    }\n\n    return tags.reduce((validateObj, tag) => {\n        const name = tag.tagName.text;\n        const comment = tag.comment;\n        const value = getValue(comment);\n\n        switch (name) {\n\t\t\tcase \"default\": {\n\t\t\t\tbreak;\n\t\t\t}\n            case \"uniqueItems\":\n                validateObj[name] = {\n                    errorMsg: getErrorMsg(comment, false),\n                    value: undefined,\n                };\n                break;\n            case \"minimum\":\n            case \"maximum\":\n            case \"minItems\":\n            case \"maxItems\":\n            case \"minLength\":\n            case \"maxLength\":\n                if (isNaN(value as any)) {\n                    throw new GenerateMetadataError(`${name} parameter use number.`);\n                }\n                validateObj[name] = {\n                    errorMsg: getErrorMsg(comment),\n                    value: Number(value),\n                };\n                break;\n            case \"minDate\":\n            case \"maxDate\":\n                if (!moment(value, moment.ISO_8601, true).isValid()) {\n                    throw new GenerateMetadataError(\n                        `${name} parameter use date format ISO 8601 ex. 2017-05-14, 2017-05-14T05:18Z`);\n                }\n                validateObj[name] = {\n                    errorMsg: getErrorMsg(comment),\n                    value,\n                };\n                break;\n            case \"pattern\":\n                if (typeof value !== \"string\") {\n                    throw new GenerateMetadataError(`${name} patameter use string.`);\n                }\n                validateObj[name] = {\n                    errorMsg: getErrorMsg(comment),\n                    value,\n                };\n                break;\n            default:\n                if (name.startsWith(\"is\")) {\n                    const errorMsg = getErrorMsg(comment, false);\n                    if (errorMsg) {\n                        validateObj[name] = {\n                            errorMsg,\n                            value: undefined,\n                        };\n                    }\n                }\n                break;\n        }\n        return validateObj;\n    }, {} as Tsoa.Validators);\n}\n\nfunction getParameterTagSupport() {\n    return [\n        \"isString\", \"isBoolean\", \"isInt\", \"isLong\", \"isFloat\", \"isDouble\", \"isDate\", \"isDateTime\",\n        \"minItems\", \"maxItems\", \"uniqueItems\",\n        \"minLength\", \"maxLength\", \"pattern\",\n        \"minimum\", \"maximum\",\n        \"minDate\", \"maxDate\",\n        // \"default\"\n    ];\n}\n","import {map, indexOf} from \"lodash\";\nimport * as ts from \"typescript\";\nimport {getJSDocComment, getJSDocTagNames, isExistJSDocTag} from \"../utils/jsDocUtils\";\nimport {getPropertyValidators} from \"../utils/validatorUtils\";\nimport {GenerateMetadataError} from \"./exceptions\";\nimport {MetadataGenerator} from \"./metadataGenerator\";\nimport {Tsoa} from \"./tsoa\";\nimport {Swagger} from \"../../server/swagger\";\n\nconst syntaxKindMap: { [kind: number]: string } = {};\nsyntaxKindMap[ts.SyntaxKind.NumberKeyword] = \"number\";\nsyntaxKindMap[ts.SyntaxKind.StringKeyword] = \"string\";\nsyntaxKindMap[ts.SyntaxKind.BooleanKeyword] = \"boolean\";\nsyntaxKindMap[ts.SyntaxKind.VoidKeyword] = \"void\";\n\nconst localReferenceTypeCache: { [typeName: string]: Tsoa.ReferenceType | Tsoa.ReferenceAlias } = {};\nconst inProgressTypes: { [typeName: string]: boolean } = {};\n\ntype UsableDeclaration = ts.InterfaceDeclaration\n\t| ts.ClassDeclaration\n\t| ts.TypeAliasDeclaration\n\t| ts.ObjectTypeDeclaration;\n\n// TODO: type aliases are not properly resolved\nexport function resolveType(typeNode: ts.TypeNode, parentNode?: ts.Node, extractEnum = true): Tsoa.Type {\n\tconst primitiveType = getPrimitiveType(typeNode, parentNode);\n\tif (primitiveType) {\n\t\treturn primitiveType;\n\t}\n\n\tif (typeNode.kind === ts.SyntaxKind.ArrayType) {\n\t\treturn {\n\t\t\tdataType: \"array\",\n\t\t\telementType: resolveType((typeNode as ts.ArrayTypeNode).elementType),\n\t\t} as Tsoa.ArrayType;\n\t}\n\n\tif (typeNode.kind === ts.SyntaxKind.UnionType) {\n\t\tconst unionType = typeNode as ts.UnionTypeNode;\n\t\tconst supportType = unionType.types.some((type) => type.kind === ts.SyntaxKind.LiteralType);\n\t\tif (supportType) {\n\t\t\treturn {\n\t\t\t\tdataType: \"enum\",\n\t\t\t\tenums: unionType.types.map((type) => {\n\t\t\t\t\t/* tslint:disable-next-line:no-shadowed-variable */\n\t\t\t\t\tconst literalType = (type as ts.LiteralTypeNode).literal;\n\t\t\t\t\tswitch (literalType.kind) {\n\t\t\t\t\t\tcase ts.SyntaxKind.TrueKeyword:\n\t\t\t\t\t\t\treturn \"true\";\n\t\t\t\t\t\tcase ts.SyntaxKind.FalseKeyword:\n\t\t\t\t\t\t\treturn \"false\";\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn String((literalType as any).text);\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t} as Tsoa.EnumerateType;\n\t\t} else {\n\t\t\treturn {dataType: \"object\"} as Tsoa.Type;\n\t\t}\n\t}\n\n\tif (typeNode.kind === ts.SyntaxKind.AnyKeyword) {\n\t\treturn {dataType: \"any\"} as Tsoa.Type;\n\t}\n\n\tif (typeNode.kind === ts.SyntaxKind.TypeLiteral) {\n\t\tconst literal = getTypeLiteral(typeNode as any, parentNode);\n\t\t// MetadataGenerator.current.AddReferenceType(literal);\n\t\treturn literal;\n\t}\n\n\tif (typeNode.kind === ts.SyntaxKind.LiteralType) {\n\t\t// Literal types generate a const enum\n\t\tconst literal = typeNode as ts.LiteralTypeNode;\n\t\tlet constValue: string | number;\n\n\t\tswitch (literal.literal.kind) {\n\t\t\tcase ts.SyntaxKind.StringLiteral:\n\t\t\t\tconstValue = literal.literal.text;\n\t\t\t\tbreak;\n\t\t\tcase ts.SyntaxKind.NumericLiteral:\n\t\t\t\tconstValue = parseFloat(literal.literal.text);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconstValue = String((literal.literal as any).text);\n\t\t}\n\n\t\treturn {\n\t\t\tdataType: \"enum\",\n\t\t\tenums: [constValue],\n\t\t} as Tsoa.EnumerateType;\n\t}\n\n\tif (typeNode.kind !== ts.SyntaxKind.TypeReference) {\n\t\tthrow new GenerateMetadataError(`Unknown type: ${ts.SyntaxKind[typeNode.kind]}`);\n\t}\n\n\tconst typeReference = typeNode as ts.TypeReferenceNode;\n\tif (typeReference.typeName.kind === ts.SyntaxKind.Identifier) {\n\t\tif (typeReference.typeName.text === \"Date\") {\n\t\t\treturn getDateType(typeNode, parentNode);\n\t\t}\n\n\t\tif (typeReference.typeName.text === \"Buffer\") {\n\t\t\treturn {dataType: \"buffer\"} as Tsoa.Type;\n\t\t}\n\n\t\tif (typeReference.typeName.text === \"Array\" &&\n\t\t\ttypeReference.typeArguments && typeReference.typeArguments.length === 1) {\n\t\t\treturn {\n\t\t\t\tdataType: \"array\",\n\t\t\t\telementType: resolveType(typeReference.typeArguments[0]),\n\t\t\t} as Tsoa.ArrayType;\n\t\t}\n\n\t\tif (typeReference.typeName.text === \"Promise\" &&\n\t\t\ttypeReference.typeArguments && typeReference.typeArguments.length === 1) {\n\t\t\treturn resolveType(typeReference.typeArguments[0]);\n\t\t}\n\n\t\tif (typeReference.typeName.text === \"String\") {\n\t\t\treturn {dataType: \"string\"} as Tsoa.Type;\n\t\t}\n\t}\n\n\tif (!extractEnum) {\n\t\tconst enumType = getEnumerateType(typeReference.typeName, extractEnum);\n\t\tif (enumType) {\n\t\t\treturn enumType;\n\t\t}\n\t}\n\n\tconst literalType = getLiteralType(typeReference.typeName);\n\tif (literalType) {\n\t\treturn literalType;\n\t}\n\n\tlet referenceType: Tsoa.ReferenceType | Tsoa.ReferenceAlias;\n\tif (typeReference.typeArguments && typeReference.typeArguments.length === 1) {\n\t\tconst typeT: ts.NodeArray<ts.TypeNode> = typeReference.typeArguments as ts.NodeArray<ts.TypeNode>;\n\t\treferenceType = getReferenceType(typeReference.typeName as ts.EntityName, extractEnum, typeT);\n\t} else {\n\t\treferenceType = getReferenceType(typeReference.typeName as ts.EntityName, extractEnum);\n\t}\n\n\tMetadataGenerator.current.AddReferenceType(referenceType);\n\treturn referenceType;\n}\n\nexport function getInitializerValue(initializer?: ts.Expression, type?: Tsoa.Type): any {\n\tif (!initializer) {\n\t\treturn;\n\t}\n\n\tswitch (initializer.kind as ts.SyntaxKind) {\n\t\tcase ts.SyntaxKind.ArrayLiteralExpression:\n\t\t\tconst arrayLiteral = initializer as ts.ArrayLiteralExpression;\n\t\t\treturn arrayLiteral.elements.map((element) => getInitializerValue(element));\n\t\tcase ts.SyntaxKind.StringLiteral:\n\t\t\treturn (initializer as ts.StringLiteral).text;\n\t\tcase ts.SyntaxKind.TrueKeyword:\n\t\t\treturn true;\n\t\tcase ts.SyntaxKind.FalseKeyword:\n\t\t\treturn false;\n\t\tcase ts.SyntaxKind.NumberKeyword:\n\t\tcase ts.SyntaxKind.FirstLiteralToken:\n\t\t\treturn Number((initializer as ts.NumericLiteral).text);\n\t\tcase ts.SyntaxKind.NewExpression:\n\t\t\tconst newExpression = initializer as ts.NewExpression;\n\t\t\tconst ident = newExpression.expression as ts.Identifier;\n\n\t\t\tif (ident.text === \"Date\") {\n\t\t\t\tlet date = new Date();\n\t\t\t\tif (newExpression.arguments) {\n\t\t\t\t\tconst newArguments = newExpression.arguments.filter((args) => args.kind !== undefined);\n\t\t\t\t\tconst argsValue = newArguments.map((args) => getInitializerValue(args));\n\t\t\t\t\tif (argsValue.length > 0) {\n\t\t\t\t\t\tdate = new Date(argsValue as any);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst dateString = date.toISOString();\n\t\t\t\tif (type && type.dataType === \"date\") {\n\t\t\t\t\treturn dateString.split(\"T\")[0];\n\t\t\t\t}\n\t\t\t\treturn dateString;\n\t\t\t}\n\t\t\treturn;\n\t\tcase ts.SyntaxKind.ObjectLiteralExpression:\n\t\t\tconst objectLiteral = initializer as ts.ObjectLiteralExpression;\n\t\t\tconst nestedObject: any = {};\n\t\t\tobjectLiteral.properties.forEach((p: any) => {\n\t\t\t\tnestedObject[p.name.text] = getInitializerValue(p.initializer);\n\t\t\t});\n\t\t\treturn nestedObject;\n\t\tdefault:\n\t\t\treturn;\n\t}\n}\n\nfunction getPrimitiveType(typeNode: ts.TypeNode, parentNode?: ts.Node): Tsoa.Type | undefined {\n\tconst primitiveType = syntaxKindMap[typeNode.kind];\n\tif (!primitiveType) {\n\t\treturn;\n\t}\n\n\tif (primitiveType === \"number\") {\n\t\tif (!parentNode) {\n\t\t\treturn {dataType: \"double\"};\n\t\t}\n\n\t\tconst tags = getJSDocTagNames(parentNode).filter((name) => {\n\t\t\treturn [\"isInt\", \"isLong\", \"isFloat\", \"isDouble\"].some((m) => m === name);\n\t\t});\n\t\tif (tags.length === 0) {\n\t\t\treturn {dataType: \"double\"};\n\t\t}\n\n\t\tswitch (tags[0]) {\n\t\t\tcase \"isInt\":\n\t\t\t\treturn {dataType: \"integer\"};\n\t\t\tcase \"isLong\":\n\t\t\t\treturn {dataType: \"long\"};\n\t\t\tcase \"isFloat\":\n\t\t\t\treturn {dataType: \"float\"};\n\t\t\tcase \"isDouble\":\n\t\t\t\treturn {dataType: \"double\"};\n\t\t\tdefault:\n\t\t\t\treturn {dataType: \"double\"};\n\t\t}\n\t}\n\treturn {dataType: primitiveType} as Tsoa.Type;\n}\n\nfunction getDateType(typeNode: ts.TypeNode, parentNode?: ts.Node): Tsoa.Type {\n\tif (!parentNode) {\n\t\treturn {dataType: \"datetime\"};\n\t}\n\tconst tags = getJSDocTagNames(parentNode).filter((name) => {\n\t\treturn [\"isDate\", \"isDateTime\"].some((m) => m === name);\n\t});\n\n\tif (tags.length === 0) {\n\t\treturn {dataType: \"datetime\"};\n\t}\n\tswitch (tags[0]) {\n\t\tcase \"isDate\":\n\t\t\treturn {dataType: \"date\"};\n\t\tcase \"isDateTime\":\n\t\t\treturn {dataType: \"datetime\"};\n\t\tdefault:\n\t\t\treturn {dataType: \"datetime\"};\n\t}\n}\n\nfunction getAliasType(node: UsableDeclaration): Tsoa.ReferenceAlias | undefined {\n\tif (node.kind !== ts.SyntaxKind.TypeAliasDeclaration) {\n\t\treturn;\n\t}\n\n\tconst aliasDeclaration = node as ts.TypeAliasDeclaration;\n\n\tif (aliasDeclaration.type.kind === ts.SyntaxKind.IntersectionType) {\n\t\treturn;\n\t}\n\n\tif (aliasDeclaration.type.kind === ts.SyntaxKind.TypeReference) {\n\t\t// console.log()\n\t}\n\n\treturn {\n\t\ttype: resolveType(node.type, node.type.parent),\n\t\tdescription: getNodeDescription(node),\n\t\tformat: getNodeFormat(node),\n\t\trefName: node.name.text,\n\t\tvalidators: getPropertyValidators(node as any as ts.PropertyDeclaration),\n\t\tdataType: \"refAlias\",\n\t\texample: getNodeExample(node),\n\t};\n\t// const resolvedType = resolveType(node.type, node.type.parent);\n}\n\nfunction getEnumerateType(typeName: ts.EntityName, extractEnum = true): Tsoa.Type | undefined {\n\tconst enumName = (typeName as ts.Identifier).text;\n\tconst enumNodes = MetadataGenerator.current.nodes\n\t\t.filter((node) => node.kind === ts.SyntaxKind.EnumDeclaration)\n\t\t.filter((node) => (node as any).name.text === enumName);\n\n\tif (!enumNodes.length) {\n\t\treturn;\n\t}\n\tif (enumNodes.length > 1) {\n\t\tthrow new GenerateMetadataError(`Multiple matching enum found for enum ${enumName}; please make enum names unique.`);\n\t}\n\n\tconst enumDeclaration = enumNodes[0] as ts.EnumDeclaration;\n\n\tfunction getEnumValue(member: any) {\n\t\tconst initializer = member.initializer;\n\t\tif (initializer) {\n\t\t\tif (initializer.expression) {\n\t\t\t\treturn initializer.expression.text;\n\t\t\t}\n\t\t\treturn initializer.text;\n\t\t}\n\t\treturn;\n\t}\n\n\tif (extractEnum) {\n\t\tconst enums = enumDeclaration.members.map((member: any, index) => {\n\t\t\treturn getEnumValue(member) || String(index);\n\t\t});\n\t\treturn {\n\t\t\tdataType: \"refEnum\",\n\t\t\tdescription: getNodeDescription(enumDeclaration),\n\t\t\tenums,\n\t\t\trefName: enumName,\n\t\t} as Tsoa.ReferenceType;\n\t} else {\n\t\treturn {\n\t\t\tdataType: \"enum\",\n\t\t\tenums: enumDeclaration.members.map((member: any, index) => {\n\t\t\t\treturn getEnumValue(member) || String(index);\n\t\t\t}),\n\t\t} as Tsoa.EnumerateType;\n\t}\n}\n\nfunction getNodeExample(node: UsableDeclaration | ts.PropertyDeclaration |\n\tts.ParameterDeclaration | ts.EnumDeclaration) {\n\tconst example = getJSDocComment(node, \"example\");\n\n\tif (example) {\n\t\treturn JSON.parse(example);\n\t} else {\n\t\treturn undefined;\n\t}\n}\n\nfunction getNodeSwagger(node: UsableDeclaration | ts.PropertyDeclaration |\n\tts.ParameterDeclaration | ts.EnumDeclaration): Swagger.Schema {\n\tconst swagger = getJSDocComment(node, \"swagger\");\n\n\tif (swagger) {\n\t\treturn JSON.parse(swagger) as Swagger.Schema;\n\t} else {\n\t\treturn undefined;\n\t}\n}\n\nfunction getTypeLiteral(node: UsableDeclaration, parent: ts.Node): Tsoa.ObjectType {\n\t// const name = (parent as any).name.escapedText;\n\n\tconst properties = getModelProperties(node);\n\tconst additionalProperties = getModelAdditionalProperties(node);\n\tconst description = getNodeDescription(node.parent != null ? node.parent : node as any);\n\n\treturn {\n\t\tdataType: \"object\",\n\t\tproperties,\n\t\tadditionalProperties,\n\t\tdescription,\n\t};\n}\n\nfunction getLiteralType(typeName: ts.EntityName): Tsoa.EnumerateType | undefined {\n\tconst literalName = (typeName as ts.Identifier).text;\n\tconst literalTypes = MetadataGenerator.current.nodes\n\t\t.filter((node) => node.kind === ts.SyntaxKind.TypeAliasDeclaration)\n\t\t.filter((node) => {\n\t\t\tconst innerType = (node as any).type;\n\t\t\treturn innerType.kind === ts.SyntaxKind.UnionType && (innerType as any).types;\n\t\t})\n\t\t.filter((node) => (node as any).name.text === literalName);\n\n\tif (!literalTypes.length) {\n\t\treturn;\n\t}\n\tif (literalTypes.length > 1) {\n\t\tthrow new GenerateMetadataError(\n\t\t\t`Multiple matching enum found for enum ${literalName}; please make enum names unique.`);\n\t}\n\n\tconst unionTypes = (literalTypes[0] as any).type.types;\n\treturn {\n\t\tdataType: \"enum\",\n\t\tenums: unionTypes.map((unionNode: any) => unionNode.literal.text as string),\n\t} as Tsoa.EnumerateType;\n}\n\nfunction getReferenceType(type: ts.EntityName, extractEnum = true,\n\t\t\t\t\t\t  genericTypes?: ts.NodeArray<ts.TypeNode>): Tsoa.ReferenceType | Tsoa.ReferenceAlias {\n\tconst typeName = resolveFqTypeName(type);\n\tconst refNameWithGenerics = getTypeName(typeName, genericTypes);\n\n\ttry {\n\t\tconst existingType = localReferenceTypeCache[refNameWithGenerics];\n\t\tif (existingType) {\n\t\t\treturn existingType;\n\t\t}\n\n\t\tconst referenceEnumType = getEnumerateType(type, true) as Tsoa.ReferenceType;\n\t\tif (referenceEnumType) {\n\t\t\tlocalReferenceTypeCache[refNameWithGenerics] = referenceEnumType;\n\t\t\treturn referenceEnumType;\n\t\t}\n\n\t\tif (inProgressTypes[refNameWithGenerics]) {\n\t\t\treturn createCircularDependencyResolver(refNameWithGenerics);\n\t\t}\n\n\t\tinProgressTypes[refNameWithGenerics] = true;\n\n\t\tconst modelType = getModelTypeDeclaration(type);\n\n\t\tconst referenceAliasType = getAliasType(modelType);\n\t\tif (referenceAliasType) {\n\t\t\tlocalReferenceTypeCache[refNameWithGenerics] = referenceAliasType;\n\t\t\treturn referenceAliasType;\n\t\t}\n\n\t\tconst properties = getModelProperties(modelType, genericTypes);\n\t\tconst additionalProperties = getModelAdditionalProperties(modelType);\n\t\tconst inheritedProperties = getModelInheritedProperties(modelType) || [];\n\t\tconst example = getNodeExample(modelType);\n\t\tconst additionalSwagger = getNodeSwagger(modelType);\n\n\t\tconst referenceType = {\n\t\t\tadditionalProperties,\n\t\t\tdataType: \"refObject\",\n\t\t\tdescription: getNodeDescription(modelType),\n\t\t\tproperties: inheritedProperties,\n\t\t\trefName: refNameWithGenerics,\n\t\t} as Tsoa.ReferenceType;\n\n\t\treferenceType.properties = (referenceType.properties as Tsoa.Property[]).concat(properties);\n\t\tlocalReferenceTypeCache[refNameWithGenerics] = referenceType;\n\n\t\tif (example) {\n\t\t\treferenceType.example = example;\n\t\t}\n\n\t\tif (additionalSwagger) {\n\t\t\treferenceType.additionalSwagger = additionalSwagger;\n\t\t}\n\n\t\treturn referenceType;\n\t} catch (err) {\n\t\t// tslint:disable-next-line:no-console;\n\t\terr.message = `There was a problem resolving type of '${getTypeName(typeName, genericTypes)}'.\\n` + err.message;\n\t\tthrow err;\n\t}\n}\n\nfunction resolveFqTypeName(type: ts.EntityName): string {\n\tif (type.kind === ts.SyntaxKind.Identifier) {\n\t\treturn (type as ts.Identifier).text;\n\t}\n\n\tconst qualifiedType = type as ts.QualifiedName;\n\treturn resolveFqTypeName(qualifiedType.left) + \".\" + (qualifiedType.right as ts.Identifier).text;\n}\n\nfunction getTypeName(typeName: string, genericTypes?: ts.NodeArray<ts.TypeNode>): string {\n\tif (!genericTypes || !genericTypes.length) {\n\t\treturn typeName;\n\t}\n\treturn typeName + genericTypes.map((t) => getAnyTypeName(t)).join(\"\");\n}\n\nfunction getAnyTypeName(typeNode: ts.TypeNode): string {\n\tconst primitiveType = syntaxKindMap[typeNode.kind];\n\tif (primitiveType) {\n\t\treturn primitiveType;\n\t}\n\n\tif (typeNode.kind === ts.SyntaxKind.ArrayType) {\n\t\tconst arrayType = typeNode as ts.ArrayTypeNode;\n\t\treturn getAnyTypeName(arrayType.elementType) + \"Array\";\n\t}\n\n\tif (typeNode.kind === ts.SyntaxKind.UnionType) {\n\t\treturn \"object\";\n\t}\n\n\tif (typeNode.kind === ts.SyntaxKind.TypeLiteral) {\n\t\treturn \"object\";\n\t}\n\n\tif (typeNode.kind !== ts.SyntaxKind.TypeReference) {\n\t\tthrow new GenerateMetadataError(`Unknown type: ${ts.SyntaxKind[typeNode.kind]}.`);\n\t}\n\n\tconst typeReference = typeNode as ts.TypeReferenceNode;\n\ttry {\n\t\treturn (typeReference.typeName as ts.Identifier).text;\n\t} catch (e) {\n\t\t// idk what would hit this? probably needs more testing\n\t\t// tslint:disable-next-line:no-console\n\t\tconsole.error(e);\n\t\treturn typeNode.toString();\n\t}\n\n}\n\nfunction createCircularDependencyResolver(refName: string) {\n\tconst referenceType = {\n\t\tdataType: \"refObject\",\n\t\trefName,\n\t} as Tsoa.ReferenceType | Tsoa.ReferenceAlias;\n\n\tMetadataGenerator.current.OnFinish((referenceTypes) => {\n\t\tconst realReferenceType = referenceTypes[refName];\n\t\tif (!realReferenceType) {\n\t\t\treturn;\n\t\t}\n\t\treferenceType.description = realReferenceType.description;\n\t\treferenceType.dataType = realReferenceType.dataType as any;\n\t\treferenceType.refName = referenceType.refName;\n\n\t\tif (referenceType.dataType === \"refAlias\" && realReferenceType.dataType === \"refAlias\") {\n\t\t\treferenceType.validators = realReferenceType.validators;\n\t\t\treferenceType.example = realReferenceType.example;\n\t\t\treferenceType.format = realReferenceType.format;\n\t\t\treferenceType.type = realReferenceType.type;\n\t\t} else {\n\t\t\treferenceType.properties = realReferenceType.properties;\n\t\t}\n\t});\n\n\treturn referenceType;\n}\n\nfunction nodeIsUsable(node: ts.Node) {\n\tswitch (node.kind) {\n\t\tcase ts.SyntaxKind.InterfaceDeclaration:\n\t\tcase ts.SyntaxKind.ClassDeclaration:\n\t\tcase ts.SyntaxKind.TypeAliasDeclaration:\n\t\tcase ts.SyntaxKind.EnumDeclaration:\n\t\t\treturn true;\n\t\tdefault:\n\t\t\treturn false;\n\t}\n}\n\nfunction resolveLeftmostIdentifier(type: ts.EntityName): ts.Identifier {\n\twhile (type.kind !== ts.SyntaxKind.Identifier) {\n\t\ttype = (type as ts.QualifiedName).left;\n\t}\n\treturn type as ts.Identifier;\n}\n\nfunction resolveModelTypeScope(leftmost: ts.EntityName, statements: any): any[] {\n\twhile (leftmost.parent && leftmost.parent.kind === ts.SyntaxKind.QualifiedName) {\n\t\tconst leftmostName = leftmost.kind === ts.SyntaxKind.Identifier\n\t\t\t? (leftmost as ts.Identifier).text\n\t\t\t: (leftmost as ts.QualifiedName).right.text;\n\t\tconst moduleDeclarations = statements\n\t\t\t.filter((node: any) => {\n\t\t\t\tif (node.kind !== ts.SyntaxKind.ModuleDeclaration || !MetadataGenerator.current.IsExportedNode(node)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tconst moduleDeclaration = node as ts.ModuleDeclaration;\n\t\t\t\treturn (moduleDeclaration.name as ts.Identifier).text.toLowerCase() === leftmostName.toLowerCase();\n\t\t\t}) as ts.ModuleDeclaration[];\n\n\t\tif (!moduleDeclarations.length) {\n\t\t\tthrow new GenerateMetadataError(`No matching module declarations found for ${leftmostName}.`);\n\t\t}\n\t\tif (moduleDeclarations.length > 1) {\n\t\t\tthrow new GenerateMetadataError(\n\t\t\t\t`Multiple matching module declarations found for ${leftmostName}; please make module declarations unique.`);\n\t\t}\n\n\t\tconst moduleBlock = moduleDeclarations[0].body as ts.ModuleBlock;\n\t\tif (moduleBlock === null || moduleBlock.kind !== ts.SyntaxKind.ModuleBlock) {\n\t\t\tthrow new GenerateMetadataError(`Module declaration found for ${leftmostName} has no body.`);\n\t\t}\n\n\t\tstatements = moduleBlock.statements;\n\t\tleftmost = leftmost.parent as ts.EntityName;\n\t}\n\n\treturn statements;\n}\n\nfunction getModelTypeDeclaration(type: ts.EntityName) {\n\tconst leftmostIdentifier = resolveLeftmostIdentifier(type);\n\tconst statements: any[] = resolveModelTypeScope(leftmostIdentifier, MetadataGenerator.current.nodes);\n\n\tconst typeName = type.kind === ts.SyntaxKind.Identifier\n\t\t? (type as ts.Identifier).text\n\t\t: (type as ts.QualifiedName).right.text;\n\n\tlet modelTypes = statements\n\t\t.filter((node) => {\n\t\t\tif (!nodeIsUsable(node) || !MetadataGenerator.current.IsExportedNode(node)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst modelTypeDeclaration = node;\n\t\t\treturn (modelTypeDeclaration.name as ts.Identifier).text === typeName;\n\t\t}) as UsableDeclaration[];\n\n\tif (!modelTypes.length) {\n\t\tthrow new GenerateMetadataError(`No matching model found for referenced type ${typeName}.`);\n\t}\n\n\tif (modelTypes.length > 1) {\n\t\t// remove types that are from typescript e.g. 'Account'\n\t\tmodelTypes = modelTypes.filter((modelType) => {\n\t\t\tif (modelType.getSourceFile().fileName.replace(/\\\\/g, \"/\").toLowerCase().indexOf(\"node_modules/typescript\") > -1) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t});\n\n\t\t/**\n\t\t * Model is marked with '@tsoaModel', indicating that it should be the 'canonical' model used\n\t\t */\n\t\tconst designatedModels = modelTypes.filter((modelType) => {\n\t\t\tconst isDesignatedModel = isExistJSDocTag(modelType, (tag) => tag.tagName.text === \"tsoaModel\");\n\t\t\treturn isDesignatedModel;\n\t\t});\n\n\t\tif (designatedModels.length > 0) {\n\t\t\tif (designatedModels.length > 1) {\n\t\t\t\tthrow new GenerateMetadataError(\n\t\t\t\t\t`Multiple models for ${typeName} marked with '@tsoaModel'; '@tsoaModel' should only be applied to one model.`);\n\t\t\t}\n\n\t\t\tmodelTypes = designatedModels;\n\t\t}\n\t}\n\tif (modelTypes.length > 1) {\n\t\tconst conflicts = modelTypes.map((modelType) => modelType.getSourceFile().fileName).join('\"; \"');\n\t\tthrow new GenerateMetadataError(\n\t\t\t`Multiple matching models found for referenced type ${typeName};\n\t\t\t please make model names unique. Conflicts found: \"${conflicts}\".`);\n\t}\n\n\treturn modelTypes[0];\n}\n\nfunction getModelProperties(node: UsableDeclaration, genericTypes?: ts.NodeArray<ts.TypeNode>): Tsoa.Property[] {\n\tconst isIgnored = (e: ts.TypeElement | ts.ClassElement) => {\n\t\tconst ignore = isExistJSDocTag(e, (tag) => tag.tagName.text === \"ignore\");\n\t\treturn ignore;\n\t};\n\n\t// Interface model\n\tif (node.kind === ts.SyntaxKind.InterfaceDeclaration || node.kind === ts.SyntaxKind.TypeLiteral) {\n\t\tconst interfaceDeclaration = node as ts.InterfaceDeclaration;\n\t\treturn interfaceDeclaration.members\n\t\t\t.filter((member) => {\n\t\t\t\tconst ignore = isIgnored(member);\n\t\t\t\treturn !ignore && member.kind === ts.SyntaxKind.PropertySignature;\n\t\t\t})\n\t\t\t.map((member: any) => {\n\t\t\t\tconst propertyDeclaration = member as ts.PropertyDeclaration;\n\t\t\t\tconst identifier = propertyDeclaration.name as ts.Identifier;\n\n\t\t\t\tif (!propertyDeclaration.type) {\n\t\t\t\t\tthrow new GenerateMetadataError(`No valid type found for property declaration.`);\n\t\t\t\t}\n\n\t\t\t\t// Declare a variable that can be overridden if needed\n\t\t\t\tlet aType = propertyDeclaration.type;\n\n\t\t\t\t// aType.kind will always be a TypeReference when the property of Interface<T> is of type T\n\t\t\t\tif (aType.kind === ts.SyntaxKind.TypeReference && genericTypes && genericTypes.length\n\t\t\t\t\t&& (node as ts.InterfaceDeclaration).typeParameters) {\n\n\t\t\t\t\t// The type definitions are conviently located on the object which allow us to map -> to the genericTypes\n\t\t\t\t\tconst typeParams = map((node as ts.InterfaceDeclaration).typeParameters,\n\t\t\t\t\t\t(typeParam: ts.TypeParameterDeclaration) => {\n\t\t\t\t\t\treturn typeParam.name.text;\n\t\t\t\t\t});\n\n\t\t\t\t\t// I am not sure in what cases\n\t\t\t\t\tconst typeIdentifier = (aType as ts.TypeReferenceNode).typeName;\n\t\t\t\t\tlet typeIdentifierName: string;\n\n\t\t\t\t\t// typeIdentifier can either be a Identifier or a QualifiedName\n\t\t\t\t\tif ((typeIdentifier as ts.Identifier).text) {\n\t\t\t\t\t\ttypeIdentifierName = (typeIdentifier as ts.Identifier).text;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttypeIdentifierName = (typeIdentifier as ts.QualifiedName).right.text;\n\t\t\t\t\t}\n\n\t\t\t\t\t// I could not produce a situation where this did not find it so its possible this check is irrelevant\n\t\t\t\t\tconst indexOfType = indexOf(typeParams, typeIdentifierName);\n\t\t\t\t\tif (indexOfType >= 0) {\n\t\t\t\t\t\taType = genericTypes[indexOfType] as ts.TypeNode;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// console.log(resolveType(aType, aType.parent));\n\t\t\t\treturn {\n\t\t\t\t\tdescription: getNodeDescription(propertyDeclaration),\n\t\t\t\t\tformat: getNodeFormat(propertyDeclaration),\n\t\t\t\t\tname: identifier.text,\n\t\t\t\t\trequired: !propertyDeclaration.questionToken,\n\t\t\t\t\ttype: resolveType(aType, aType.parent),\n\t\t\t\t\tvalidators: getPropertyValidators(propertyDeclaration),\n\t\t\t\t} as Tsoa.Property;\n\t\t\t});\n\t}\n\n\t// Type alias model\n\tif (node.kind === ts.SyntaxKind.TypeAliasDeclaration) {\n\t\tconst aliasDeclaration = node as ts.TypeAliasDeclaration;\n\t\t/* tslint:disable-next-line */\n\t\tconst properties: Tsoa.Property[] = [];\n\n\t\tif (aliasDeclaration.type.kind === ts.SyntaxKind.IntersectionType) {\n\t\t\tconst intersectionTypeNode = aliasDeclaration.type as ts.IntersectionTypeNode;\n\n\t\t\tintersectionTypeNode.types.forEach((type) => {\n\t\t\t\tif (type.kind === ts.SyntaxKind.TypeReference) {\n\t\t\t\t\tconst typeReferenceNode = type as ts.TypeReferenceNode;\n\t\t\t\t\tconst modelType = getModelTypeDeclaration(typeReferenceNode.typeName);\n\t\t\t\t\tconst modelProps = getModelProperties(modelType);\n\t\t\t\t\tproperties.push(...modelProps);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (aliasDeclaration.type.kind === ts.SyntaxKind.TypeReference) {\n\t\t\tconst typeReferenceNode = aliasDeclaration.type as ts.TypeReferenceNode;\n\t\t\tconst modelType = getModelTypeDeclaration(typeReferenceNode.typeName);\n\t\t\tconst modelProps = getModelProperties(modelType);\n\t\t\tproperties.push(...modelProps);\n\t\t}\n\t\treturn properties;\n\t}\n\n\t// Class model\n\tconst classDeclaration = node as ts.ClassDeclaration;\n\n\tconst properties = classDeclaration.members\n\t\t.filter((member) => {\n\t\t\tif (member.kind === ts.SyntaxKind.MethodDeclaration) {\n\t\t\t\tthrow new GenerateMetadataError(`Illegal method declaration on model class`);\n\t\t\t} else {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t})\n\t\t.filter((member) => {\n\t\t\tconst ignore = isIgnored(member);\n\t\t\treturn !ignore;\n\t\t})\n\t\t.filter((member) => member.kind === ts.SyntaxKind.PropertyDeclaration)\n\t\t.filter((member) => hasPublicModifier(member)) as Array<ts.PropertyDeclaration | ts.ParameterDeclaration>;\n\n\tconst classConstructor = classDeclaration\n\t\t.members\n\t\t.find((member) => member.kind === ts.SyntaxKind.Constructor) as ts.ConstructorDeclaration;\n\n\tif (classConstructor && classConstructor.parameters) {\n\t\tconst constructorProperties = classConstructor.parameters\n\t\t\t.filter((parameter) => hasPublicModifier(parameter));\n\n\t\tproperties.push(...constructorProperties);\n\t}\n\n\treturn properties\n\t\t.map((property) => {\n\t\t\tconst identifier = property.name as ts.Identifier;\n\t\t\tlet typeNode = property.type;\n\n\t\t\tif (!typeNode) {\n\t\t\t\tconst tsType = MetadataGenerator.current.typeChecker.getTypeAtLocation(property);\n\t\t\t\ttypeNode = MetadataGenerator.current.typeChecker.typeToTypeNode(tsType);\n\t\t\t}\n\n\t\t\tif (!typeNode) {\n\t\t\t\tthrow new GenerateMetadataError(`No valid type found for property declaration.`);\n\t\t\t}\n\n\t\t\tif (typeNode.kind === ts.SyntaxKind.TypeReference && genericTypes && genericTypes.length\n\t\t\t\t&& (node as ts.ClassDeclaration).typeParameters) {\n\n\t\t\t\t// The type definitions are conviently located on the object which allow us to map -> to the genericTypes\n\t\t\t\tconst typeParams = map((node as ts.ClassDeclaration).typeParameters,\n\t\t\t\t\t(typeParam: ts.TypeParameterDeclaration) => {\n\t\t\t\t\t\treturn typeParam.name.text;\n\t\t\t\t\t});\n\n\t\t\t\t// I am not sure in what cases\n\t\t\t\tconst typeIdentifier = (typeNode as ts.TypeReferenceNode).typeName;\n\t\t\t\tlet typeIdentifierName: string;\n\n\t\t\t\t// typeIdentifier can either be a Identifier or a QualifiedName\n\t\t\t\tif ((typeIdentifier as ts.Identifier).text) {\n\t\t\t\t\ttypeIdentifierName = (typeIdentifier as ts.Identifier).text;\n\t\t\t\t} else {\n\t\t\t\t\ttypeIdentifierName = (typeIdentifier as ts.QualifiedName).right.text;\n\t\t\t\t}\n\n\t\t\t\t// I could not produce a situation where this did not find it so its possible this check is irrelevant\n\t\t\t\tconst indexOfType = indexOf(typeParams, typeIdentifierName);\n\t\t\t\tif (indexOfType >= 0) {\n\t\t\t\t\ttypeNode = genericTypes[indexOfType] as ts.TypeNode;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst type = resolveType(typeNode, property);\n\n\t\t\t// console.log(type);\n\t\t\treturn {\n\t\t\t\tdefault: getInitializerValue(property.initializer, type),\n\t\t\t\tdescription: getNodeDescription(property),\n\t\t\t\tformat: getNodeFormat(property),\n\t\t\t\tname: identifier.text,\n\t\t\t\trequired: !property.questionToken && !property.initializer,\n\t\t\t\ttype,\n\t\t\t\tvalidators: getPropertyValidators(property as ts.PropertyDeclaration),\n\t\t\t} as Tsoa.Property;\n\t\t});\n}\n\nfunction getModelAdditionalProperties(node: UsableDeclaration) {\n\tif (node.kind === ts.SyntaxKind.InterfaceDeclaration) {\n\t\tconst interfaceDeclaration = node as ts.InterfaceDeclaration;\n\t\tconst indexMember = interfaceDeclaration\n\t\t\t.members\n\t\t\t.find((member) => member.kind === ts.SyntaxKind.IndexSignature);\n\t\tif (!indexMember) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst indexSignatureDeclaration = indexMember as ts.IndexSignatureDeclaration;\n\t\tconst indexType = resolveType(indexSignatureDeclaration.parameters[0].type as ts.TypeNode);\n\t\tif (indexType.dataType !== \"string\") {\n\t\t\tthrow new GenerateMetadataError(`Only string indexers are supported.`);\n\t\t}\n\n\t\treturn resolveType(indexSignatureDeclaration.type as ts.TypeNode);\n\t}\n\n\treturn undefined;\n}\n\nfunction getModelInheritedProperties(modelTypeDeclaration: UsableDeclaration): Tsoa.Property[] {\n\tconst properties = [] as Tsoa.Property[];\n\tif (modelTypeDeclaration.kind === ts.SyntaxKind.TypeAliasDeclaration) {\n\t\treturn [];\n\t}\n\tif (modelTypeDeclaration.kind === ts.SyntaxKind.TypeLiteral) {\n\t\treturn [];\n\t}\n\tconst heritageClauses = modelTypeDeclaration.heritageClauses;\n\tif (!heritageClauses) {\n\t\treturn properties;\n\t}\n\n\theritageClauses.forEach((clause) => {\n\t\tif (!clause.types) {\n\t\t\treturn;\n\t\t}\n\n\t\tclause.types.forEach((t) => {\n\t\t\tconst baseEntityName = t.expression as ts.EntityName;\n\t\t\tconst referenceType = getReferenceType(baseEntityName);\n\t\t\tif (referenceType.properties) {\n\t\t\t\treferenceType.properties.forEach((property) => properties.push(property));\n\t\t\t}\n\t\t});\n\t});\n\n\treturn properties;\n}\n\nfunction hasPublicModifier(node: ts.Node) {\n\treturn !node.modifiers || node.modifiers.every((modifier) => {\n\t\treturn modifier.kind !== ts.SyntaxKind.ProtectedKeyword && modifier.kind !== ts.SyntaxKind.PrivateKeyword;\n\t});\n}\n\nfunction getNodeDescription(node: UsableDeclaration | ts.PropertyDeclaration |\n\tts.ParameterDeclaration | ts.EnumDeclaration) {\n\tif (node.kind === ts.SyntaxKind.TypeLiteral) {\n\t\treturn undefined;\n\t}\n\tconst symbol = MetadataGenerator.current.typeChecker.getSymbolAtLocation(node.name as ts.Node);\n\tif (!symbol) {\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * TODO: Workaround for what seems like a bug in the compiler\n\t * Warrants more investigation and possibly a PR against typescript\n\t */\n\tif (node.kind === ts.SyntaxKind.Parameter) {\n\t\t// TypeScript won't parse jsdoc if the flag is 4, i.e. 'Property'\n\t\tsymbol.flags = 0;\n\t}\n\n\tconst comments = symbol.getDocumentationComment(undefined);\n\tif (comments.length) {\n\t\treturn ts.displayPartsToString(comments);\n\t}\n\n\treturn undefined;\n}\n\nfunction getNodeFormat(node: UsableDeclaration | ts.PropertyDeclaration |\n\tts.ParameterDeclaration | ts.EnumDeclaration) {\n\treturn getJSDocComment(node, \"format\");\n}\n","import * as ts from \"typescript\";\nimport {getInitializerValue} from \"../metadataGeneration/resolveType\";\n\nexport function getDecorators(node: ts.Node, isMatching: (identifier: ts.Identifier) => boolean) {\n\tconst decorators = node.decorators;\n\tif (!decorators || !decorators.length) {\n\t\treturn [];\n\t}\n\n\treturn decorators\n\t\t.map((e: any) => {\n\t\t\twhile (e.expression !== undefined) {\n\t\t\t\te = e.expression;\n\t\t\t}\n\n\t\t\treturn e as ts.Identifier;\n\t\t})\n\t\t.filter(isMatching);\n}\n\nexport function getDecoratorName(node: ts.Node, isMatching: (identifier: ts.Identifier) => boolean) {\n\tconst decorators = getDecorators(node, isMatching);\n\tif (!decorators || !decorators.length) {\n\t\treturn;\n\t}\n\n\treturn decorators[0].text;\n}\n\nexport function getDecoratorTextValue(node: ts.Node, isMatching: (identifier: ts.Identifier) => boolean) {\n\tconst decorators = getDecorators(node, isMatching);\n\tif (!decorators || !decorators.length) {\n\t\treturn;\n\t}\n\n\tconst expression = decorators[0].parent as ts.CallExpression;\n\tconst expArguments = expression.arguments;\n\tif (!expArguments || !expArguments.length) {\n\t\treturn;\n\t}\n\treturn (expArguments[0] as ts.StringLiteral).text;\n}\n\nexport function getDecoratorOptionValue(node: ts.Node, isMatching: (identifier: ts.Identifier) => boolean) {\n\tconst decorators = getDecorators(node, isMatching);\n\tif (!decorators || !decorators.length) {\n\t\treturn;\n\t}\n\n\tconst expression = decorators[0].parent as ts.CallExpression;\n\tconst expArguments = expression.arguments;\n\tif (!expArguments || !expArguments.length) {\n\t\treturn;\n\t}\n\treturn getInitializerValue(expArguments[0] as any);\n}\n\nexport function isDecorator(node: ts.Node, isMatching: (identifier: ts.Identifier) => boolean) {\n\tconst decorators = getDecorators(node, isMatching);\n\tif (!decorators || !decorators.length) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n","import * as ts from \"typescript\";\nimport {getDecoratorName, getDecoratorTextValue} from \"../utils/decoratorUtils\";\nimport {getParameterValidators} from \"../utils/validatorUtils\";\nimport {GenerateMetadataError} from \"./exceptions\";\nimport {MetadataGenerator} from \"./metadataGenerator\";\nimport {getInitializerValue, resolveType} from \"./resolveType\";\nimport {Tsoa} from \"./tsoa\";\nimport {merge} from \"lodash\";\n\nexport class ParameterGenerator {\n\tconstructor(\n\t\tprivate readonly parameter: ts.ParameterDeclaration,\n\t\tprivate readonly method: string,\n\t\tprivate readonly path: string,\n\t) {\n\t}\n\n\tpublic Generate(): Tsoa.Parameter {\n\t\tconst decoratorName = getDecoratorName(this.parameter,\n\t\t\t(identifier) => this.supportParameterDecorator(identifier.text));\n\n\t\tswitch (decoratorName) {\n\t\t\tcase \"Logger\":\n\t\t\t\treturn this.getLoggerParameter(this.parameter);\n\t\t\tcase \"Request\":\n\t\t\t\treturn this.getRequestParameter(this.parameter);\n\t\t\tcase \"Body\":\n\t\t\t\treturn this.getBodyParameter(this.parameter);\n\t\t\tcase \"BodyProp\":\n\t\t\t\treturn this.getBodyPropParameter(this.parameter);\n\t\t\tcase \"Header\":\n\t\t\t\treturn this.getHeaderParameter(this.parameter);\n\t\t\tcase \"Query\":\n\t\t\t\treturn this.getQueryParameter(this.parameter);\n\t\t\tcase \"Path\":\n\t\t\t\treturn this.getPathParameter(this.parameter);\n\t\t\tdefault:\n\t\t\t\treturn this.getPathParameter(this.parameter);\n\t\t}\n\t}\n\n\tprivate getRequestParameter(parameter: ts.ParameterDeclaration): Tsoa.Parameter {\n\t\tconst parameterName = (parameter.name as ts.Identifier).text;\n\t\treturn {\n\t\t\tdescription: this.getParameterDescription(parameter),\n\t\t\tin: \"request\",\n\t\t\tname: parameterName,\n\t\t\tparameterName,\n\t\t\trequired: !parameter.questionToken && !parameter.initializer,\n\t\t\ttype: {dataType: \"object\"},\n\t\t\tvalidators: getParameterValidators(this.parameter, parameterName),\n\t\t};\n\t}\n\n\tprivate getLoggerParameter(parameter: ts.ParameterDeclaration): Tsoa.Parameter {\n\t\tconst parameterName = (parameter.name as ts.Identifier).text;\n\t\treturn {\n\t\t\tdescription: \"\",\n\t\t\tin: \"logger\",\n\t\t\tname: parameterName,\n\t\t\tparameterName,\n\t\t\trequired: true,\n\t\t\ttype: {dataType: \"object\"},\n\t\t\tvalidators: {},\n\t\t};\n\t}\n\n\tprivate getBodyPropParameter(parameter: ts.ParameterDeclaration): Tsoa.Parameter {\n\t\tconst parameterName = (parameter.name as ts.Identifier).text;\n\t\tconst type = this.getValidatedType(parameter);\n\n\t\tif (!this.supportBodyMethod(this.method)) {\n\t\t\tthrow new GenerateMetadataError(\n\t\t\t\t`@BodyProp('${parameterName}') Can't support in ${this.method.toUpperCase()} method.`);\n\t\t}\n\n\t\treturn {\n\t\t\tdefault: getInitializerValue(parameter.initializer, type),\n\t\t\tdescription: this.getParameterDescription(parameter),\n\t\t\tin: \"body-prop\",\n\t\t\tname: getDecoratorTextValue(this.parameter, (ident) => ident.text === \"BodyProp\") || parameterName,\n\t\t\tparameterName,\n\t\t\trequired: !parameter.questionToken && !parameter.initializer,\n\t\t\ttype,\n\t\t\tvalidators: getParameterValidators(this.parameter, parameterName),\n\t\t};\n\t}\n\n\tprivate getBodyParameter(parameter: ts.ParameterDeclaration): Tsoa.Parameter {\n\t\tconst parameterName = (parameter.name as ts.Identifier).text;\n\t\tconst type = this.getValidatedType(parameter);\n\n\t\tif (!this.supportBodyMethod(this.method)) {\n\t\t\tthrow new GenerateMetadataError(\n\t\t\t\t`@Body('${parameterName}') Can't support in ${this.method.toUpperCase()} method.`);\n\t\t}\n\n\t\treturn {\n\t\t\tdescription: this.getParameterDescription(parameter),\n\t\t\tin: \"body\",\n\t\t\tname: parameterName,\n\t\t\tparameterName,\n\t\t\trequired: !parameter.questionToken && !parameter.initializer,\n\t\t\ttype,\n\t\t\tvalidators: getParameterValidators(this.parameter, parameterName),\n\t\t};\n\t}\n\n\tprivate getHeaderParameter(parameter: ts.ParameterDeclaration): Tsoa.Parameter {\n\t\tconst parameterName = (parameter.name as ts.Identifier).text;\n\t\tlet type = this.getValidatedType(parameter, false);\n\t\tlet alias: Tsoa.ReferenceAlias = null;\n\n\t\tif (type.dataType === \"refAlias\") {\n\t\t\talias = type as Tsoa.ReferenceAlias;\n\t\t\ttype = alias.type;\n\t\t}\n\n\t\tif (!this.supportPathDataType(type)) {\n\t\t\tthrow new GenerateMetadataError(`@Header('${parameterName}') Can't support '${type.dataType}' type.`);\n\t\t}\n\n\t\treturn {\n\t\t\tdefault: getInitializerValue(parameter.initializer, type),\n\t\t\tdescription: this.getParameterDescription(parameter) || ((alias != null) ? alias.description : undefined),\n\t\t\tin: \"header\",\n\t\t\tname: getDecoratorTextValue(this.parameter, (ident) => ident.text === \"Header\") || parameterName,\n\t\t\tparameterName,\n\t\t\trequired: !parameter.questionToken && !parameter.initializer,\n\t\t\ttype,\n\t\t\tvalidators: (alias != null) ? merge({}, alias.validators, getParameterValidators(this.parameter, parameterName))\n\t\t\t\t: getParameterValidators(this.parameter, parameterName),\n\t\t};\n\t}\n\n\tprivate getQueryParameter(parameter: ts.ParameterDeclaration): Tsoa.Parameter {\n\t\tconst parameterName = (parameter.name as ts.Identifier).text;\n\t\tlet type = this.getValidatedType(parameter, false);\n\t\tlet alias: Tsoa.ReferenceAlias = null;\n\n\t\tif (type.dataType === \"refAlias\") {\n\t\t\talias = type as Tsoa.ReferenceAlias;\n\t\t\ttype = alias.type;\n\t\t}\n\n\t\tif (type.dataType === \"array\") {\n\t\t\tconst arrayType = type as Tsoa.ArrayType;\n\n\t\t\tif (!this.supportPathDataType(arrayType.elementType)) {\n\t\t\t\tthrow new GenerateMetadataError(\n\t\t\t\t\t`@Query('${parameterName}') Can't support array '${arrayType.elementType.dataType}' type.`);\n\t\t\t}\n\t\t} else {\n\t\t\tif (!this.supportPathDataType(type)) {\n\t\t\t\tthrow new GenerateMetadataError(`@Query('${parameterName}') Can't support '${type.dataType}' type.`);\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tdefault: getInitializerValue(parameter.initializer, type),\n\t\t\tdescription: this.getParameterDescription(parameter) || ((alias != null) ? alias.description : undefined),\n\t\t\tin: \"query\",\n\t\t\tname: getDecoratorTextValue(this.parameter, (ident) => ident.text === \"Query\") || parameterName,\n\t\t\tparameterName,\n\t\t\trequired: !parameter.questionToken && !parameter.initializer,\n\t\t\ttype,\n\t\t\tvalidators: (alias != null) ? merge({}, alias.validators, getParameterValidators(this.parameter, parameterName))\n\t\t\t\t: getParameterValidators(this.parameter, parameterName),\n\t\t};\n\t}\n\n\tprivate getPathParameter(parameter: ts.ParameterDeclaration): Tsoa.Parameter {\n\t\tconst parameterName = (parameter.name as ts.Identifier).text;\n\t\tlet type = this.getValidatedType(parameter, false);\n\t\tconst pathName = getDecoratorTextValue(this.parameter, (ident) => ident.text === \"Path\") || parameterName;\n\t\tlet alias: Tsoa.ReferenceAlias = null;\n\n\t\tif (type.dataType === \"refAlias\") {\n\t\t\talias = type as Tsoa.ReferenceAlias;\n\t\t\ttype = alias.type;\n\t\t}\n\n\t\tif (!this.supportPathDataType(type)) {\n\t\t\tthrow new GenerateMetadataError(`@Path('${parameterName}') Can't support '${type.dataType}' type.`);\n\t\t}\n\t\tif (!this.path.includes(`{${pathName}}`)) {\n\t\t\tthrow new GenerateMetadataError(`@Path('${parameterName}') Can't match in URL: '${this.path}'.`);\n\t\t}\n\n\t\treturn {\n\t\t\tdefault: getInitializerValue(parameter.initializer, type),\n\t\t\tdescription: this.getParameterDescription(parameter) || ((alias != null) ? alias.description : undefined),\n\t\t\tin: \"path\",\n\t\t\tname: pathName,\n\t\t\tparameterName,\n\t\t\trequired: true,\n\t\t\ttype,\n\t\t\tvalidators: (alias != null) ? merge({}, alias.validators, getParameterValidators(this.parameter, parameterName))\n\t\t\t\t: getParameterValidators(this.parameter, parameterName),\n\t\t};\n\t}\n\n\tprivate getParameterDescription(node: ts.ParameterDeclaration) {\n\t\tconst symbol = MetadataGenerator.current.typeChecker.getSymbolAtLocation(node.name);\n\t\tif (!symbol) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst comments = symbol.getDocumentationComment(undefined);\n\t\tif (comments.length) {\n\t\t\treturn ts.displayPartsToString(comments);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate supportBodyMethod(method: string) {\n\t\treturn [\"post\", \"put\", \"patch\"].some((m) => m === method.toLowerCase());\n\t}\n\n\tprivate supportParameterDecorator(decoratorName: string) {\n\t\treturn [\"header\", \"query\", \"parem\", \"body\", \"bodyprop\", \"request\", \"logger\"]\n\t\t\t.some((d) => d === decoratorName.toLocaleLowerCase());\n\t}\n\n\tprivate supportPathDataType(parameterType: Tsoa.Type) {\n\t\treturn [\"string\", \"integer\", \"long\", \"float\", \"double\", \"date\",\n\t\t\t\"datetime\", \"buffer\", \"boolean\", \"enum\", \"any\"].find((t) => t === parameterType.dataType);\n\t}\n\n\tprivate getValidatedType(parameter: ts.ParameterDeclaration, extractEnum = true) {\n\t\tlet typeNode = parameter.type;\n\t\tif (!typeNode) {\n\t\t\tconst type = MetadataGenerator.current.typeChecker.getTypeAtLocation(parameter);\n\t\t\ttypeNode = MetadataGenerator.current.typeChecker.typeToTypeNode(type);\n\t\t}\n\t\treturn resolveType(typeNode, parameter, extractEnum);\n\t}\n}\n","import * as ts from \"typescript\";\nimport {getDecorators} from \"../utils/decoratorUtils\";\nimport {getJSDocComment, getJSDocDescription, isExistJSDocTag} from \"../utils/jsDocUtils\";\nimport {GenerateMetadataError} from \"./exceptions\";\nimport {MetadataGenerator} from \"./metadataGenerator\";\nimport {ParameterGenerator} from \"./parameterGenerator\";\nimport {getInitializerValue, resolveType} from \"./resolveType\";\nimport {Tsoa} from \"./tsoa\";\n\nexport class MethodGenerator {\n\tprivate method: \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\n\tprivate path: string;\n\n\tconstructor(\n\t\tprivate readonly node: ts.MethodDeclaration,\n\t\tprivate readonly parentTags?: string[],\n\t\tprivate readonly parentSecurity?: Tsoa.Security[]) {\n\t\tthis.processMethodDecorators();\n\t}\n\n\tpublic IsValid() {\n\t\treturn !!this.method;\n\t}\n\n\tpublic Generate(): Tsoa.Method {\n\t\tif (!this.IsValid()) {\n\t\t\tthrow new GenerateMetadataError(\"This isn't a valid a controller method.\");\n\t\t}\n\n\t\tlet nodeType = this.node.type;\n\t\tif (!nodeType) {\n\t\t\tconst typeChecker = MetadataGenerator.current.typeChecker;\n\t\t\tconst signature = typeChecker.getSignatureFromDeclaration(this.node);\n\t\t\tconst implicitType = typeChecker.getReturnTypeOfSignature(signature!);\n\t\t\tnodeType = typeChecker.typeToTypeNode(implicitType);\n\t\t}\n\t\tconst type = resolveType(nodeType);\n\t\tconst responses = this.getMethodResponses();\n\t\tresponses.push(this.getMethodSuccessResponse(type));\n\n\t\treturn {\n\t\t\tdeprecated: isExistJSDocTag(this.node, (tag) => tag.tagName.text === \"deprecated\"),\n\t\t\tdescription: getJSDocDescription(this.node),\n\t\t\tisHidden: this.getIsHidden(),\n\t\t\tmethod: this.method,\n\t\t\tname: (this.node.name as ts.Identifier).text,\n\t\t\tparameters: this.buildParameters(),\n\t\t\tpath: this.path,\n\t\t\tresponses,\n\t\t\tsecurity: this.getSecurity(),\n\t\t\tsummary: getJSDocComment(this.node, \"summary\"),\n\t\t\ttags: this.getTags(),\n\t\t\ttype,\n\t\t};\n\t}\n\n\tprivate buildParameters() {\n\t\tconst parameters = this.node.parameters.map((p) => {\n\t\t\ttry {\n\t\t\t\treturn new ParameterGenerator(p, this.method, this.path).Generate();\n\t\t\t} catch (e) {\n\t\t\t\tconst methodId = this.node.name as ts.Identifier;\n\t\t\t\tconst controllerId = (this.node.parent as ts.ClassDeclaration).name as ts.Identifier;\n\t\t\t\tthrow new GenerateMetadataError(`${e.message} \\n in '${controllerId.text}.${methodId.text}'`);\n\t\t\t}\n\t\t});\n\n\t\tconst bodyParameters = parameters.filter((p) => p.in === \"body\");\n\t\tconst bodyProps = parameters.filter((p) => p.in === \"body-prop\");\n\n\t\tif (bodyParameters.length > 1) {\n\t\t\tthrow new GenerateMetadataError(`Only one body parameter allowed in '${this.getCurrentLocation()}' method.`);\n\t\t}\n\t\tif (bodyParameters.length > 0 && bodyProps.length > 0) {\n\t\t\tthrow new GenerateMetadataError(\n\t\t\t\t`Choose either during @Body or @BodyProp in '${this.getCurrentLocation()}' method.`);\n\t\t}\n\t\treturn parameters;\n\t}\n\n\tprivate getCurrentLocation() {\n\t\tconst methodId = this.node.name as ts.Identifier;\n\t\tconst controllerId = (this.node.parent as ts.ClassDeclaration).name as ts.Identifier;\n\t\treturn `${controllerId.text}.${methodId.text}`;\n\t}\n\n\tprivate processMethodDecorators() {\n\t\tconst pathDecorators = getDecorators(this.node, (identifier) => this.supportsPathMethod(identifier.text));\n\n\t\tif (!pathDecorators || !pathDecorators.length) {\n\t\t\treturn;\n\t\t}\n\t\tif (pathDecorators.length > 1) {\n\t\t\tthrow new GenerateMetadataError(`Only one path decorator in '${this.getCurrentLocation}' method,\n       Found: ${pathDecorators.map((d) => d.text).join(\", \")}`);\n\t\t}\n\n\t\tconst decorator = pathDecorators[0];\n\t\tconst expression = decorator.parent as ts.CallExpression;\n\t\tconst decoratorArgument = expression.arguments[0] as ts.StringLiteral;\n\n\t\tthis.method = decorator.text.toLowerCase() as any;\n\t\t// if you don't pass in a path to the method decorator, we'll just use the base route\n\t\t// todo: what if someone has multiple no argument methods of the same type in a single controller?\n\t\t// we need to throw an error there\n\t\tthis.path = decoratorArgument ? `${decoratorArgument.text}` : \"\";\n\t}\n\n\tprivate getMethodResponses(): Tsoa.Response[] {\n\t\tconst decorators = getDecorators(this.node, (identifier) => identifier.text === \"Response\");\n\t\tif (!decorators || !decorators.length) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn decorators.map((decorator) => {\n\t\t\tconst expression = decorator.parent as ts.CallExpression;\n\n\t\t\tlet description = \"\";\n\t\t\tlet name = \"200\";\n\t\t\tlet examples;\n\t\t\tif (expression.arguments.length > 0 && (expression.arguments[0] as any).text) {\n\t\t\t\tname = (expression.arguments[0] as any).text;\n\t\t\t}\n\t\t\tif (expression.arguments.length > 1 && (expression.arguments[1] as any).text) {\n\t\t\t\tdescription = (expression.arguments[1] as any).text;\n\t\t\t}\n\t\t\tif (expression.arguments.length > 2 && (expression.arguments[2] as any).text) {\n\t\t\t\tconst argument = expression.arguments[2] as any;\n\t\t\t\texamples = this.getExamplesValue(argument);\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tdescription,\n\t\t\t\texamples,\n\t\t\t\tname,\n\t\t\t\tschema: (expression.typeArguments && expression.typeArguments.length > 0)\n\t\t\t\t\t? resolveType(expression.typeArguments[0])\n\t\t\t\t\t: undefined,\n\t\t\t} as Tsoa.Response;\n\t\t});\n\t}\n\n\tprivate getMethodSuccessResponse(type: Tsoa.Type): Tsoa.Response {\n\t\tconst decorators = getDecorators(this.node, (identifier) => identifier.text === \"SuccessResponse\");\n\t\tif (!decorators || !decorators.length) {\n\t\t\treturn {\n\t\t\t\tdescription: type.dataType === \"void\" ? \"No content\" : \"Ok\",\n\t\t\t\texamples: this.getMethodSuccessExamples(),\n\t\t\t\tname: type.dataType === \"void\" ? \"204\" : \"200\",\n\t\t\t\tschema: type,\n\t\t\t};\n\t\t}\n\t\tif (decorators.length > 1) {\n\t\t\tthrow new GenerateMetadataError(\n\t\t\t\t`Only one SuccessResponse decorator allowed in '${this.getCurrentLocation}' method.`);\n\t\t}\n\n\t\tconst decorator = decorators[0];\n\t\tconst expression = decorator.parent as ts.CallExpression;\n\n\t\tlet description = \"\";\n\t\tlet name = \"200\";\n\t\tconst examples: any = undefined;\n\n\t\tif (expression.arguments.length > 0 && (expression.arguments[0] as any).text) {\n\t\t\tname = (expression.arguments[0] as any).text;\n\t\t}\n\t\tif (expression.arguments.length > 1 && (expression.arguments[1] as any).text) {\n\t\t\tdescription = (expression.arguments[1] as any).text;\n\t\t}\n\n\t\treturn {\n\t\t\tdescription,\n\t\t\texamples,\n\t\t\tname,\n\t\t\tschema: type,\n\t\t};\n\t}\n\n\tprivate getMethodSuccessExamples() {\n\t\tconst exampleDecorators = getDecorators(this.node, (identifier) => identifier.text === \"Example\");\n\t\tif (!exampleDecorators || !exampleDecorators.length) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (exampleDecorators.length > 1) {\n\t\t\tthrow new GenerateMetadataError(`Only one Example decorator allowed in '${this.getCurrentLocation}' method.`);\n\t\t}\n\n\t\tconst decorator = exampleDecorators[0];\n\t\tconst expression = decorator.parent as ts.CallExpression;\n\t\tconst argument = expression.arguments[0] as any;\n\n\t\treturn this.getExamplesValue(argument);\n\t}\n\n\tprivate supportsPathMethod(method: string) {\n\t\treturn [\"get\", \"post\", \"put\", \"patch\", \"delete\"].some((m) => m === method.toLowerCase());\n\t}\n\n\tprivate getExamplesValue(argument: any) {\n\t\tconst example: any = {};\n\t\targument.properties.forEach((p: any) => {\n\t\t\texample[p.name.text] = getInitializerValue(p.initializer);\n\t\t});\n\t\treturn example;\n\t}\n\n\tprivate getTags() {\n\t\tconst tagsDecorators = getDecorators(this.node, (identifier) => identifier.text === \"Tags\");\n\t\tif (!tagsDecorators || !tagsDecorators.length) {\n\t\t\treturn this.parentTags;\n\t\t}\n\t\tif (tagsDecorators.length > 1) {\n\t\t\tthrow new GenerateMetadataError(`Only one Tags decorator allowed in '${this.getCurrentLocation}' method.`);\n\t\t}\n\n\t\tconst decorator = tagsDecorators[0];\n\t\tconst expression = decorator.parent as ts.CallExpression;\n\t\tconst tags = expression.arguments.map((a: any) => a.text as string);\n\t\tif (this.parentTags) {\n\t\t\ttags.push(...this.parentTags);\n\t\t}\n\t\treturn tags;\n\t}\n\n\tprivate getIsHidden() {\n\t\tconst hiddenDecorators = getDecorators(this.node, (identifier) => identifier.text === \"Hidden\");\n\t\tif (!hiddenDecorators || !hiddenDecorators.length) {\n\t\t\treturn false;\n\t\t}\n\t\tif (hiddenDecorators.length > 1) {\n\t\t\tthrow new GenerateMetadataError(`Only one Hidden decorator allowed in '${this.getCurrentLocation}' method.`);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate getSecurity(): Tsoa.Security[] {\n\t\tconst securityDecorators = getDecorators(this.node, (identifier) => identifier.text === \"Security\");\n\t\tif (!securityDecorators || !securityDecorators.length) {\n\t\t\treturn this.parentSecurity || [];\n\t\t}\n\n\t\tconst security: Tsoa.Security[] = [];\n\t\tfor (const sec of securityDecorators) {\n\t\t\tconst expression = sec.parent as ts.CallExpression;\n\t\t\tsecurity.push({\n\t\t\t\tname: (expression.arguments[0] as any).text,\n\t\t\t\tscopes: expression.arguments[1] ? (expression.arguments[1] as any).elements.map((e: any) => e.text) : undefined,\n\t\t\t});\n\t\t}\n\n\t\treturn security;\n\t}\n}\n","import * as ts from \"typescript\";\nimport {getDecorators} from \"../utils/decoratorUtils\";\nimport {GenerateMetadataError} from \"./exceptions\";\nimport {MethodGenerator} from \"./methodGenerator\";\nimport {Tsoa} from \"./tsoa\";\nimport {MetadataGenerator} from \"./metadataGenerator\";\nimport {Config} from \"../../lib/config\";\nimport {resolve} from \"path\";\n\nexport class ControllerGenerator {\n\tprivate readonly path?: string;\n\tprivate readonly tags?: string[];\n\tprivate readonly security?: Tsoa.Security[];\n\n\tconstructor(private readonly node: ts.ClassDeclaration) {\n\t\tthis.path = this.getPath();\n\t\tthis.tags = this.getTags();\n\t\tthis.security = this.getSecurity();\n\t}\n\n\tpublic IsValid() {\n\t\treturn !!this.path || this.path === \"\";\n\t}\n\n\tpublic Generate(): Tsoa.Controller {\n\t\tif (!this.node.parent) {\n\t\t\tthrow new GenerateMetadataError(\"Controller node doesn't have a valid parent source file.\");\n\t\t}\n\t\tif (!this.node.name) {\n\t\t\tthrow new GenerateMetadataError(\"Controller node doesn't have a valid name.\");\n\t\t}\n\t\tif (!this.isNodeExported()) {\n\t\t\tthrow new GenerateMetadataError(\"Controller node must be exported.\");\n\t\t}\n\n\t\tconst sourceFile = this.node.parent.getSourceFile();\n\n\t\tif (sourceFile.fileName === Config.ConfigData.sourceEntrypoint) {\n\t\t\tthrow new GenerateMetadataError(\"Controller node not allowed in app entrypoint.\");\n\t\t}\n\n\t\tlet extendsController = false;\n\n\t\tconst checker = MetadataGenerator.current.typeChecker;\n\t\tif (this.node.heritageClauses != null) {\n\t\t\tthis.node.heritageClauses.forEach((item) => {\n\t\t\t\t// console.log(item.getText());\n\t\t\t\tfor (const node of item.types) {\n\t\t\t\t\tconst type = checker.getTypeFromTypeNode(node);\n\t\t\t\t\tif (type.symbol.escapedName === \"Controller\") {\n\t\t\t\t\t\textendsController = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\tlocation: sourceFile.fileName,\n\t\t\tmethods: this.buildMethods(),\n\t\t\tname: this.node.name.text,\n\t\t\tpath: this.path || \"\",\n\t\t\textendsController,\n\t\t};\n\t}\n\n\tprivate buildMethods() {\n\t\treturn this.node.members\n\t\t\t.filter((m) => m.kind === ts.SyntaxKind.MethodDeclaration)\n\t\t\t.map((m: ts.MethodDeclaration) => new MethodGenerator(m, this.tags, this.security))\n\t\t\t.filter((generator) => generator.IsValid())\n\t\t\t.map((generator) => generator.Generate());\n\t}\n\n\tprivate getPath() {\n\t\tconst decorators = getDecorators(this.node, (identifier) => identifier.text === \"Route\");\n\t\tif (!decorators || !decorators.length) {\n\t\t\treturn;\n\t\t}\n\t\tif (decorators.length > 1) {\n\t\t\tthrow new GenerateMetadataError(`Only one Route decorator allowed in '${this.node.name!.text}' class.`);\n\t\t}\n\n\t\tconst decorator = decorators[0];\n\t\tconst expression = decorator.parent as ts.CallExpression;\n\t\tconst decoratorArgument = expression.arguments[0] as ts.StringLiteral;\n\t\treturn decoratorArgument ? `${decoratorArgument.text}` : \"\";\n\t}\n\n\tprivate getTags() {\n\t\tconst decorators = getDecorators(this.node, (identifier) => identifier.text === \"Tags\");\n\t\tif (!decorators || !decorators.length) {\n\t\t\treturn;\n\t\t}\n\t\tif (decorators.length > 1) {\n\t\t\tthrow new GenerateMetadataError(`Only one Tags decorator allowed in '${this.node.name!.text}' class.`);\n\t\t}\n\n\t\tconst decorator = decorators[0];\n\t\tconst expression = decorator.parent as ts.CallExpression;\n\n\t\treturn expression.arguments.map((a: any) => a.text as string);\n\t}\n\n\tprivate getSecurity(): Tsoa.Security[] {\n\t\tconst securityDecorators = getDecorators(this.node, (identifier) => identifier.text === \"Security\");\n\t\tif (!securityDecorators || !securityDecorators.length) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst security: Tsoa.Security[] = [];\n\t\tfor (const sec of securityDecorators) {\n\t\t\tconst expression = sec.parent as ts.CallExpression;\n\t\t\tsecurity.push({\n\t\t\t\tname: (expression.arguments[0] as any).text,\n\t\t\t\tscopes: expression.arguments[1] ? (expression.arguments[1] as any).elements.map((e: any) => e.text) : undefined,\n\t\t\t});\n\t\t}\n\n\t\treturn security;\n\t}\n\n\tprivate isNodeExported(): boolean {\n\t\treturn (ts.getCombinedModifierFlags(this.node) & ts.ModifierFlags.Export) !== 0;\n\t}\n}\n","import * as mm from \"minimatch\";\nimport * as ts from \"typescript\";\nimport {ControllerGenerator} from \"./controllerGenerator\";\nimport {Tsoa} from \"./tsoa\";\n\nexport class MetadataGenerator {\n\tpublic static current: MetadataGenerator;\n\tpublic readonly nodes = new Array<ts.Node>();\n\tpublic readonly typeChecker: ts.TypeChecker;\n\tprivate readonly program: ts.Program;\n\tprivate referenceTypeMap: Tsoa.ReferenceTypeMap = {};\n\tprivate circularDependencyResolvers = new Array<(referenceTypes: Tsoa.ReferenceTypeMap) => void>();\n\n\tconstructor(entryFile: string, compilerOptions?: ts.CompilerOptions, private readonly ignorePaths?: string[]) {\n\t\tthis.program = ts.createProgram([entryFile], compilerOptions || {});\n\t\tthis.typeChecker = this.program.getTypeChecker();\n\t\tMetadataGenerator.current = this;\n\t}\n\n\tpublic IsExportedNode(node: ts.Node) {\n\t\treturn true;\n\t}\n\n\tpublic Generate(): Tsoa.Metadata {\n\t\tthis.program.getSourceFiles().forEach((sf) => {\n\t\t\tif (this.ignorePaths && this.ignorePaths.length) {\n\t\t\t\tfor (const path of this.ignorePaths) {\n\t\t\t\t\tif (mm(sf.fileName, path)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tts.forEachChild(sf, (node) => {\n\t\t\t\tthis.nodes.push(node);\n\t\t\t});\n\t\t});\n\n\t\tconst controllers = this.buildControllers();\n\n\t\tthis.circularDependencyResolvers.forEach((c) => c(this.referenceTypeMap));\n\n\t\treturn {\n\t\t\tcontrollers,\n\t\t\treferenceTypeMap: this.referenceTypeMap,\n\t\t};\n\t}\n\n\tpublic TypeChecker() {\n\t\treturn this.typeChecker;\n\t}\n\n\tpublic AddReferenceType(referenceType: Tsoa.ReferenceType | Tsoa.ReferenceAlias) {\n\t\tif (!referenceType.refName) {\n\t\t\treturn;\n\t\t}\n\t\tthis.referenceTypeMap[referenceType.refName] = referenceType;\n\t}\n\n\tpublic GetReferenceType(refName: string) {\n\t\treturn this.referenceTypeMap[refName];\n\t}\n\n\tpublic OnFinish(callback: (referenceTypes: Tsoa.ReferenceTypeMap) => void) {\n\t\tthis.circularDependencyResolvers.push(callback);\n\t}\n\n\tprivate buildControllers() {\n\t\treturn this.nodes\n\t\t\t.filter((node) => node.kind === ts.SyntaxKind.ClassDeclaration\n\t\t\t\t&& this.IsExportedNode(node as ts.ClassDeclaration))\n\t\t\t.map((classDeclaration: ts.ClassDeclaration) => new ControllerGenerator(classDeclaration))\n\t\t\t.filter((generator) => generator.IsValid())\n\t\t\t.map((generator) => generator.Generate());\n\t}\n}\n","/**\n * Removes all '/', '\\', and spaces from the beginning and end of the path\n * Replaces all '/', '\\', and spaces between sections of the path\n * Adds prefix and suffix if supplied\n */\nexport function normalisePath(path: string, withPrefix?: string, withSuffix?: string,\n\t\t\t\t\t\t\t  skipPrefixAndSuffixIfEmpty: boolean = true) {\n\tif ((!path || path === \"/\") && skipPrefixAndSuffixIfEmpty) {\n\t\treturn \"\";\n\t}\n\tif (!path || typeof path !== \"string\") {\n\t\tpath = \"\" + path;\n\t}\n\t// normalise beginning and end of the path\n\tlet normalised = path.replace(/^[/\\\\\\s]+|[/\\\\\\s]+$/g, \"\");\n\tnormalised = withPrefix ? withPrefix + normalised : normalised;\n\tnormalised = withSuffix ? normalised + withSuffix : normalised;\n\t// normalise / signs amount in all path\n\tnormalised = normalised.replace(/[/\\\\\\s]+/g, \"/\");\n\treturn normalised;\n}\n","import {Tsoa} from \"./metadataGeneration/tsoa\";\nimport {normalisePath} from \"./utils/pathUtils\";\nimport {Swagger} from \"../server/swagger\";\nimport {merge, isString} from \"lodash\";\n\nexport class SpecGenerator {\n\tconstructor(private readonly metadata: Tsoa.Metadata) {\n\t}\n\n\tpublic GetSpec() {\n\t\tconst spec: Swagger.Spec = {\n\t\t\t// basePath: normalisePath(this.config.basePath as string, \"/\"),\n\t\t\tconsumes: [\"application/json\"],\n\t\t\tdefinitions: this.buildDefinitions(),\n\t\t\tinfo: {\n\t\t\t\ttitle: \"\",\n\t\t\t},\n\t\t\tpaths: this.buildPaths(),\n\t\t\tproduces: [\"application/json\"],\n\t\t\tswagger: \"2.0\",\n\t\t};\n\n\t\treturn spec;\n\t}\n\n\tprivate buildDefinitions() {\n\t\tconst definitions: { [definitionsName: string]: Swagger.Schema } = {};\n\t\tObject.keys(this.metadata.referenceTypeMap).map((typeName) => {\n\t\t\tconst referenceType = this.metadata.referenceTypeMap[typeName];\n\n\t\t\tif (referenceType.dataType === \"refObject\" || referenceType.dataType === \"refEnum\") {\n\t\t\t\t// Object definition\n\t\t\t\tif (referenceType.properties) {\n\t\t\t\t\tconst required = referenceType.properties.filter((p) => p.required).map((p) => p.name);\n\t\t\t\t\tdefinitions[referenceType.refName] = {\n\t\t\t\t\t\tdescription: referenceType.description,\n\t\t\t\t\t\tproperties: this.buildProperties(referenceType.properties),\n\t\t\t\t\t\trequired: required && required.length > 0 ? Array.from(new Set(required)) : undefined,\n\t\t\t\t\t\ttype: \"object\",\n\t\t\t\t\t};\n\n\t\t\t\t\tif (referenceType.additionalProperties) {\n\t\t\t\t\t\tdefinitions[referenceType.refName].additionalProperties =\n\t\t\t\t\t\t\tthis.buildAdditionalProperties(referenceType.additionalProperties);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (referenceType.example) {\n\t\t\t\t\tdefinitions[referenceType.refName].example = referenceType.example;\n\t\t\t\t}\n\n\t\t\t\t// Enum definition\n\t\t\t\tif (referenceType.enums) {\n\t\t\t\t\tdefinitions[referenceType.refName] = {\n\t\t\t\t\t\tdescription: referenceType.description,\n\t\t\t\t\t\tenum: referenceType.enums,\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Actual type info overrides swagger tag\n\t\t\t\tif (referenceType.additionalSwagger) {\n\t\t\t\t\tdefinitions[referenceType.refName] = merge(definitions[referenceType.refName], referenceType.additionalSwagger);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (referenceType.dataType === \"refAlias\") {\n\t\t\t\tconst swaggerType = this.getSwaggerType(referenceType.type);\n\t\t\t\tconst format = referenceType.format as Swagger.DataFormat;\n\t\t\t\tswaggerType.description = referenceType.description;\n\t\t\t\tswaggerType.format = format || swaggerType.format;\n\t\t\t\tswaggerType.example = referenceType.example;\n\t\t\t\tif (!swaggerType.$ref) {\n\t\t\t\t\tObject.keys(referenceType.validators)\n\t\t\t\t\t\t.filter((key) => {\n\t\t\t\t\t\t\treturn !key.startsWith(\"is\") && key !== \"minDate\" && key !== \"maxDate\";\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.forEach((key) => {\n\t\t\t\t\t\t\t(swaggerType as any)[key] = referenceType.validators[key].value;\n\t\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tdefinitions[referenceType.refName] = swaggerType;\n\t\t\t}\n\n\t\t});\n\n\t\treturn definitions;\n\t}\n\n\tprivate buildPaths() {\n\t\tconst paths: { [pathName: string]: Swagger.Path } = {};\n\n\t\tthis.metadata.controllers.forEach((controller) => {\n\t\t\tconst normalisedControllerPath = normalisePath(controller.path, \"/\");\n\t\t\tcontroller.methods.forEach((method) => {\n\t\t\t\tconst normalisedMethodPath = normalisePath(method.path, \"/\");\n\t\t\t\tconst path = normalisePath(`${normalisedControllerPath}${normalisedMethodPath}`, \"/\", \"\", false);\n\t\t\t\tpaths[path] = paths[path] || {};\n\t\t\t\tthis.buildMethod(controller.name, method, paths[path]);\n\t\t\t});\n\t\t});\n\n\t\treturn paths;\n\t}\n\n\tprivate buildMethod(controllerName: string, method: Tsoa.Method, pathObject: any) {\n\t\tconst pathMethod: Swagger.Operation = pathObject[method.method] = this.buildOperation(controllerName, method);\n\t\tpathMethod.description = method.description;\n\t\tpathMethod.summary = method.summary;\n\t\tpathMethod.tags = method.tags;\n\n\t\tif (method.deprecated) {\n\t\t\tpathMethod.deprecated = method.deprecated;\n\t\t}\n\t\tif (method.security) {\n\n\t\t\tconst methodSecurity: any[] = [];\n\t\t\tfor (const thisSecurity of method.security) {\n\t\t\t\tconst security: any = {};\n\t\t\t\tsecurity[thisSecurity.name] = thisSecurity.scopes ? thisSecurity.scopes : [];\n\t\t\t\tmethodSecurity.push(security);\n\t\t\t}\n\n\t\t\tpathMethod.security = methodSecurity;\n\t\t}\n\n\t\tpathMethod.parameters = method.parameters\n\t\t\t.filter((p) => {\n\t\t\t\treturn !(p.in === \"request\" || p.in === \"body-prop\" || p.in === \"logger\");\n\t\t\t})\n\t\t\t.map((p) => this.buildParameter(p));\n\n\t\tconst bodyPropParameter = this.buildBodyPropParameter(controllerName, method);\n\t\tif (bodyPropParameter) {\n\t\t\tpathMethod.parameters.push(bodyPropParameter);\n\t\t}\n\t\tif ((pathMethod.parameters.filter as any)((p: Swagger.BaseParameter) => p.in === \"body\").length > 1) {\n\t\t\tthrow new Error(\"Only one body parameter allowed per controller method.\");\n\t\t}\n\t}\n\n\tprivate buildBodyPropParameter(controllerName: string, method: Tsoa.Method) {\n\t\tconst properties = {} as { [name: string]: Swagger.Schema };\n\t\tconst required: string[] = [];\n\n\t\tmethod.parameters\n\t\t\t.filter((p) => p.in === \"body-prop\")\n\t\t\t.forEach((p) => {\n\t\t\t\tproperties[p.name] = this.getSwaggerType(p.type);\n\t\t\t\tproperties[p.name].default = p.default;\n\t\t\t\tproperties[p.name].description = p.description;\n\t\t\t\tif (p.type.dataType === \"object\") {\n\t\t\t\t\tconst resolved = this.buildLiteralObject(p.type as Tsoa.ObjectType);\n\t\t\t\t\tproperties[p.name].properties = resolved.properties;\n\t\t\t\t\tproperties[p.name].additionalProperties = resolved.additionalProperties;\n\t\t\t\t\tproperties[p.name].required = resolved.required;\n\t\t\t\t\tproperties[p.name].type = resolved.type;\n\t\t\t\t\tproperties[p.name].description = resolved.description;\n\t\t\t\t}\n\n\t\t\t\tif (p.required) {\n\t\t\t\t\trequired.push(p.name);\n\t\t\t\t}\n\t\t\t});\n\n\t\tif (!Object.keys(properties).length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst parameter = {\n\t\t\tin: \"body\",\n\t\t\tname: \"body\",\n\t\t\tschema: {\n\t\t\t\tproperties,\n\t\t\t\ttitle: `${this.getOperationId(method.name)}Body`,\n\t\t\t\ttype: \"object\",\n\t\t\t},\n\t\t} as Swagger.BodyParameter;\n\t\tif (required.length) {\n\t\t\tparameter.schema.required = required;\n\t\t}\n\t\treturn parameter;\n\t}\n\n\tprivate buildParameter(source: Tsoa.Parameter): Swagger.Parameter {\n\t\tlet parameter = {\n\t\t\tdefault: source.default,\n\t\t\tdescription: source.description,\n\t\t\tin: source.in,\n\t\t\tname: source.name,\n\t\t\trequired: source.required,\n\t\t} as Swagger.Parameter;\n\n\t\tconst parameterType = this.getSwaggerType(source.type);\n\t\tparameter.format = parameterType.format || undefined;\n\n\t\tif (parameter.in === \"query\" && parameter.type === \"array\") {\n\t\t\t(parameter as Swagger.QueryParameter).collectionFormat = \"multi\";\n\t\t}\n\n\t\tif (parameterType.$ref) {\n\t\t\t(parameter as Swagger.BodyParameter).schema = parameterType as Swagger.Schema;\n\t\t\treturn parameter;\n\t\t}\n\n\t\tconst validatorObjs = {};\n\t\tObject.keys(source.validators)\n\t\t\t.filter((key) => {\n\t\t\t\treturn !key.startsWith(\"is\") && key !== \"minDate\" && key !== \"maxDate\";\n\t\t\t})\n\t\t\t.forEach((key: string) => {\n\t\t\t\t(validatorObjs as any)[key] = source.validators[key].value;\n\t\t\t});\n\n\t\tif (source.type.dataType === \"object\" && source.in === \"body\") {\n\t\t\t(parameter as Swagger.BodyParameter).schema = this.buildLiteralObject(source.type as Tsoa.ObjectType);\n\t\t}\n\n\t\tif (source.in === \"body\" && source.type.dataType === \"array\") {\n\t\t\t(parameter as Swagger.BodyParameter).schema = {\n\t\t\t\titems: parameterType.items,\n\t\t\t\ttype: \"array\",\n\t\t\t};\n\t\t} else {\n\t\t\tif (source.type.dataType === \"any\") {\n\t\t\t\tif (source.in === \"body\") {\n\t\t\t\t\t(parameter as Swagger.BodyParameter).schema = {type: \"object\"};\n\t\t\t\t} else {\n\t\t\t\t\tparameter.type = \"string\";\n\t\t\t\t}\n\t\t\t} else if (!(source.in === \"body\" && source.type.dataType === \"object\")) {\n\t\t\t\tparameter.type = parameterType.type;\n\t\t\t\tparameter.items = parameterType.items;\n\t\t\t\tparameter.enum = parameterType.enum;\n\t\t\t}\n\t\t}\n\n\t\tif ((parameter as Swagger.BodyParameter).schema != null) {\n\t\t\t(parameter as Swagger.BodyParameter).schema =\n\t\t\t\tObject.assign({}, (parameter as Swagger.BodyParameter).schema, validatorObjs);\n\t\t} else {\n\t\t\tparameter = Object.assign({}, parameter, validatorObjs);\n\t\t}\n\n\t\treturn parameter;\n\t}\n\n\tprivate buildLiteralObject(type: Tsoa.ObjectType): Swagger.Schema {\n\t\tconst required = type.properties.filter((p) => p.required).map((p) => p.name);\n\t\tconst schema = {\n\t\t\ttype: \"object\",\n\t\t\tproperties: this.buildProperties(type.properties),\n\t\t\trequired: required && required.length > 0 ? Array.from(new Set(required)) : undefined,\n\t\t\tdescription: type.description,\n\t\t} as Swagger.Schema;\n\n\t\tif (type.additionalProperties) {\n\t\t\tschema.additionalProperties = this.buildAdditionalProperties(type.additionalProperties);\n\t\t}\n\n\t\treturn schema;\n\t}\n\n\tprivate buildProperties(source: Tsoa.Property[]) {\n\t\tconst properties: { [propertyName: string]: Swagger.Schema } = {};\n\n\t\tsource.forEach((property) => {\n\t\t\tconst swaggerType = this.getSwaggerType(property.type);\n\t\t\tconst format = property.format as Swagger.DataFormat;\n\t\t\tswaggerType.description = property.description;\n\t\t\tswaggerType.format = format || swaggerType.format;\n\n\t\t\tif (property.type.dataType === \"object\") {\n\t\t\t\tconst resolved = this.buildLiteralObject(property.type as Tsoa.ObjectType);\n\t\t\t\tswaggerType.properties = resolved.properties;\n\t\t\t\tswaggerType.additionalProperties = resolved.additionalProperties;\n\t\t\t\tswaggerType.type = resolved.type;\n\t\t\t\tswaggerType.required = resolved.required;\n\t\t\t\tswaggerType.description = swaggerType.description ? swaggerType.description : resolved.description;\n\t\t\t}\n\n\t\t\tif (!swaggerType.$ref) {\n\t\t\t\tswaggerType.default = property.default;\n\n\t\t\t\tObject.keys(property.validators)\n\t\t\t\t\t.filter((key) => {\n\t\t\t\t\t\treturn !key.startsWith(\"is\") && key !== \"minDate\" && key !== \"maxDate\";\n\t\t\t\t\t})\n\t\t\t\t\t.forEach((key) => {\n\t\t\t\t\t\t(swaggerType as any)[key] = property.validators[key].value;\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\t// if (!property.required)  {\n\t\t\t//   (swaggerType as any)[\"x-nullable\"] = true;\n\t\t\t// }\n\n\t\t\tproperties[property.name] = swaggerType as Swagger.Schema;\n\t\t});\n\n\t\treturn properties;\n\t}\n\n\tprivate buildAdditionalProperties(type: Tsoa.Type) {\n\t\treturn this.getSwaggerType(type);\n\t}\n\n\tprivate buildOperation(controllerName: string, method: Tsoa.Method): Swagger.Operation {\n\t\tconst swaggerResponses: any = {};\n\n\t\tmethod.responses.forEach((res: Tsoa.Response) => {\n\t\t\tswaggerResponses[res.name] = {\n\t\t\t\tdescription: res.description,\n\t\t\t};\n\t\t\tif (res.schema && res.schema.dataType !== \"void\") {\n\t\t\t\tswaggerResponses[res.name].schema = this.getSwaggerType(res.schema);\n\t\t\t}\n\t\t\tif (res.examples) {\n\t\t\t\tswaggerResponses[res.name].examples = {\"application/json\": res.examples};\n\t\t\t}\n\t\t});\n\n\t\treturn {\n\t\t\toperationId: this.getOperationId(method.name),\n\t\t\tproduces: [\"application/json\"],\n\t\t\tresponses: swaggerResponses,\n\t\t};\n\t}\n\n\tprivate getOperationId(methodName: string) {\n\t\treturn methodName.charAt(0).toUpperCase() + methodName.substr(1);\n\t}\n\n\tprivate getSwaggerType(type: Tsoa.Type): Swagger.Schema {\n\t\tconst swaggerType = this.getSwaggerTypeForPrimitiveType(type);\n\t\tif (swaggerType) {\n\t\t\treturn swaggerType;\n\t\t}\n\n\t\tif (type.dataType === \"array\") {\n\t\t\treturn this.getSwaggerTypeForArrayType(type as Tsoa.ArrayType);\n\t\t}\n\n\t\tif (type.dataType === \"enum\") {\n\t\t\treturn this.getSwaggerTypeForEnumType(type as Tsoa.EnumerateType);\n\t\t}\n\n\t\treturn this.getSwaggerTypeForReferenceType(type as Tsoa.ReferenceType) as Swagger.Schema;\n\t}\n\n\tprivate getSwaggerTypeForPrimitiveType(type: Tsoa.Type): Swagger.Schema | undefined {\n\t\tconst map = {\n\t\t\tany: {type: \"object\"},\n\t\t\tbinary: {type: \"string\", format: \"binary\"},\n\t\t\tboolean: {type: \"boolean\"},\n\t\t\tbuffer: {type: \"string\", format: \"byte\"},\n\t\t\tbyte: {type: \"string\", format: \"byte\"},\n\t\t\tdate: {type: \"string\", format: \"date\"},\n\t\t\tdatetime: {type: \"string\", format: \"date-time\"},\n\t\t\tdouble: {type: \"number\", format: \"double\"},\n\t\t\tfloat: {type: \"number\", format: \"float\"},\n\t\t\tinteger: {type: \"integer\", format: \"int32\"},\n\t\t\tlong: {type: \"integer\", format: \"int64\"},\n\t\t\tobject: {type: \"object\"},\n\t\t\tstring: {type: \"string\"},\n\t\t} as { [name: string]: Swagger.Schema };\n\n\t\treturn map[type.dataType];\n\t}\n\n\tprivate getSwaggerTypeForArrayType(arrayType: Tsoa.ArrayType): Swagger.Schema {\n\t\treturn {type: \"array\", items: this.getSwaggerType(arrayType.elementType)};\n\t}\n\n\tprivate getSwaggerTypeForEnumType(enumType: Tsoa.EnumerateType): Swagger.Schema {\n\t\tlet isStringEnum = false;\n\t\tenumType.enums.forEach((member) => {\n\t\t\tif (isString(member)) {\n\t\t\t\tisStringEnum = true;\n\t\t\t}\n\t\t});\n\t\treturn {type: (isStringEnum) ? \"string\" : \"number\", enum: enumType.enums.map((member) => {\n\t\t\tif (isStringEnum) {\n\t\t\t\treturn String(member);\n\t\t\t} else {\n\t\t\t\treturn member;\n\t\t\t}\n\t\t})};\n\t}\n\n\tprivate getSwaggerTypeForReferenceType(referenceType: Tsoa.ReferenceType): Swagger.BaseSchema {\n\t\treturn {$ref: `#/definitions/${referenceType.refName}`};\n\t}\n}\n","import {MetadataGenerator} from \"./metadataGeneration/metadataGenerator\";\nimport {SpecGenerator} from \"./specGenerator\";\nimport {dirname, extname, join, relative} from \"path\";\nimport {writeFileSync} from \"fs\";\nimport {Config} from \"../lib/config\";\nimport chalk from \"chalk\";\nimport {spinnerFail} from \"../lib/helpers\";\n\nconst dotJs = require(\"dot\");\ndotJs.log = false;\ndotJs.templateSettings.strip = false;\nconst templates = dotJs.process({path: join(__dirname, \"../../templates\")});\n\nexport async function routeBuild(entryPoint: string) {\n\tconsole.log(chalk.bold(\"Controller Generation\"));\n\tconst spinner = Config.Spinner;\n\tawait spinner.start(\"Generating route controller metadata\");\n\tlet metadata;\n\ttry {\n\t\tmetadata = new MetadataGenerator(entryPoint).Generate();\n\t} catch (e) {\n\t\tawait spinnerFail(\"Metadata Failure\", e);\n\t}\n\tawait spinner.succeed();\n\tawait spinner.start(\"Building swagger content from metadata\");\n\tconst swaggerContent = new SpecGenerator(metadata).GetSpec();\n\tmetadata.controllers.forEach((con) => {\n\t\tconst relativePath = relative(dirname(entryPoint), con.location);\n\t\tcon.location = \"./\" + relativePath.replace(extname(relativePath), \"\");\n\t});\n\tawait spinner.succeed();\n\ttry {\n\t\tawait spinner.start(\"Generating routes\");\n\t\tconst generatedRoutes = templates.apiTemplate({\n\t\t\tswagger: swaggerContent,\n\t\t\tmetadata,\n\t\t});\n\n\t\tconst generatedPath = Config.SourceRoutePath;\n\n\t\twriteFileSync(generatedPath, generatedRoutes.replace(/\\\"([a-zA-Z_$][0-9a-zA-Z_$]+)\\\":/g, \"$1:\"));\n\t\tawait spinner.succeed();\n\t} catch (e) {\n\t\tawait spinnerFail(\"Route Generation Failure\", e);\n\t}\n}\n","#!/usr/bin/env node\nimport {CLI_MODE_FLAG, Config} from \"./config\";\n\nprocess.env[CLI_MODE_FLAG] = \"true\";\n\nimport {VALORYLOGGERVAR, ValoryMetadata, VALORYMETAVAR, VALORYPRETTYLOGGERVAR} from \"../main\";\nimport {CompilationLevel} from \"../compiler/compilerheaders\";\nimport {Swagger} from \"../server/swagger\";\nimport {compileAndSave} from \"../compiler/compileRunner\";\nimport {isNil, omitBy} from \"lodash\";\nimport {extname, join, resolve} from \"path\";\nimport {routeBuild} from \"../tsoa/tsoaRunner\";\nimport yargs = require(\"yargs\");\nimport * as inquirer from \"inquirer\";\nimport {existsSync, writeFileSync} from \"fs\";\nimport {ThreadSpinner} from \"thread-spin\";\nimport {convertTime, spinnerFail} from \"./helpers\";\nimport chalk from \"chalk\";\n\nasync function compilerRunner(args: any) {\n\tconsole.log(chalk.bold(`valory compile v${Config.ValoryVersion}\\n`));\n\tconsole.log(`Project:       ${Config.PackageJSON.name}`);\n\tconsole.log(`Version:       ${Config.PackageJSON.version}`);\n\tconsole.log(`Config:        ${Config.ConfigPath}\\n`);\n\n\tawait Config.checkRequirements();\n\tconst start = process.hrtime();\n\trequire(\"ts-node\").register({\n\t\tproject: join(__dirname, \"../../tsconfig.json\"),\n\t\tcompilerOptions: {\n\t\t\ttypes: [\"node\"],\n\t\t},\n\t});\n\tif (args.prettylog) {\n\t\tprocess.env.PRETTYLOG = \"true\";\n\t}\n\t// const Logger = P({\n\t// \tlevel: process.env[VALORYLOGGERVAR] || \"info\",\n\t// \tprettyPrint: process.env[VALORYPRETTYLOGGERVAR] === \"true\",\n\t// });\n\tif (Config.SourceRoutePath !== \"\") {\n\t\tawait routeBuild(Config.ConfigData.sourceEntrypoint);\n\t}\n\tconsole.log(chalk.bold(\"Appserver Warmup\"));\n\tconst spinner = Config.Spinner;\n\tawait spinner.start(\"Registering routes\");\n\tlet valExport: { valory: ValoryMetadata };\n\ttry {\n\t\trequire((Config.ConfigData.sourceEntrypoint !== \"\"\n\t\t\t? Config.ConfigData.sourceEntrypoint : Config.ConfigData.entrypoint));\n\t\t// Logger.info(process.env[VALORYMETAVAR]);\n\t\tvalExport = JSON.parse(process.env[VALORYMETAVAR]);\n\t} catch (e) {\n\t\tawait spinnerFail(\"failed to load apperver\", e);\n\t}\n\tspinner.succeed();\n\tconst api = valExport.valory.swagger;\n\tapi.schemes = args.schemes;\n\tapi.host = args.host;\n\tapi.info.version = args.apiVersion;\n\tconst output = omitBy(api, isNil) as Swagger.Spec;\n\tconst compLevel = CompilationLevel[args.compilationLevel] as any;\n\tcompileAndSave(output, Config.CompSwagPath, process.cwd(),\n\t\tvalExport.valory.undocumentedEndpoints, {\n\t\t\tdebug: args.debugMode, compilationLevel: compLevel,\n\t\t\tsingleError: args.singleError,\n\t\t\tdiscrimFastFail: args.discrimFastFail,\n\t\t}, args.debugArtifactPath)\n\t\t.then(() => {\n\t\t\tconsole.log(\"\\nDone\", (convertTime(process.hrtime(start)) / 1000).toFixed(3) + \"s\");\n\t\t\tThreadSpinner.shutdown();\n\t\t\tprocess.exit(0);\n\t\t});\n}\n\nfunction cliRunner(args: any) {\n\t// require(\"ts-node\").register();\n\tprocess.env.TEST_MODE = \"TRUE\";\n\tprocess.env.PORT = args.port;\n\tif (args.prettylog) {\n\t\tprocess.env.PRETTYLOG = \"true\";\n\t}\n\tprocess.env[VALORYLOGGERVAR] = args.loglevel;\n\trequire(Config.ConfigData.entrypoint);\n}\n\nasync function configBuilder(args: object) {\n\tconst config = await inquirer.prompt([\n\t\t{\n\t\t\tname: \"entrypoint\",\n\t\t\tmessage: `Path to entrypoint file. Relative to ${Config.RootPath}`,\n\t\t\ttype: \"input\",\n\t\t\tvalidate: (path: string) => {\n\t\t\t\tconst resolved = resolve(join(Config.RootPath, path));\n\t\t\t\tif (!existsSync(resolved)) {\n\t\t\t\t\treturn \"Entrypoint file does not exist\";\n\t\t\t\t}\n\t\t\t\tconst ext = extname(resolved);\n\t\t\t\tif (ext !== \".js\") {\n\t\t\t\t\treturn \"Entrypoint must be a plain javascript file\";\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"isTS\",\n\t\t\tmessage: \"Is this a typescript project?\",\n\t\t\ttype: \"confirm\",\n\t\t},\n\t\t{\n\t\t\tname: \"sourceEntrypoint\",\n\t\t\tmessage: `Path to ts source file for the entrypoint. Relative to ${Config.RootPath}`,\n\t\t\ttype: \"input\",\n\t\t\twhen: (currentArgs: any) => {\n\t\t\t\treturn currentArgs.isTS;\n\t\t\t},\n\t\t\tvalidate: (path: string) => {\n\t\t\t\tconst resolved = resolve(join(Config.RootPath, path));\n\t\t\t\tif (!existsSync(resolved)) {\n\t\t\t\t\treturn \"Entrypoint file does not exist\";\n\t\t\t\t}\n\t\t\t\tconst ext = extname(resolved);\n\t\t\t\tif (ext !== \".ts\") {\n\t\t\t\t\treturn \"Entrypoint must be a typescript file\";\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"singleError\",\n\t\t\tmessage: \"Enable single error mode\",\n\t\t\ttype: \"confirm\",\n\t\t\tdefault: false,\n\t\t},\n\t]);\n\n\twriteFileSync(Config.ConfigPath, JSON.stringify(config, null, 2));\n}\n\nyargs\n\t.option(\"project\", {\n\t\tdesc: \"Top level of your project containing valory.json\",\n\t\ttype: \"string\",\n\t\tdefault: process.cwd(),\n\t\talias: \"p\",\n\t})\n\t.command(\"init\", \"Initialize valory config\", (inst) => {\n\t\tinst.config(\"project\", (rootPath) => {\n\t\t\tConfig.load(false, rootPath);\n\t\t\treturn Config.ConfigData;\n\t\t});\n\t\treturn inst;\n\t}, configBuilder)\n\t.command(\"compile\", \"Compile valory project\", (inst) => {\n\t\tinst\n\t\t\t.options({\n\t\t\t\tentrypoint: {\n\t\t\t\t\tdescription: \"Main entrypoint for the api\",\n\t\t\t\t},\n\t\t\t\thost: {\n\t\t\t\t\tdescription: \"The host for your api e.g. somewebsite.com\",\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t},\n\t\t\t\tscheme: {\n\t\t\t\t\talias: \"s\",\n\t\t\t\t\tdescription: \"The access method for your api\",\n\t\t\t\t\tchoices: [\"http\", \"https\"],\n\t\t\t\t\tdefault: \"https\",\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t},\n\t\t\t\tbasePath: {\n\t\t\t\t\talias: \"r\",\n\t\t\t\t\tdescription: \"Api path relative to the host. It must start with a slash.\",\n\t\t\t\t\tcoerce: ((resourcePath: string) => {\n\t\t\t\t\t\tif (resourcePath.startsWith(\"/\")) {\n\t\t\t\t\t\t\treturn resourcePath;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow Error(\"Resource path MUST start with a '/'\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t\t\tdefault: \"/\",\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t},\n\t\t\t\toutputFile: {\n\t\t\t\t\talias: \"o\",\n\t\t\t\t\tdesc: \"File to write swagger output to.\",\n\t\t\t\t\tdefault: join(process.cwd(), \"swagger.json\"),\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t},\n\t\t\t\tapiVersion: {\n\t\t\t\t\tdesc: \"Api version string\",\n\t\t\t\t\tdefault: \"1.0.0\",\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t},\n\t\t\t\tsingleError: {\n\t\t\t\t\tdesc: \"Only return a single validation error at a time\",\n\t\t\t\t\tboolean: true,\n\t\t\t\t\tdefault: false,\n\t\t\t\t},\n\t\t\t\tdiscrimFastFail: {\n\t\t\t\t\tdesc: \"Enables discriminator fast fail EXPERIMENTAL\",\n\t\t\t\t\tboolean: true,\n\t\t\t\t\tdefault: false,\n\t\t\t\t},\n\t\t\t\tcompilationLevel: {\n\t\t\t\t\talias: \"l\",\n\t\t\t\t\tdesc: \"Compilation level to pass to closure compiler\",\n\t\t\t\t\tchoices: [\"SIMPLE\", \"ADVANCED\", \"WHITESPACE_ONLY\"],\n\t\t\t\t\tdefault: \"ADVANCED\",\n\t\t\t\t},\n\t\t\t\tdebugMode: {\n\t\t\t\t\talias: \"d\",\n\t\t\t\t\tdesc: \"Enable debug mode for the compiler.\",\n\t\t\t\t\tboolean: true,\n\t\t\t\t\tdefault: false,\n\t\t\t\t},\n\t\t\t\tdebugArtifactPath: {\n\t\t\t\t\talias: \"a\",\n\t\t\t\t\tdesc: \"When specified, intermediate compilation artifacts will be placed in a folder create here\",\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t},\n\t\t\t\tprettylog: {\n\t\t\t\t\tdesc: \"Prettyify log output\",\n\t\t\t\t\tboolean: true,\n\t\t\t\t\tdefault: false,\n\t\t\t\t},\n\t\t\t}).config(\"project\", (rootPath: string) => {\n\t\t\tprocess.env.VALORYCOMPILER = \"TRUE\";\n\t\t\tConfig.load(true, rootPath);\n\t\t\treturn Config.ConfigData;\n\t\t});\n\n\t\treturn inst;\n\t}, (args) => { compilerRunner(args).then().catch((err) => {\n\t\tconsole.error(err);\n\t}); })\n\t.command(\"test\", \"Start a test server\", (inst) => {\n\t\tinst.options({\n\t\t\t\tentrypoint: {\n\t\t\t\t\tdescription: \"Main entrypoint for the api\",\n\t\t\t\t},\n\t\t\t\tport: {\n\t\t\t\t\tdesc: \"Port to run the appserver on\",\n\t\t\t\t\tdefault: 8080,\n\t\t\t\t\ttype: \"number\",\n\t\t\t\t},\n\t\t\t\tprettylog: {\n\t\t\t\t\tdesc: \"Prettyify log output\",\n\t\t\t\t\tboolean: true,\n\t\t\t\t\tdefault: false,\n\t\t\t\t},\n\t\t\t\tloglevel: {\n\t\t\t\t\talias: \"l\",\n\t\t\t\t\tdesc: \"logging level\",\n\t\t\t\t\ttype: \"string\",\n\t\t\t\t\tdefault: \"info\",\n\t\t\t\t},\n\t\t\t}).config(\"project\", (rootPath: string) => {\n\t\t\tConfig.load(true, rootPath);\n\t\t\treturn Config.ConfigData;\n\t\t});\n\n\t\treturn inst;\n\t}, cliRunner)\n\t.demandCommand()\n\t.parse();\n"]}