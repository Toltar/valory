{"id":"GViV","dependencies":[{"name":"/home/john/workspace/Valory2/tsconfig.json","includedInParent":true,"mtime":1531152310742},{"name":"/home/john/workspace/Valory2/package.json","includedInParent":true,"mtime":1533664046105},{"name":"/home/john/workspace/Valory2/.babelrc","includedInParent":true,"mtime":1533664058125},{"name":"./compiler","loc":{"line":4,"column":27},"parent":"/home/john/workspace/Valory2/src/compiler/preprocessor.ts","resolved":"/home/john/workspace/Valory2/src/compiler/compiler.ts"},{"name":"./compilerheaders","loc":{"line":5,"column":34},"parent":"/home/john/workspace/Valory2/src/compiler/preprocessor.ts","resolved":"/home/john/workspace/Valory2/src/compiler/compilerheaders.ts"}],"generated":{"js":"var $GViV$exports={};Object.defineProperty($GViV$exports,\"__esModule\",{value:!0});const $GViV$var$lodash_1=require(\"lodash\"),$GViV$var$compiler_1=$parcel$require(\"GViV\",\"./compiler\"),$GViV$var$compilerheaders_1=$parcel$require(\"GViV\",\"./compilerheaders\"),$GViV$var$tstl_1=require(\"tstl\"),$GViV$var$mergeAllOf=require(\"json-schema-merge-allof\"),$GViV$var$mapKeysDeep=require(\"map-keys-deep-lodash\"),$GViV$var$deep=require(\"lodash-deep\"),$GViV$var$XXH=require(\"xxhashjs\"),$GViV$var$MANGLED_PREFIX=\"p\",$GViV$var$periodRegex=/[.]+?/g,$GViV$var$allOfRefRegex=/.allOf.[\\d]+?.\\$ref/g,$GViV$var$variantTestRegex=/definitions.([^.]*).allOf.[\\d]+?.\\$ref/g,$GViV$var$getAllOfRefIndexRegex=/allOf.([^.]*).\\$ref/g,$GViV$var$safeKey=/^(?:[A-Za-z_$])(?:[0-9a-zA-Z_$]*)$/;function $GViV$var$swaggerPreproccess(e){const r={},$=[],a={};$GViV$var$deep.deepMapValues(e,(i,V)=>{if(V.indexOf(\"discriminator\")>-1){$.push(V);const s=V.replace(\".discriminator\",\"\"),o=s+\".anyOf\",t=\"#/\"+s.replace($GViV$var$periodRegex,\"/\");a[i]={parent:s.replace(\"definitions.\",\"\"),children:[]},$GViV$var$lodash_1.set(e,o,[]),r[t]={propName:i,anyOfPath:o}}}),$GViV$var$deep.deepMapValues(e,($,i)=>{if(null!=r[$]&&$GViV$var$variantTestRegex.test(i)){const V=\"#/\"+i.replace($GViV$var$allOfRefRegex,\"\").replace($GViV$var$periodRegex,\"/\");$GViV$var$variantTestRegex.lastIndex=0;const s=$GViV$var$variantTestRegex.exec(i)[1];$GViV$var$variantTestRegex.lastIndex=0;const o={properties:{}};o.properties[r[$].propName]={const:s},a[r[$].propName].children.push(s),$GViV$var$lodash_1.set(e,i.replace(\".$ref\",\"\"),o),$GViV$var$lodash_1.get(e,`${r[$].anyOfPath}`).push({$ref:V})}});for(var i,V=$,s=0;s<V.length;s++)i=V[s],$GViV$var$lodash_1.unset(e,i);return{swagger:e,discriminators:a}}var $GViV$export$swaggerPreproccess=$GViV$var$swaggerPreproccess;function $GViV$var$objectify(e){const r={};return $GViV$var$lodash_1.forEach(e,(e,$)=>{r[\"t\"+$]=e}),r}function $GViV$var$schemaPreprocess(e){const r=$GViV$var$lodash_1.cloneDeep(e),$=new $GViV$var$tstl_1.PriorityQueue((e,r)=>e.depth>r.depth),a=(e,r=0)=>{e.properties&&$GViV$var$lodash_1.forEach(e.properties,e=>{a(e,r+1)}),e.anyOf&&($.push({depth:r,schema:e}),$GViV$var$lodash_1.forEach(e.anyOf,e=>{a(e,r+1)})),e.allOf&&$GViV$var$lodash_1.forEach(e.allOf,e=>{a(e,r+1)}),e.items&&($GViV$var$lodash_1.isArray(e.items)?$GViV$var$lodash_1.forEach(e.items,e=>{a(e,r+1)}):a(e.items,r+1)),e.additionalProperties&&a(e.additionalProperties,r+1),e.enum&&1===e.enum.length&&(e.const=e.enum[0],delete e.enum),\"file\"===e.type&&($GViV$var$compiler_1.CompileLog.debug('\"file\" type is implementation specific and therefore cannot be validated'),delete e.type),$GViV$var$compiler_1.DisallowedFormats.indexOf(e.format)>-1&&($GViV$var$compiler_1.CompileLog.debug(\"removing invalid format:\",e.format),delete e.format)},i=$GViV$var$mergeAllOf(r);return a(i),{schema:i,resQueue:$}}$GViV$exports.swaggerPreproccess=$GViV$export$swaggerPreproccess;var $GViV$export$schemaPreprocess=$GViV$var$schemaPreprocess;function $GViV$var$resolve(e){for(;!e.empty();){const r=e.top();r.schema.anyOf=$GViV$var$objectify(r.schema.anyOf),e.pop()}}$GViV$exports.schemaPreprocess=$GViV$export$schemaPreprocess;var $GViV$export$resolve=$GViV$var$resolve;function $GViV$var$mangleKeys(e){const r=[];return{schema:$GViV$var$mapKeysDeep(e,(e,$)=>{if(\"enum\"===$)return\"api_enum\";if(!$GViV$var$safeKey.test($)){const e=$GViV$var$MANGLED_PREFIX+$GViV$var$XXH.h32($,$GViV$var$compilerheaders_1.HASH_SEED).toString();return r.push({original:$,mangled:e}),e}return $}),mangledKeys:r}}$GViV$exports.resolve=$GViV$export$resolve;var $GViV$export$mangleKeys=$GViV$var$mangleKeys;$GViV$exports.mangleKeys=$GViV$export$mangleKeys;"},"hash":"e53eacadd1f71339da7a0731a8bc7212","cacheData":{"env":{},"imports":{},"exports":{"swaggerPreproccess":"$GViV$export$swaggerPreproccess","schemaPreprocess":"$GViV$export$schemaPreprocess","resolve":"$GViV$export$resolve","mangleKeys":"$GViV$export$mangleKeys"},"wildcards":[],"isCommonJS":true}}