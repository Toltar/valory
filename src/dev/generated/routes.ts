
////////////////////////////////////////////////////////
// ___   ___    _  _  ___ _____   ___ ___ ___ _____   //
// |   \ / _ \  | \| |/ _ \_   _| | __|   \_ _|_   _| //
// | |) | (_) | | .` | (_) || |   | _|| |) | |  | |   //
// |___/ \___/  |_|\_|\___/ |_|   |___|___/___| |_|   //
//                                                    //
// This file was generated by valory and should not   //
// be directly edited.                                //
////////////////////////////////////////////////////////


        
// @ts-nocheck
/* tslint:disable */

function isController(object) {
    return 'getHeaders' in object && 'getStatus' in object && 'setStatus' in object
}


        import {Endpoint, RequestValidator} from "../../main";
        import {TestController} from "./../testRoutes";
        const TestControllerController = new TestController();
        const TestControllerControllerExtendsController = isController(TestControllerController);
        
        module.exports = {
            routesVersion: 2,
            components: {"examples":{},"headers":{},"parameters":{},"requestBodies":{},"responses":{},"schemas":{"TestInput":{"properties":{"number":{"type":"number","format":"double"},"string":{"type":"string"}},"required":["number","string"],"type":"object","additionalProperties":true}},"securitySchemes":{}},
            register(app) {
                
        app.endpoint("/","POST",{"operationId":"Test","responses":{"200":{"content":{"application/json":{"schema":{"type":"string"}}},"description":"Ok"}},"security":[],"parameters":[{"in":"header","name":"cool-header","required":true,"schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/TestInput"}}}}})
            .appendMiddlewareList(TestControllerController.middleware)
            .appendMiddlewareList(TestControllerController.test.middleware)
            .appendMiddleware({
                name: "PrimaryHandler",
                async handler(ctx) {
                    if (ctx.attachments.hasAttachment(RequestValidator.ValidationErrorsKey) || ctx.attachments.hasAttachment(Endpoint.ExceptionKey)) {
                        return;
                    }
                    if (TestControllerControllerExtendsController) {
                        TestControllerController.logger = ctx.attachments.getAttachment(Endpoint.HandlerLoggerKey);
                        TestControllerController.headers = ctx.response.headers || {};
                    }
                    
                    const response = await TestControllerController.test(
                        ctx.request.body,ctx.request.headers["cool-header"]
                    );
                    ctx.response.body = response;
                    if (TestControllerControllerExtendsController) {
                        ctx.response.statusCode = TestControllerController.getStatus();
                        ctx.response.headers = TestControllerController.getHeaders();
                        TestControllerController.clearStatus();
                        TestControllerController.clearHeaders();
                    }
                }
            })
            .appendMiddlewareList(TestControllerController.test.postMiddleware)
            .appendMiddlewareList(TestControllerController.postMiddleware)
            .done();
        
            }
        };
        