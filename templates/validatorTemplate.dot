var {{= it.hash }} =
    {{
      const errorReg = /validationErrors\s*?=\s*?\[\s*?{[\s\S]*?keyword:[\s\S]*?'([\s\S]*?)'[\s\S]*?dataPath:[\s\S]*?\+[\s\S]*?\'([\s\S]*?)\s*?,[\s\S]*?schemaPath:[\s\S]*?'([\s\S]*?)'[\s\S]*?params:[\s\S]*?{([\s\S]*?)}[\s\S]*?message:[\s\S]*?'([\s\S]*?)'[\s]*?}\s*?\];[\s\S]*?return false;/g;
      const vErrorReg = /err\s*?=\s*?{[\s\S]*?keyword:[\s\S]*?'([\s\S]*?)'[\s\S]*?dataPath:[\s\S]*?\+[\s\S]*?\'([\s\S]*?)\s*?,[\s\S]*?schemaPath:[\s\S]*?'([\s\S]*?)'[\s\S]*?params:[\s\S]*?{([\s\S]*?)}[\s\S]*?message:[\s\S]*?'([\s\S]*?)'[\s]*?}[\s]*?;[\s]*?(if[\s\S]*?else[\s\S]*?;)/g;
      const anyOfErrorReturn = /validationErrors[\s]*?=[\s]*?vErrors;[\s\S]*?return[\s\S]*?false;/g;
      const reverseLabelDisc = /:CSID:([a-zA-Z0-9_$]*):([a-zA-Z0-9_$]*):([a-zA-Z0-9_$]*):[\s\S]*?fi[\s\S]*?\[([a-zA-Z0-9_$]*)[\s\S]*?\([\s\S]*?fi[\s\S]*?\)\)[\s\S]*?fi/g;
      const propGetter = /\.([^\.]*)'/g;
      const errorArrayPushSimplification = /if \(vErrors === null\) vErrors = \[([a-zA-Z0-9_$]+?)\]; else vErrors.push\(\1\);/g;
      const vErrorDec = /vErrors = null;/g;
      const reverseEscapeDiscRequired = /:CSID:([a-zA-Z0-9_$]*):([a-zA-Z0-9_$]*):([a-zA-Z0-9_$]*):[\s\S]*?'ytreporp deriuqer a si \1.ydob.tseuqer :\]deriuqer\[rorrEnoitadilaV' = rre rav/g;
      const dataObjCheckHead = /if \(\(data && typeof data === "object" && !Array.isArray\(data\)\)\) \{/g;
      const dataObjCheckTail = /}  else \{  var err =  \{ keyword: 'type' , dataPath: \(dataPath \|\| ''\) \+ "" , schemaPath: '#\/type' , params: \{ type: 'object' }  , message: 'should be object'  } ;  vErrors.push\(err\); errors\+\+;  }/g;
      const dataObjCheckTailSingle = /}  else \{  validationErrors = \[ \{ keyword: 'type' , dataPath: \(dataPath \|\| ''\) \+ "" , schemaPath: '#\/type' , params: \{ type: 'object' }  , message: 'should be object'  } \]; return false;  }/g;
      const commonTypeChecks = /== ['"](string|object|number|boolean|false|true)['"]/g;

      const discrimArr = [];
      let noop = false;

      function generateUID() {
          var firstPart = (Math.random() * 46656) | 0;
          var secondPart = (Math.random() * 46656) | 0;
          firstPart = ("000" + firstPart.toString(36)).slice(-3);
          secondPart = ("000" + secondPart.toString(36)).slice(-3);
          return Buffer.from(firstPart + secondPart).toString("base64");
      }

      function getSchemaValue(dataPath) {
          let parts = dataPath.replace("#/","").split("/");
          parts = parts.map(seg => {
              if (isNaN(seg)) {
                  return seg;
              } else {
                  return "t" + seg;
              }
          });
          return it.lodash.get(it.schema, parts.join("."));
      }

      let code = it.validate.toString();
      /* Call our own schema var */
      code = code.replace(/validate.schema/g, 'schema');

      /* Call our own error var */
      code = code.replace(/validate.errors/g, 'validationErrors');

      /* Transform returned errors */
      code = code.replace(errorReg, function(match, keyword, dataPath, schemaPath, params, message){
            let replace = "";
            var allowedVal = (keyword=="enum") ? (": [\' + " + params.replace("allowedValues: ","") + " + ']") : "";
            dataPath = dataPath.replace("normalizedHeaders", "headers");
            if (keyword =="const") {
                allowedVal = `: ${getSchemaValue(schemaPath)}`;
            }
            if(keyword==="pattern"){
                const split = message.split(" ");
                const pattern = split[split.length-1];
                split[split.length-1] = ""; /* pattern.substring(1,pattern.length-1); */
                message = split.join(" ");
            }
            if(dataPath.indexOf("+")<0){
                dataPath = dataPath.replace(/'/g,"");
                /* replace = it.stringCache.add(`'ValidationError[${keyword}]: request${dataPath} ${message}${allowedVal}'`); */
                const cachedPrefix = it.stringCache.add(`"ValidationError[${keyword}]: request"`);
                const cachedMessage = it.stringCache.add(`"${message}"`);
                replace = `${cachedPrefix} + ${cachedMessage} + "${allowedVal}"`
            } else {
                replace = (`'ValidationError[${keyword}]: request${dataPath} + ' ${message}${allowedVal}'`);
            }
            if(it.singleError){
                return "return " + replace + ";";
            } else {
                return "validationErrors.push(" + replace + ");";
            }
      });

      /* Transform returned errors inside of discriminators */
      code = code.replace(vErrorReg, function(match, keyword, dataPath, schemaPath, params, message, errPush){
            var allowedVal = (keyword=="enum") ? (": [\' + " + params.replace("allowedValues: ","") + " + ']") : "";
            let replace = "";
            dataPath = dataPath.replace("normalizedHeaders", "headers");
            /* anyOf's are always the end of a discriminator */
            if(keyword==="anyOf"){
                /* since processing is top to bottom, the last item in the queue is the correct one */
                const currentDiscrim = it.discriminators[discrimArr.pop()];
                keyword = "discriminator";
                message = `should be an implementation of ${currentDiscrim.parent} [${currentDiscrim.children}]`;
            }
            /* check const's to see if they are part of a discriminator */
            if(keyword==="const"){
                propGetter.lastIndex = 0;
                let prop = propGetter.exec(dataPath)[1];
                /* if so, tag them and add name to the queue */
                if(it.discriminators[prop] != null){
                    const id = generateUID();
                    discrimArr.push(prop);
                    if (it.discrimFastFail) {
                        return `err = null; //:${id}:${it.discriminators[prop].parent}:${prop}:DISC:\n errors++; \n break ${id}${it.discriminators[prop].parent};\n`;
                    } else {
                        return `err = null; //:${id}:${it.discriminators[prop].parent}:${prop}:DISC:\n`;
                    }
                } else {
                    allowedVal = `: ${getSchemaValue(schemaPath)}`;
                }
            }
            if(keyword==="pattern"){
                const split = message.split(" ");
                const pattern = split[split.length-1];
                split[split.length-1] = ""; /* pattern.substring(1,pattern.length-1); */
                message = split.join(" ");
            }
            if(dataPath.indexOf("+")<0){
                dataPath = dataPath.replace(/'/g,"");
                /* const cachedPrefix = it.stringCache.add(`"ValidationError[${keyword}]: request"`); */
                /* const cachedMessage = it.stringCache.add(`"${message}"`); */
                /* const cachedPath = it.stringCache.add(`'${dataPath} '`); */
                /* replace = `${cachedPrefix} + ${cachedPath} + ${cachedMessage} + '${allowedVal}'` */
                replace = `'ValidationError[${keyword}]: request${dataPath} ${message}${allowedVal}'`;
            } else {
                replace = (`'ValidationError[${keyword}]: request${dataPath} + ' ${message}${allowedVal}'`);
            }
            return "err = "+ replace + ";" + errPush;
      });

      /* Mangle ill-behaved property names */
      /* it.mangledKeys.forEach(function(item){
            var query = "\\.properties\\[['\"]"+item.original+"['\"]\\]";
            var reggy = new RegExp(query, "g");
            code = code.replace(reggy,".properties."+item.mangled);
      }); */

      /* Protect data properties */
      code = code.replace(/(data[A-Za-z_$0-9]*?)\.([A-Za-z_$0-9]+)/g, '$1["$2"]');

      /* Enum property is changed to prevent keyword collision */
      code = code.replace(/.enum;/g, '.api_enum;');

      /* NOTE: this step is no longer needed, there should be no allOf's */
      /* allOf is reformatted into object map to prevent indirection */
      /* code = code.replace(/allOf\[(\d*?)\]/g, 'allOf.t$1'); */

      /* anyOf is reformatted into object map to prevent indirection */
      code = code.replace(/anyOf\[(\d*?)\]/g, 'anyOf.t$1');

      /* Return error array if enabled */
      if (!it.singleError) {
        code = code.replace(/validationErrors[\s]+?=[\s]+?vErrors;[\s]+?return[\s]+?errors[\s]+?===[\s]+?0;/g, "if(vErrors.length===0){return true;}else{return vErrors;}");

        /* Initialize array so that null checks are unneeded */
        code = code.replace(vErrorDec, "vErrors = [];");
        code = code.replace(errorArrayPushSimplification, function(match, varName) {
          return `vErrors.push(${varName});`;
        });
      }

      /* Fix anyOf error return */
      if (it.singleError) {
        code = code.replace(anyOfErrorReturn, "return err;");
      } else {
        /* code = code.replace(anyOfErrorReturn, "(vErrors!=null) ? pushArr(validationErrors, vErrors) : validationErrors.push(err);"); */
      }

      /* Block label discriminators */
      if(it.discrimFastFail) {
          code = code.split("").reverse().join("").replace(reverseLabelDisc, (match, prop, parent, id) => {
            return `${match} :${parent}${id}`;
          }).split("").reverse().join("");

          code = code.split("").reverse().join("").replace(reverseEscapeDiscRequired, (match, prop, parent, id) => {
            return `${match} ;${parent}${id} kaerb\n;++srorre`;
          }).split("").reverse().join("");
      }

      /* Remove redundant check on root object */
      code = code.replace(dataObjCheckHead, "");
      if (it.singleError) {
          code = code.replace(dataObjCheckTailSingle, "");
      } else {
          code = code.replace(dataObjCheckTail, "");
      }

      /* Cache common type checks */
      code = code.replace(commonTypeChecks, (match, type) => {
          const cachedType = it.stringCache.add(`'${type}'`);
          return `== ${cachedType}`;
      });

      /* Check for empty validation */
      if (it.lodash.isEqual(it.schema, {"properties": {}, "required": [], "type": "object"})){
          noop = true
      }

      /* Get ready to stick it back together */
      let functionHeader = code.substring(0, code.indexOf("{"));
      let functionBody = code.substring(code.indexOf("{") + 1, code.lastIndexOf("}"));
    }}
    {{?!noop}}
        {{= functionHeader}} {
        let validationErrors = {{=(it.singleError) ? "null" : "[]"}};
        {{~ it.validate.source.defaults:d:i }}
          {{= "\/**@const*\/"}} const default{{=i}} = {{=JSON.stringify(d)}};
        {{~}}
        {{= "\/**@const*\/"}} const schema = {{= JSON.stringify(it.schema )}};
        {{
          let patterns = it.validate.source.patterns.map(function(pattern, id){
            pattern = pattern.replace(/\\/g,'\\\\');
            return ("\/**@const*\/ const pattern" + id + " = new RegExp(\"" + pattern + "\");");
          });
        }}
        {{= patterns.join("") }}
        {{= functionBody}}
        };
    {{?}}
    {{?noop}}
        noopBool;
    {{?}}
