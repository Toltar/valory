/*tslint:disable*/
////////////////////////////////////////////////////////
// ___   ___    _  _  ___ _____   ___ ___ ___ _____   //
// |   \ / _ \  | \| |/ _ \_   _| | __|   \_ _|_   _| //
// | |) | (_) | | .` | (_) || |   | _|| |) | |  | |   //
// |___/ \___/  |_|\_|\___/ |_|   |___|___/___| |_|   //
//                                                    //
// This files was generated by valory and should not  //
// be directly edited.                                //
////////////////////////////////////////////////////////

{{
function paramPath(type, name) {
    switch (type) {
        case "logger":
            return "logger";
        case "header":
            return `req.headers.${name}`;
        case "request":
            return "(req as any)";
        case "body":
            return "req.body";
        case "body-prop":
            return `req.body.${name}`;
        default:
            return `req.${type}.${name}`;
    }
}
}}
import {Valory, ApiRequest} from "{{= process.env.NODE_ENV == "test" ? "../main" : "valory"}}";
{{~ it.metadata.controllers : item}}
  import {{{= item.name}}} from "{{=item.location}}";{{~}}
{{~ it.metadata.controllers : item}}
  const {{=item.name}}Controller = new {{=item.name}}();{{~}}

function pushArr(target: any[], other: any[]): any[] {
    if (other == null) {
        return target;
    }
    if (target == null) {
        return other;
    }
    const len = other.length;
    let i;
    for(i=0;i<len;i++){
        target.push(other[i]);
    }
    return target;
}

export = {
    register: (app: Valory) => {
        {{~ it.metadata.controllers: route}}{{~ route.methods: method}}{{let path = `/${route.path}/${method.path}`.replace("//","/"); if (path.endsWith("/")) {path = path.slice(0, -1);} }}{{const conName = `${route.name}Controller`;}}{{const methodName = `${conName}.${method.name}`;}}
        const {{=conName}}{{=method.name}}Middleware = pushArr(({{=methodName}} as any).middleware, ({{=conName}} as any).middleware);
        const {{=conName}}{{=method.name}}PostMiddleware = pushArr(({{=methodName}} as any).postMiddleware, ({{=conName}} as any).postMiddleware);
        app.{{=method.method}}("{{=path}}",{{=JSON.stringify(it.swagger.paths[path][method.method], null, 2)}},(req: ApiRequest, logger: any)=>{
            return Promise.resolve({{=methodName}}(
                {{~ method.parameters: param}}{{= paramPath(param.in, param.name) }},{{~}}
            )).then((response) => {
                {{? route.extendsController}}
                const fullResponse = {
                    statusCode: {{= conName}}.getStatus(),
                    body: response,
                    headers: {{= conName}}.getHeaders(),
                };
                {{= conName}}.clearStatus();
                {{= conName}}.clearHeaders();
                return fullResponse;
                {{?}}
                {{? !route.extendsController}}
                return app.buildSuccess(response);
                {{?}}
            });
        },{{=conName}}{{=method.name}}Middleware,{{=method.isHidden}},{{=conName}}{{=method.name}}PostMiddleware);
        {{~}}{{~}}
    },
    definitions: {{=JSON.stringify(it.swagger.definitions, null, 2)}},
}