/*tslint:disable*/
////////////////////////////////////////////////////////
// ___   ___    _  _  ___ _____   ___ ___ ___ _____   //
// |   \ / _ \  | \| |/ _ \_   _| | __|   \_ _|_   _| //
// | |) | (_) | | .` | (_) || |   | _|| |) | |  | |   //
// |___/ \___/  |_|\_|\___/ |_|   |___|___/___| |_|   //
//                                                    //
// This files was generated by valory and should not  //
// be directly edited.                                //
////////////////////////////////////////////////////////

{{
function paramPath(type, name) {
    switch (type) {
        case "logger":
            return "logger";
        case "header":
            return `req.headers.${name}`;
        case "request":
            return "(req as any)";
        case "body":
            return "req.body";
        default:
            return `req.${type}.${name}`;
    }
}
}}
import {Valory, ApiRequest} from "{{= process.env.NODE_ENV == "test" ? "../main" : "valory"}}";
{{~ it.metadata.controllers : item}}
  import {{{= item.name}}} from "{{=item.location}}";{{~}}
{{~ it.metadata.controllers : item}}
  const {{=item.name}}Controller = new {{=item.name}}();{{~}}
export = {
    register: (app: Valory) => {
                  {{~ it.metadata.controllers: route}}{{~ route.methods: method}}
                  {{const path = `/${route.path}${method.path}`.replace("//","/");}}
                  app.{{=method.method}}("{{=path}}",{{=JSON.stringify(it.swagger.paths[path][method.method], null, 2)}},(req: ApiRequest, logger: any)=>{
                      return Promise.resolve({{=route.name}}Controller.{{=method.name}}(
                          {{~ method.parameters: param}}{{= paramPath(param.in, param.name) }},{{~}}
                      )).then((response) => {
                          {{? route.extendsController}}
                          const fullResponse = {
                              statusCode: {{= route.name}}Controller.getStatus(),
                              body: response,
                              headers: {{= route.name}}Controller.getHeaders(),
                          };
                          {{= route.name}}Controller.clearStatus();
                          {{= route.name}}Controller.clearHeaders();
                          return fullResponse;
                          {{?}}
                          {{? !route.extendsController}}
                          return app.buildSuccess(response);
                          {{?}}
                      })
                  },undefined,{{=method.isHidden}});
                  {{~}}{{~}}
              },
    definitions: {{=JSON.stringify(it.swagger.definitions, null, 2)}},
}