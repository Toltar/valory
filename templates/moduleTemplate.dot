{{const code = it.validatorLib.join("");}}
{{?code.indexOf("formats")>-1}}const formats = require("ajv/lib/compile/formats")({{?it.format}}'{{=it.format}}'{{?}});{{?}}
const hasher = require("xxhashjs")["h32"];
const FUNCTION_PREFIX = "f";

function pushArr(target, other) {
    const len = other.length;
    let i;
    for(i=0;i<len;i++){
        target.push(other[i]);
    }
}

const isLong = null;

function $asNull () {
    return 'null'
}

function $asInteger (i) {
    if (isLong && isLong(i)) {
        return i.toString()
    } else {
        return $asNumber(i)
    }
}

function $asNumber (i) {
    var num = Number(i);
    if (isNaN(num)) {
        return 'null'
    } else {
        return '' + num
    }
}

function $asBoolean (bool) {
    return bool && 'true' || 'false' // eslint-disable-line
}

function $asString (str) {
    if (str instanceof Date) {
        return '"' + str.toISOString() + '"'
    } else if (str === null) {
        return '""'
    } else if (str instanceof RegExp) {
        str = str.source
    } else if (typeof str !== 'string') {
        str = str.toString()
    }

    if (str.length < 42) {
        return $asStringSmall(str)
    } else {
        return JSON.stringify(str)
    }
}

function $asStringSmall (str) {
    var result = '';
    var last = 0;
    var found = false;
    var l = str.length;
    var point = 255;
    for (var i = 0; i < l && point >= 32; i++) {
        point = str.charCodeAt(i);
        if (point === 34 || point === 92) {
            result += str.slice(last, i) + '\\';
            last = i;
            found = true
        }
    }

    if (!found) {
        result = str
    } else {
        result += str.slice(last)
    }
    return point < 32 ? JSON.stringify(str) : '"' + result + '"'
}


function validate(path, method, data) {
    const key = FUNCTION_PREFIX + hasher(`${path}:${method}`, 3141997).toString();
    const serializer = module["exports"][key + "s"];
    return {
        "validator": module["exports"][key],
        "serializer": (serializer != null) ? serializer : data => data,
    };
}

function ucs2length(str) {
  var length = 0
    , len = str.length
    , pos = 0
    , value;
  while (pos < len) {
    length++;
    value = str.charCodeAt(pos++);
    if (value >= 0xD800 && value <= 0xDBFF && pos < len) {
      value = str.charCodeAt(pos);
      if ((value & 0xFC00) == 0xDC00) pos++;
    }
  }
  return length;
}

function equal(a, b) {
  if (a === b) return true;

  var arrA = Array.isArray(a)
    , arrB = Array.isArray(b)
    , i;

  if (arrA && arrB) {
    if (a.length != b.length) return false;
    for (i = 0; i < a.length; i++)
      if (!equal(a[i], b[i])) return false;
    return true;
  }

  if (arrA != arrB) return false;

  if (a && b && typeof a === 'object' && typeof b === 'object') {
    var keys = Object.keys(a);
    if (keys.length !== Object.keys(b).length) return false;

    var dateA = a instanceof Date
      , dateB = b instanceof Date;
    if (dateA && dateB) return a.getTime() == b.getTime();
    if (dateA != dateB) return false;

    var regexpA = a instanceof RegExp
      , regexpB = b instanceof RegExp;
    if (regexpA && regexpB) return a.toString() == b.toString();
    if (regexpA != regexpB) return false;

    for (i = 0; i < keys.length; i++)
      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;

    for (i = 0; i < keys.length; i++)
      if(!equal(a[keys[i]], b[keys[i]])) return false;

    return true;
  }

  return false;
};


{{=code}}


{{
let exportsDefinitions = it.exportHashes.map(function(hash){
    return ('"'+hash+'": '+ hash +',');
});
exportsDefinitions = exportsDefinitions.join("");
}}
module["exports"]= {
{{=exportsDefinitions}}
"defHash": "{{= it.defHash }}",
"globalConsume": {{= JSON.stringify(it.swagger.consumes) }},
"swaggerBlob": {{= JSON.stringify(JSON.stringify(it.swagger)) }},
"getValidator": validate
};
